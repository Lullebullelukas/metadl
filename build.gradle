buildscript {
    // This configuration is needed to find the JastAdd plugin.
    repositories.mavenCentral()
        dependencies {
                classpath 'org.jastadd:jastaddgradle:1.13.3'
        }
}

apply plugin: 'java'
apply plugin: 'jastadd'
apply plugin: 'idea'
apply plugin: 'eclipse'

defaultTasks 'test'

// Specify where to look for dependencies like Beaver, JFlex:
repositories.mavenCentral()
repositories.mavenLocal()

    // Dependency configurations (https://docs.gradle.org/current/userguide/dependency_management.html#sub:configurations):
    configurations {
        jflex
        beaver
    }

// Dependencies are Jar files needed to compile and generate the compiler.
dependencies {
    compile 'net.sf.beaver:beaver-rt:0.9.11'
    compile 'com.opencsv:opencsv:4.3.2'
    compile 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    compile 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    compile 'org.javatuples:javatuples:1.2'

    testCompile('org.junit.jupiter:junit-jupiter-api:5.3.1')
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.3.1')
    testCompile('org.junit.jupiter:junit-jupiter-params:5.3.1')

    jflex 'de.jflex:jflex:1.6.1'
    beaver 'net.sf.beaver:beaver-cc:0.9.11'
}


// This specifies where the source code is located:
sourceSets {
    main.java.srcDirs = [ 'src/java', 'src/gen' , 'src/config/gen', 'src/objlang/gen', 'src/patlang/gen']
    test.java.srcDirs = [ 'src/test' ]
}

// Configuration for the test running.
test {
    maxParallelForks = Runtime.runtime.availableProcessors()

    useJUnitPlatform()
    // {
        // excludeTags 'slow'
        // includeEngines 'junit-jupiter'
    // }
    failFast = false
    dependsOn 'cleanTest'  // This causes tests to always be re-run.

    // Summary of tests
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
    testLogging {
        outputs.upToDateWhen {false}
        // Enable stdout
        showStandardStreams true
        // Log passed/failed tests in the console (see also build/reports/tests):
        events "passed", "skipped", "failed"
    }

    doFirst {
        // Ensure src/gen exists before running JFlex:
        file('tests/output').mkdirs()
        file('tests/evaluation/bottomupout/souffle').mkdirs()
    }

    reports {
        junitXml.enabled = true
    }
    file('./tests/output/souffle').mkdirs()
}

jar {
    // The Main-Class attribute specifies which class should be run when by java -jar compiler.jar.
    manifest.attributes 'Main-Class': 'lang.Compiler'
        destinationDir = projectDir  // Gradle by default puts the Jar in build/libs/.
        archiveName = 'compiler.jar'

        // The following from-specification includes all dependencies in compiler.jar
        // so that it can be run as a separate program easily.
        // This is needed because the Beaver runtime classes are otherwise not included.
        // Source: https://www.mkyong.com/gradle/gradle-create-a-jar-file-with-dependencies/
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

// Before compiling, we should generate some Java code:
compileJava.dependsOn 'generateJava', 'generateScanner', 'generateParser',
    'generateJavaObjlang', 'generateScannerObjlang', 'generateParserObjlang',
    'generateJavaPatternLang',
    'generateConfig', 'generateScannerConfig', 'generateParserConfig'


void makeGenerateJavaTask(String name, String outDir, String srcDir, String pkg) {
    tasks.create(name, org.jastadd.JastAddTask) {
	description 'Generates the compiler AST classes from JastAdd specifications.'
	outputDir = file(outDir)
	sources = fileTree(dir: srcDir, includes: [ '**/*.jrag', '**/*.jadd', '**/*.ast' ])
	options = [ '--package=' + pkg, '--beaver' , '--rewrite=cnta' ]
    }
}

makeGenerateJavaTask('generateJava', 'src/gen', 'src/jastadd', 'lang.ast')
makeGenerateJavaTask('generateJavaObjlang', 'src/objlang/gen', 'src/objlang/jastadd', 'objlang.ast')
makeGenerateJavaTask('generateJavaPatternLang', 'src/patlang/gen', 'src/patlang/jastadd', 'patlang.ast')


void makeGenerateScannerTask(String name, String outDir, String srcFile) {
    tasks.create(name, JavaExec) {
	description 'Generates the scanner with JFlex.'
	classpath = configurations.jflex
	main = 'jflex.Main'

	// Options to JFlex (http://jflex.de/manual.html#running-jflex):
	args '-d', file(outDir).path, file(srcFile).path
    }
}

makeGenerateScannerTask('generateScanner', 'src/gen/lang/ast', 'src/scanner/scanner.flex')
makeGenerateScannerTask('generateScannerObjlang', 'src/objlang/gen/objlang/ast/', 'src/objlang/scanner/scanner.flex')

void makeGenerateParserTask(String name, String outDir, String srcFile) {
    tasks.create(name, JavaExec) {
	description 'Generates the parser with Beaver.'
	classpath = configurations.beaver
	main = 'beaver.comp.run.Make'

	// Options to Beaver (http://beaver.sourceforge.net/):
	args '-d', file(outDir).path,
	    '-t', '-c', '-w',
	    file(srcFile).path
    }
}

makeGenerateParserTask('generateParser', 'src/gen', 'src/parser/parser.beaver')
makeGenerateParserTask('generateParserObjlang', 'src/objlang/gen', 'src/objlang/parser/parser.beaver')


makeGenerateJavaTask('generateConfig', 'src/config/gen', 'src/config/', 'lang.ast.config')
makeGenerateScannerTask('generateScannerConfig', 'src/config/gen/lang/ast/config', 'src/config/scanner/scanner.flex')
makeGenerateParserTask('generateParserConfig', 'src/config/gen', 'src/config/parser/parser.beaver')


// generateScannerObjlang.dependsOn 'generateParserObjlang'
// generateParserObjlang.dependsOn 'generateJavaObjlang'

// generateScanner.dependsOn 'generateParser'
// generateParser.dependsOn 'generateJava'

// generateScannerConfig.dependsOn 'generateParserConfig'
// generateParserConfig.dependsOn 'generateConfig'

// generateJavaPatternLang.dependsOn 'generateParser'
// generateParserConfig.dependsOn 'generateParser'
// generateParser.dependsOn 'generateParserObjlang'


// The following makes the clean task also remove generated code:
clean.dependsOn 'cleanGeneratedJava'

task cleanGeneratedJava(type: Delete) {
    description 'Remove generated Java code.'
    delete file('src/gen')
    delete file('src/objlang/gen')
    delete file('src/patlang/gen')
    delete file('src/config/gen')
    delete file('compiler.jar')
    delete file('tests/output')
    delete file('tests/evaluation/bottomupout')
    delete file('./out')
    delete file('./tmp')
}

// Additional flags to the java compilter
compileJava {
    options.compilerArgs << "-Xlint:deprecation"
}

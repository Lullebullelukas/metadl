P("tests/evaluation/metadl-java/src/name-binding").

# TypeToStr(0, ""), VarDef(0, 0, 0, "") :- NEQ(0, 0).
# ClassDef(0, "", "") :- NEQ(0, 0).
# MethodDef(0, 0, "") :- NEQ(0, 0).

java('P) {
	    # Type names
	    TypeToStr(t, tname) :- t <: `t1.`t2 :>, ID(`t1, n1), TypeToStr(`t2, n2), BIND(tname, cat(n1, cat(".", n2))).

	    TypeToStr(t, tname) :- t <: `t1 < .. :>, TypeToStr(`t1, n1),
				   BIND(tname, cat(n1, "<>")).
	    TypeToStr(t, tname) :- ID(t, tname).


	    TypeToStr(t, "char") :- t <: char :>.
	    TypeToStr(t, "byte") :- t <: byte :>.
	    TypeToStr(t, "short") :- t <: short :>.
	    TypeToStr(t, "int") :- t <: int :>.
	    TypeToStr(t, "long") :- t <: long :>.
	    TypeToStr(t, "float") :- t <: float :>.
	    TypeToStr(t, "double") :- t <: double :>.
	    TypeToStr(t, "boolean") :- t <: boolean :>.

	    # Definitions
	    # VarDef (parent scope : ASTNode, variable : ASTNode, type : ASTNode, name : String)
	    VarDef(c, `v, `t, name) :- c <: class `_ { .. `d .. } :>, `d <: .. `t .., `v, ..; :>, ID(`v, name).
	    VarDef(c, `v, `t, name) :- c <: enum `_ { .. ; .. `d .. } :>, `d <: .. `t .., `v, ..; :>, ID(`v, name).

	    VarDef(b, `v, `t, name) :- b <: { .. `d .. } :>, `d <:  .. `t .. ,`v , ..;   :>, ID(`v, name).
	    VarDef(s, `v, `t, name) :- s <: for (`t `v : `_) `_ :>, ID(`v, name).
	    VarDef(s, `v, `t, name) :- s <: for (.. `t .., `v, .. ; `_ ; `_ ) `_ :>, ID(`v, name).

	    # ClassDef (node  : ASTNode, name : String, enumOrClass : String)
	    ClassDef(c, name, "class") :- c <: class `c { .. } :>, ID(`c, name).
	    ClassDef(c, name, "enum") :- c <: enum `c  { .. } :>, ID(`c, name).

	    # MethodDef (method : ASTNode, name : String)
	    MethodDef(c, `m, name) :- c <: class `_ { .. `d .. } :>, `d <: .. `_ `m (..) ; :>, ID(`m, name).
	    MethodDef(c, `m, name) :- c <: enum `_ { .. ; .. `d .. } :>, `d <: .. `_ `m (..) ; :>, ID(`m, name).
	    MethodDef(c, `m, name) :- c <: interface `_ { .. `d .. } :>, `d <: .. `_ `m (..) ; :>, ID(`m, name).


}

VarDefDetail(c, v, t, name, tname) :- VarDef(c, v, t, name), TypeToStr(t, tname).

OUTPUT('VarDefDetail).
OUTPUT('ClassDef).
OUTPUT('MethodDef).
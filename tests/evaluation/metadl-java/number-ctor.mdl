IMPORT('P, "tests/evaluation/metadl-java/src/number-ctor/", "java8").

### Transform the program P to a program Q that has all the ParseName
### node as chains of Dot nodes

Q("", 0, 0, 0, "") :- NEQ(0, 0).
P("", 0, 0, 0, "") :- NEQ(0, 0).

Q(a, b, c, d, e) :- P(a, b, c, d, e), NEQ("ParseName", a).
Q("ParseName", id, 0, d, e) :- P("ParseName", id, 0, d, e), NOT(P("ParseName", id, 1, _, _)).

# id -> (id * 26544 + 0)  * 26544) is just a hash function
# This needs to be replaced with a built-in function that maps every pair
# (n, i) to a fresh value k.

# Rule for child n-1 of a ParseName with n children
Q("ParseName", h, 0, t, "") :- P("ParseName", id, i, t, _),
	       	       NOT(P("ParseName", id, i_plus_1, _, _)), BIND(i_plus_1, i+1),
	       	       BIND(h, (id * 26544 + i)  * 26544).

# Rule for any children [1, n-2] of a ParseName with n children
Q("Dot", h1, 0, l, ""), Q("Dot", h1, 1, r, ""), Q("ParseName", l, 0, t, "") :-
		     P("ParseName", id, i, t, _),
		     P("ParseName", id, i_minus_1, _, _), BIND(i_minus_1, i - 1),
		     P("ParseName", id, i_plus_1, _, _), BIND(i_plus_1, i + 1),
		     BIND(l, (id * 26544 + i) * 26544 + 1000),
		     BIND(r, (id *  26544 + (i + 1)) * 26544),
		     BIND(h1, (id * 26544 + i) * 26544).

# Rule for child 0 of a ParseName with n children
Q("Dot", id, 0, l, ""), Q("Dot", id, 1, r, ""), Q("ParseName", l, 0, t, "") :-
		     P("ParseName", id, 0, t, _),
		     P("ParseName", id, 1, _, _),
		     BIND(l, (id * 26544 ) * 26544 + 1000),
		     BIND(r, (id *  26544 + 1) * 26544).

### End of transformation

NumberCtor(0) :- NEQ(0, 0).

# Enumerate the bad types here
TypeName("Integer"), TypeName("Long"), TypeName("Short"),
TypeName("Byte"), TypeName("Float"), TypeName("Double").


java('Q) {
	    ParentT(n, c) :- PARENT(n, c).
	    ParentT(n, c) :- ParentT(n, t), PARENT(t, c).

	    ExpectWarning(m) :- m <:  @ExpectWarning("DM_NUMBER_CTOR") .. `_ `_  (..) { .. } :>.

	    NumberCtor(e) :- e <: new `c(`_) :>, ID(`c, s), TypeName(s).
	    NumberCtor(e) :- e <: new java.lang.`c(`_) :>, ID(`c, s), TypeName(s).

	    ContainsWarning(m) :- ParentT(m, e), NumberCtor(e).
	    Mismatch(m) :- ExpectWarning(m), NOT(ContainsWarning(m)).

	    NumberCtorDetail(f, l, c) :- NumberCtor(m), SRC(m, l, c, _, _, f).
}

Result("Passed") :- NOT(Mismatch(_)).
Result("Failed") :- Mismatch(_).

OUTPUT('Result).
OUTPUT('NumberCtorDetail).

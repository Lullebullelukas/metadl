#+TITLE: MetaDL: Datalog analyzing Datalog, Java or any language of your choice

MetaDL is a Datalog language extension that enables analysis of Datalog and Java
programs inside Datalog. In addition, the subset of the metalanguage that depends on the analyzed language is mechanically generated from a description of the abstract and concrete grammars of the analyzed language.

#+BEGIN_SRC prolog
IMPORT('Program, "p/t0.mdl", "metadl").

metadl ('Program) {
  Arity(pname, arity) :- <: ... :- ..., $p(...,$i:$x), ... .:>, BIND(arity, $i+1), ID($p, pname).
  Arity(pname, arity) :- <: ... :- ..., NOT($p(...,$i:$x)), ... .:>, BIND(arity, $i+1), ID($p, pname).
  Arity(pname, arity) :- <: ..., $p(...,$i:$x), ... :- ... .:>, BIND(arity, $i+1), ID($p, pname).
}

OUTPUT('Arity).
#+END_SRC

* Building
MetaDL depends on modified versions of [[http://jastadd.org/web/][JastAdd]] and [[https://bitbucket.org/jastadd/jastaddparser/][JastAddParser]]. These dependencies are packaged as submodules, so run ~git submodule update --init --recursive~ to fetch them.

Ensure that the ~souffle~ executable is available in your ~$PATH~.

For the ~hybrid~ evaluation mode, a version of Souffle exposing a custom JNI interface is required:
#+BEGIN_SRC
git clone https://github.com/alexdura/souffle.git -b javadl
#+END_SRC

For analyzing Java, MetaDL needs access to a Java 7 runtime library (you can download it [[https://www.oracle.com/java/technologies/javase/javase7-archive-downloads.html#license-lightbox][here]]). Set ~METADL_JAVA_RT=/path/to/jre/lib/rt.jr~ in your environment to let MetaDL know where to find this library.

[[https://gradle.org/][Gradle]] is used as a build tool. Additionally, a Makefile summarizes the common build and run commands:
- Package: ~./gradlew :jar~
- Test: ~./gradlew :test~

* Running
MetaDL support multiple running modes, which represent a tradeoff between speed and external dependencies.
1. Internal evaluation
Uses the internal seminaive evaluator and it is reasonably fast when the number of tuples is small (< 1 million).
#+BEGIN_SRC
java -jar compiler.jar --eval metadl program.mdl -F fact_dir -D output_dir
#+END_SRC
** Internal parallel evaluation
If the strata dependency is graph, parallel evaluation will speed things up. For that, use the internall parallel evaluator:
#+BEGIN_SRC
java -jar compiler.jar --eval metadl-par program.mdl -F fact_dir -D output_dir
#+END_SRC
** Hybrid MetaDL-Souffle evaluation
This is performed in two-steps:
*** The MetaDL program is compiled to a native library.
#+BEGIN_SRC
java -jar compiler.jar --gen-hybrid program.mdl
#+END_SRC
This will generate a library called ~libSwigInterface.so~ in your current directory.
*** Running the compiled program
#+BEGIN_SRC
java -jar compiler.jar --eval hybrid program.mdl --lib /ABS/PATH/TO/libSwigInterface.so -F fact_dir -D output_dir
#+END_SRC
** Souffle evaluation (deprecated)
When the number of tuples is becoming large, using a high performance evaluator will make the runs faster. For this, MetaDL can generate a Souffle program and then evaluate it:
#+BEGIN_SRC
java -jar compiler.jar --eval souffle program.mdl -F fact_dir -D output_dir
#+END_SRC


* Language description
** Datalog
[[https://en.wikipedia.org/wiki/Datalog][Datalog]] is a declarative query language, with roots in logic programming. Relations between tables are expressed as Horn clauses. MetaDL extends Datalog with syntactic patterns and associates side-effects to the following predicates ~EDB~, ~IMPORT~ and ~OUTPUT~. The order of evaluation is as follows:
1. All predicates the ~EDB~ predicate depends upon are evaluated. For all tuples ~('P, "file")~ in the the ~EDB~ relation, the file is read as a CSV and its tuples are added to the relation ~P~.
2. All predicates the ~IMPORT~ predicate depends upon are evaluated. For all tuples ~('P, "path", "lang")~ in the ~IMPORT~ relation, all the files matching the language ~lang~ in ~path~ are parsed and their contents loaded as tuples into the relation ~P~.
3. Fixpoint evaluation.
4. For all values ~('P)~ in the ~OUTPUT~ relation, the contents of relation ~P~ are written out to a file ~P.csv~.

The order of evaluation was chosen for convenience reasons, to make the following patterns possible:
- Control the analyzed program from a configuration file ~Prog.csv~:
#+BEGIN_SRC
EDB('Progs, "Prog.csv").
IMPORT('P, p, "java8") :- EDB(p, _).
#+END_SRC
- Output all the input facts:
#+BEGIN_SRC
OUTPUT(p) :- EDB(p, _).
#+END_SRC

Additional Supported features:
- Stratified negation ~NOT(P(x1,...,xn))~
- Filtering ~LT(expr1, expr2)~, ~GT(expr1, expr2)~
- Object creation ~BIND(v, expr)~ binds a variable to the result of an expression
- Arithmetic expressions ( ~+~, ~-~, ~*~, ~/~) and string concatenation (~cat~) inside ~BIND~ and filtering predicates
- Type inference

** Metalanguage description
*** Analyze blocks
Datalog:  ~metadl ('P) { }~ or Java:  ~java ('P) { }~

The only blocks that are allowed to contain patterns, metavariables and gaps. All the patterns and special predicates inside these blocks refer to the analyzed program, ~\'P~.

*** Patterns
Datalog: ~<:$p(x, 1) :- ..., $q(..., $i:$v, ...) , ... .:>~ or Java ~<: class `c implements .., `i, .. { .. } :>~

Patterns are a mechanism to match rules and bind metavariables to terms, expressions and predicate symbols.
*** Bounded patterns
The root node of a pattern can be accessed by using a bounded pattern ~$p <:$x + $y:>~.

** Gaps
Datalog ~...~ or Java ~..~

Gaps express missing elements inside a list.

*** Metavariables
Datalog:  ~$x~, ~$p~  or Java: ~`c, `i~

Variables used inside analyze blocks to connect patterns with other literals in the rule
- Terms: ~p($x, $y)~
- Predicates: ~$p(x, y)~
- Arithmetic expressions: ~$x + $y~
- Index metavariables ~p(..., $i:$v, ...)~

*** Special metapredicates
Special metapredicates are allowed only inside ~analyze~ blocks.
- ~STR(c, "value")~, ~INT($c, value)~ - relate constants to their value
- ~ID(v, "name")~ - relate identifiers to their name
- ~SRC(n, l, c)~ - relate an AST node to its source location

** Examples
*** Constant folding for Datalog
#+BEGIN_SRC
#Import a program that contains BIND(t, x*y + ((1 + 2*3) - 1) / 2)

IMPORT('P, "bpatterns.in", "metadl").

metadl ('P) {
	    Expr($p, 0, $q, "+"), Expr($p, 1, $r, "+") :- $p <:$q + $r:>.
	    Expr($p, 0, $q, "*"), Expr($p, 1, $r, "*") :- $p <:$q * $r:>.
	    Expr($p, 0, $q, "-"), Expr($p, 1, $r, "-") :- $p <:$q - $r:>.
	    Expr($p, 0, $q, "/"), Expr($p, 1, $r, "/") :- $p <:$q / $r:>.

	    Eval(e, v) :- INT(e, v).
	    Eval(e, v) :- Expr(e, 0, l, "+"), Expr(e, 1, r, "+"), Eval(l, lv), Eval(r, rv), BIND(v, lv + rv).
	    Eval(e, v) :- Expr(e, 0, l, "*"), Expr(e, 1, r, "*"), Eval(l, lv), Eval(r, rv), BIND(v, lv * rv).
	    Eval(e, v) :- Expr(e, 0, l, "-"), Expr(e, 1, r, "-"), Eval(l, lv), Eval(r, rv), BIND(v, lv - rv).
	    Eval(e, v) :- Expr(e, 0, l, "/"), Expr(e, 1, r, "/"), Eval(l, lv), Eval(r, rv), BIND(v, lv / rv).

	    OurExprEval(v) :- <: ... :- ..., BIND(t, x*y + $e), ... .:>, Eval($e, v).
}

# OurExprEval = {3}.
OUTPUT('OurExprEval).
#+END_SRC

*** Type hierarchy for Java
#+BEGIN_SRC
IMPORT('P, "tests/evaluation/withimport/evalTest_15_input.java", "java8").

java ('P) {
	ClassImplementsInterface(c, i) :-
		<: class `c implements .., `i, .. { .. } :>,
		ID(`c, c), ID(`i, i).
	InterfaceExtendsInterface(i, j) :-
		<: interface `i extends `j { .. } :>,
		ID(`i, i), ID(`j, j).
	ClassExtendsClass(c, d) :-
		<: class `c extends `d { .. } :>,
		ID(`c, c), ID(`d, d).
	ClassImplementsInterface(c, i), ClassExtendsClass(c, d) :-
		<: class `c extends `d implements .., `i, .. { .. } :>,
		ID(`c, c), ID(`d, d), ID(`i, i).
}

SuperClass(c, s) :- ClassExtendsClass(c, s).
SuperClass(c, s) :- ClassExtendsClass(c, d), SuperClass(d, s).

SuperInterface(i, s) :- InterfaceExtendsInterface(i, s).
SuperInterface(i, s) :- InterfaceExtendsInterface(i, j), SuperInterface(j, s).

Interface(c, i) :- ClassImplementsInterface(c, i).
Interface(c, i) :- SuperClass(c, d), Interface(d, i).
Interface(c, i) :- Interface(c, j), SuperInterface(j, i).

OUTPUT('Interface).
OUTPUT('SuperClass).
OUTPUT('SuperInterface).
#+END_SRC

* License
This repository is covered by the license BSD 2-clause, see [[./LICENSE][LICENSE]].

* Debugging
The following commands are useful when debugging MetaDL:
- Pretty print the desugared program in MetaDL format ~java -jar compiler.jar --pretty-print metadl program.mdl~
- Pretty print the desugared program in Souffle format ~java -jar compiler.jar --pretty-print metadl program.mdl~
- Enable internal debug printouts by setting ~METADL_LOG=debug|time|info~ in the environment.

* Dependencies
** SEP
[[https://git.cs.lth.se/al7330du/sppf-earley-parser][SEP]] is an Earley parser implementation. We use it to parse the patterns.

** JastAdd
[[http://jastadd.org/web/][JastAdd]] is a meta-compilation system that
supports Reference Attribute Grammars (RAGs). It uses the parser
generated from Beaver. In addition it takes an abstract grammar description file as
input. The abstract grammar description is used to generate the classes
that represent the AST.

** ExtendJ
[[https://extendj.org][ExtendJ]] is an extensible Java compiler built using JastAdd.

** Souffle
[[https://souffle-lang.github.io/][Souffl\'e]] is a high performance Datalog
engine that MetaDL uses as backend for evaluating complex queries that
are too slow for the internal evaluator.

** JUnit
[[https://junit.org/junit5/][JUnit]] is a unit testing framework.

** JFlex
[[http://jflex.de/][JFlex]] is a lexical analyzer generator.

** Beaver
[[http://beaver.sourceforge.net/][Beaver]] is a LALR(1) parser
generator. The parser descriptions are written in EBNF-form.

* Credits
Based on the Datalog implementation developed by Hampus Balldin for the Project Course in Computer Science, Faculty of Engineering LTH, Lund University.

* MetaDL: Datalog analyzing Datalog, Java or any language of your choice

MetaDL is a Datalog language extension that enables analysis of Datalog, Java (and potentially other languages)
programs inside Datalog. In addition, the subset of the metalanguage that depends on the analyzed language is mechanically generated from a description of the abstract and concrete grammars of the analyzed language.

#+BEGIN_SRC prolog
IMPORT('Program, "p/t0.mdl", "metadl").

analyze ('Program) {
  Arity(pname, arity) :- <: ... :- ..., $p(...,$i:$x), ... .:>, BIND(arity, $i+1), ID($p, pname).
  Arity(pname, arity) :- <: ... :- ..., NOT($p(...,$i:$x)), ... .:>, BIND(arity, $i+1), ID($p, pname).
  Arity(pname, arity) :- <: ..., $p(...,$i:$x), ... :- ... .:>, BIND(arity, $i+1), ID($p, pname).
}

OUTPUT('Arity).
#+END_SRC

*THIS IS WORK IN PROGRESS. IT MAY FAIL TO BUILD, RUN OR TERMINATE.*

** Datalog

[[https://en.wikipedia.org/wiki/Datalog][Datalog]] is a declarative query language, with roots in logic programming. Relations between tables are expressed as Horn clauses.

** Language description

Current supported Meta-Literals:
- ~EDB('P, "facts.csv").~ add the facts in ~facts.csv~ to the relation ~P~
- ~OUTPUT('P).~ output the tuples in relation ~P~ to ~P.csv~
- ~IMPORT('P, "program.mdl", "metadl")~ generate a program representation relation
from ~program.mdl~ and add its tuples to the relation ~P~
- ~IMPORT('P, "program.java", "java4")~ generate a program representation relation
from ~program.java~ Java 1.4 program

Additional Supported features:
- Stratified negation ~NEG(P(x1,...,xn))~
- Filtering ~LT(expr1, expr2)~, ~GT(expr1, expr2)~
- Object creation ~BIND(v, expr)~ binds a variable to the result of an expression
- Arithmetic expressions ( ~+~, ~-~, ~*~, ~/~) and string concatenation (~cat~) inside ~BIND~ and filtering predicates
- Type inference

** Metalanguage description
*** Analyze blocks
Datalog:  ~analyze ('P, "metadl") { }~ or Java:  ~analyze('P, "java4")~

The only blocks that are allowed to contain patterns, metavariables and gaps. All the patterns and special predicates inside these blocks refer to the analyzed program, ~\'P~.

*** Patterns
Datalog: ~<:$p(x, 1) :- ..., $q(..., $i:$v, ...) , ... .:>~ or Java ~<: class `c implements .., `i, .. { .. } :>~

Patterns are a mechanism to match rules and bind metavariables to terms, expressions and predicate symbols.
**** Bounded patterns
The root node of a pattern can be accessed by using a bounded pattern ~$p <:$x + $y:>~.

*** Gaps
Datalog ~...~ or Java ~..~

Gaps express missing elements inside a list.

*** Metavariables
Datalog:  ~$x~, ~$p~  or Java: ~`c, `i~

Variables used inside analyze blocks to connect patterns with other literals in the rule
- Terms: ~p($x, $y)~
- Predicates: ~$p(x, y)~
- Arithmetic expressions: ~$x + $y~
- Index metavariables ~p(..., $i:$v, ...)~

*** Special metapredicates
Special metapredicates are permitted only inside ~analyze~ blocks.
- ~STR(c, "value")~, ~INT($c, value)~ - relate constants to their value
- ~ID(v, "name")~ - relate identifiers to their name
- ~SRC(n, l, c)~ - relate an AST node to its source location

** Examples
*** Constant folding for Datalog
#+BEGIN_SRC
#Import a program that contains BIND(t, x*y + ((1 + 2*3) - 1) / 2)

IMPORT('P, "bpatterns.in", "metadl").

analyze('P) {
	    Expr($p, 0, $q, "+"), Expr($p, 1, $r, "+") :- $p <:$q + $r:>.
	    Expr($p, 0, $q, "*"), Expr($p, 1, $r, "*") :- $p <:$q * $r:>.
	    Expr($p, 0, $q, "-"), Expr($p, 1, $r, "-") :- $p <:$q - $r:>.
	    Expr($p, 0, $q, "/"), Expr($p, 1, $r, "/") :- $p <:$q / $r:>.

	    Eval(e, v) :- INT(e, v).
	    Eval(e, v) :- Expr(e, 0, l, "+"), Expr(e, 1, r, "+"), Eval(l, lv), Eval(r, rv), BIND(v, lv + rv).
	    Eval(e, v) :- Expr(e, 0, l, "*"), Expr(e, 1, r, "*"), Eval(l, lv), Eval(r, rv), BIND(v, lv * rv).
	    Eval(e, v) :- Expr(e, 0, l, "-"), Expr(e, 1, r, "-"), Eval(l, lv), Eval(r, rv), BIND(v, lv - rv).
	    Eval(e, v) :- Expr(e, 0, l, "/"), Expr(e, 1, r, "/"), Eval(l, lv), Eval(r, rv), BIND(v, lv / rv).

	    OurExprEval(v) :- <: ... :- ..., BIND(t, x*y + $e), ... .:>, Eval($e, v).
}

# OurExprEval = {3}.
OUTPUT('OurExprEval).
#+END_SRC

*** Type hierarchy for Java
#+BEGIN_SRC
IMPORT('P, "tests/evaluation/withimport/evalTest_15_input.java", "java4").

analyze ('P, "java4") {
	ClassImplementsInterface(c, i) :-
		<: class `c implements .., `i, .. { .. } :>,
		ID(`c, c), ID(`i, i).
	InterfaceExtendsInterface(i, j) :-
		<: interface `i extends `j { .. } :>,
		ID(`i, i), ID(`j, j).
	ClassExtendsClass(c, d) :-
		<: class `c extends `d { .. } :>,
		ID(`c, c), ID(`d, d).
	ClassImplementsInterface(c, i), ClassExtendsClass(c, d) :-
		<: class `c extends `d implements .., `i, .. { .. } :>,
		ID(`c, c), ID(`d, d), ID(`i, i).
}

SuperClass(c, s) :- ClassExtendsClass(c, s).
SuperClass(c, s) :- ClassExtendsClass(c, d), SuperClass(d, s).

SuperInterface(i, s) :- InterfaceExtendsInterface(i, s).
SuperInterface(i, s) :- InterfaceExtendsInterface(i, j), SuperInterface(j, s).

Interface(c, i) :- ClassImplementsInterface(c, i).
Interface(c, i) :- SuperClass(c, d), Interface(d, i).
Interface(c, i) :- Interface(c, j), SuperInterface(j, i).

OUTPUT('Interface).
OUTPUT('SuperClass).
OUTPUT('SuperInterface).
#+END_SRC

** License

This repository is covered by the license BSD 2-clause, see
[[./LICENSE][LICENSE]].

** Dependencies
*** JFlex

[[http://jflex.de/][JFlex]] is a lexical analyzer generator.

*** Beaver

[[http://beaver.sourceforge.net/][Beaver]] is a LALR(1) parser
generator. The parser descriptions are written in EBNF-form.

*** PEP

[[https://github.com/coffeeblack/pep][PEP]] is an Earley parser implementation. We use it to parse the patterns.

*** JastAdd

[[http://jastadd.org/web/][JastAdd]] is a meta-compilation system that
supports Reference Attribute Grammars (RAGs). It uses the parser
generated from Beaver. In addition it takes an AST-description file as
input. The AST-description is used to generate and populate the
corresponding classes that represent the dynamic AST.

*** JUnit

[[https://junit.org/junit5/][JUnit]] is a unit testing framework.

*** Souffle
[[https://souffle-lang.github.io/][Souffl\'e]] is a high performance Datalog
engine that MetaDL uses as backend for evaluating complex queries that
are too slow for the internal evaluator.

** Building
MetaDL depends on modified versions of [[http://jastadd.org/web/][JastAdd]] and [[https://bitbucket.org/jastadd/jastaddparser/][JastAddParser]]. These dependencies are packaged as submodules, so run ~git submodule update --init --recursive~ to fetch them.

[[https://gradle.org/][Gradle]] is used as a build tool. Additionally, a Makefile summarizes the common build and run commands:
- Package: ~./gradlew :jar~ or ~make jar~
- Test: ~./gradlew :test~ or ~make test~
- Evaluate using the internal engine: ~make eval EVAL=<Input File>~
- Evaluate using the Souffle back-end: ~make souffle EVAL=<Input File>~

** Debugging
The following commands are useful when debugging MetaDL:
- Pretty-print desugared MetaDL code: ~make prettyinternal EVAL=<InputFile>~.
- Pretty-print the program generated for Souffl\"e: ~make prettysouffle EVAL=<InputFile>~.
- Enable internal debug printouts by setting ~DebugMode=true~ in the environment.

** Credits
Based on the Datalog implementation developed by Hampus Balldin for the Project Course in Computer Science, Faculty of Engineering LTH, Lund University.

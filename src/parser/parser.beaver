%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};

%terminals VAR_ID, PRED_ID, PRED_REF, LPARA, RPARA, LBRACK, RBRACK, LBRACE, RBRACE,
           NUMERAL, STRING, DOT, COMMA, IMPLIED_BY, EDB, OUTPUT, IMPORT,
           ATOM, NOT, BIND,  EQ, EQLIST, NEQ, LT, LTE, GT, GTE, ADD, SUB, MUL, DIV,
           ANALYZE, PATTERN;

%typeof  program             =  "Program";
%typeof  clause              =  "CommonClause";
%typeof  inner_clause        =  "Clause";
%typeof  common_literal      =  "CommonLiteral";
%typeof  literal             =  "Literal";
%typeof  bin_excl_term_lit   =  "BinaryExclusiveTermLiteral";
%typeof  bind_literal        =  "BINDLiteral";
%typeof  edb_literal         =  "EDBLiteral";
%typeof  output_literal      =  "OUTPUTLiteral";
%typeof  atom_literal        =  "ATOMLiteral";
%typeof  neg_literal         =  "NEGLiteral";
%typeof  eq_literal          =  "EQLiteral";
%typeof  eq_list_literal     =  "EQLISTLiteral";
%typeof  neq_literal         =  "NEQLiteral";
%typeof  lt_literal          =  "LTLiteral";
%typeof  lte_literal         =  "LTELiteral";
%typeof  gt_literal          =  "GTLiteral";
%typeof  gte_literal         =  "GTELiteral";
%typeof  atom                =  "Atom";
%typeof  pred_sym            =  "PredicateSymbol";
%typeof  pred_ref            =  "PredicateRef";
%typeof  variable            =  "Variable";
%typeof  constant            =  "Constant";
%typeof  int_constant        =  "IntConstant";
%typeof  string_constant     =  "StringConstant";
%typeof  term                =  "Term";
%typeof  term_list           =  "List";
%typeof  term_list_no_empty  =  "List";
%typeof  term_list_space     =  "List";
%typeof  term_list_space_no_empty  =  "List";
%typeof  lit_list            =  "List";
%typeof  clause_list         =  "List";
%typeof  inner_clause_list   =  "List";
%typeof  fact                =  "Fact";
%typeof  rule                =  "Rule";
%typeof  expr                =  "Expr";
%typeof  expr_factor         =  "Expr";
%typeof  expr_term           =  "Expr";
%typeof  expr_unit           =  "Expr";
%typeof  expr_list           =  "List";
%typeof  expr_list_no_empty  =  "List";
%typeof  add_expr            =  "Functor";
%typeof  sub_expr            =  "Functor";
%typeof  mul_expr            =  "Functor";
%typeof  div_expr            =  "Functor";
%typeof  term_list_term      =  "TermList";
%typeof  analyze_block       =  "AnalyzeBlock";
%typeof  pattern             =  "Pattern";



%goal program;

program =  clause_list.list {: return new Program(list); :};

inner_clause_list = inner_clause.c {: return new List().add(c); :}
                  | inner_clause_list.list inner_clause.c {: return list.add(c); :}
                  ;

inner_clause = rule
             | fact
             ;

clause = inner_clause
       | analyze_block
       ;

clause_list = clause.c {: return new List().add(c); :}
            | clause_list.list clause.c {: return list.add(c); :}
            ;

analyze_block = ANALYZE LPARA pred_ref.prog_ref RPARA LBRACE inner_clause_list.list RBRACE {: return new AnalyzeBlock(prog_ref, list); :};

rule = lit_list.heads IMPLIED_BY lit_list.body DOT {: return new Rule(heads, body); :};
fact = lit_list.heads DOT {: return new Fact(heads); :};

common_literal = literal
	       | pattern
               ;

literal = edb_literal
        | output_literal
        | atom
        | import_literal
        | neg_literal
        | bind_literal
        | bin_excl_term_lit
        | eq_list_literal
        | atom_literal
        ;

pattern = PATTERN.pat {: return new Pattern((String)pat.value); :};

neg_literal = NOT LPARA literal.lit RPARA {: return new NEGLiteral(new PredicateSymbol("NOT"), lit); :};

bind_literal = BIND LPARA variable.var COMMA expr.right RPARA {: return new BINDLiteral(new PredicateSymbol("BIND"), var, right); :};

bin_excl_term_lit = eq_literal
                  | neq_literal
                  | lt_literal
                  | lte_literal
                  | gt_literal
                  | gte_literal
                  ;

eq_literal  = EQ  LPARA expr.left COMMA expr.right RPARA {: return new EQLiteral(new PredicateSymbol("EQ"),   left, right); :};
neq_literal = NEQ LPARA expr.left COMMA expr.right RPARA {: return new NEQLiteral(new PredicateSymbol("NEQ"), left, right); :};
lt_literal  = LT  LPARA expr.left COMMA expr.right RPARA {: return new LTLiteral(new PredicateSymbol("LT"),   left, right); :};
lte_literal = LTE LPARA expr.left COMMA expr.right RPARA {: return new LTELiteral(new PredicateSymbol("LTE"), left, right); :};
gt_literal  = GT  LPARA expr.left COMMA expr.right RPARA {: return new GTLiteral(new PredicateSymbol("GT"),   left, right); :};
gte_literal = GTE LPARA expr.left COMMA expr.right RPARA {: return new GTELiteral(new PredicateSymbol("GTE"), left, right); :};

eq_list_literal = EQLIST LPARA term_list_term.terms RPARA {: return new EQLISTLiteral(new PredicateSymbol("EQLIST"),   terms); :};

atom = pred_sym.pred LPARA term_list.terms RPARA                      {: return new Atom(pred, terms); :};
edb_literal    = EDB    LPARA pred_ref.pred COMMA term.filelocs RPARA {: return new EDBLiteral(new PredicateSymbol("EDB"), pred, filelocs);  :};
output_literal = OUTPUT LPARA term.t RPARA                            {: return new OUTPUTLiteral(new PredicateSymbol("OUTPUT"), t);         :};
atom_literal   = ATOM   LPARA term.t RPARA                            {: return new ATOMLiteral(new PredicateSymbol("ATOM"), t);             :};
import_literal = IMPORT LPARA term.file_loc
                        COMMA pred_ref.program_ref
                        RPARA
     {: return new IMPORTLiteral(new PredicateSymbol("IMPORT"), file_loc, program_ref); :};

lit_list = common_literal.lit {: return new List().add(lit); :}
         | lit_list.list COMMA common_literal.c {: return list.add(c); :}
         ;

term_list = term_list_no_empty
          | /* epsilon */ {: return new List(); :}
          ;

term_list_no_empty = term.t {: return new List().add(t); :}
                   | term_list_no_empty.list COMMA term.t {: return list.add(t); :}
                   ;

expr = expr_term
     | functor
     ;

functor = VAR_ID.id LPARA expr_list.list RPARA {: return new Functor(new FunctorSymbol(id), list); :};
expr_list = expr_list_no_empty
          | /* epsilon */ {: return new List(); :}
          ;

expr_list_no_empty = expr.e {: return new List().add(e); :}
                   | expr_list_no_empty.list COMMA expr.e {: return list.add(e); :}
                   ;

expr_term   = add_expr
            | sub_expr
            | expr_factor
            ;

expr_factor = mul_expr
            | div_expr
            | expr_unit
            ;

expr_unit = term
              | LPARA expr.e RPARA {: return e; :}
              ;

add_expr = expr_term.e1   ADD expr_factor.e2 {: Functor f = new Functor(new FunctorSymbol("add"), new List<Expr>());
                                                f.addArg(e1); f.addArg(e2);
                                                return f; :};
sub_expr = expr_term.e1   SUB expr_factor.e2 {: Functor f = new Functor(new FunctorSymbol("sub"), new List<Expr>());
                                                f.addArg(e1); f.addArg(e2);
                                                return f; :};
mul_expr = expr_factor.e1 MUL expr_unit.e2 {: Functor f = new Functor(new FunctorSymbol("mul"), new List<Expr>());
                                                f.addArg(e1); f.addArg(e2);
                                                return f; :};
div_expr = expr_factor.e1 DIV expr_unit.e2 {: Functor f = new Functor(new FunctorSymbol("div"), new List<Expr>());
                                                f.addArg(e1); f.addArg(e2);
                                                return f; :};

term = variable
     | constant
     | pred_ref
     | term_list_term
     ;

pred_sym = PRED_ID.id  {: return new PredicateSymbol((String)id.value); :};
pred_ref = PRED_REF.id {: return new PredicateRef((String)id.value); :};


variable = VAR_ID.id {: return new Variable((String)id.value); :};
constant = int_constant
         | string_constant
         ;

int_constant    = NUMERAL.num {: return new IntConstant((String)num.value); :};
string_constant = STRING.str {: return new StringConstant((String)str.value); :};
term_list_term  = LBRACK term_list_space.tl RBRACK {: return new TermList(tl); :};

term_list_space = term_list_space_no_empty
          | /* epsilon */ {: return new List(); :}
          ;

term_list_space_no_empty = term.t {: return new List().add(t); :}
                   | term_list_space_no_empty.list term.t {: return list.add(t); :}
                   ;

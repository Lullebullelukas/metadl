import lang.io.CSVUtil;
import lang.io.FileUtil;
import org.apache.commons.collections4.map.DefaultedMap;
import java.util.LinkedHashMap;
import lang.relation.RelationWrapper;
import lang.relation.TupleInserter;
import org.apache.commons.lang3.mutable.MutableInt;
import lang.CmdLineOpts;
import java.util.concurrent.Executors;

aspect Eval {
	public void Program.evalIMPORT(EvaluationContext ctx, Map<FormalPredicate, TupleInserter> fpToSoufflePredMap) throws IOException {
		FormalPredicate fpImp = formalPredicateMap().get(GlobalNames.IMPORT_NAME);
		if (fpImp == null) {
			// no IMPORT in the program, nothing to do
			return;
		}

		// evaluate the program, up to and including the strata where IMPORT is defined
		fpImp.eval(ctx);

		// now iterate over the tuples in the IMPORT relation
		RelationWrapper importTuples = new RelationWrapper(ctx, fpImp.relation2(), fpImp.type());
		for (RelationWrapper.TupleWrapper t : importTuples.tuples()) {
			String pred = t.getAsString(0);
			String loc = t.getAsString(1);
			String srcLang = t.getAsString(2);

			FormalPredicate dstPred = formalPredicateMap().get(pred);
			Relation2 rel = dstPred.relation2();

			if (srcLang.equals("java8")) {
				if (fpToSoufflePredMap != null) {
					FileUtil.loadJavaSources(ctx, fpToSoufflePredMap.get(dstPred), Collections.singletonList(loc));
				} else {
					FileUtil.loadJavaSources(ctx, new RelationWrapper(ctx, rel, dstPred.type()),
											 Collections.singletonList(loc));
				}
			} else if (srcLang.equals("metadl")) {
				MutableInt nodeCounter = new MutableInt(1);
				try {
					lang.metadl.obj.ast.Program importedProgram = lang.metadl.obj.ast.Program.fromFileLoc(loc);
					importedProgram.assignIds(nodeCounter);
					RelationWrapper rw = new RelationWrapper(ctx, rel, dstPred.type());
					rw.insertTuples(importedProgram.datalogProjection().tuples());
				} catch (beaver.Parser.Exception exception) {
					throw new RuntimeException(exception);
				}
			} else {
				throw new RuntimeException("Unknown language for IMPORT: " + srcLang + ".");
			}
		}
	}

	public void Program.evalEDB(EvaluationContext ctx, CmdLineOpts opts) throws IOException {
		FormalPredicate fpEDB = formalPredicateMap().get(GlobalNames.EDB_NAME);

		if (fpEDB == null) {
			// no IMPORT in the program, nothing to do
			return;
		}

		fpEDB.eval(ctx);

		// now iterate over the tuples in the EDB relation
		RelationWrapper edbTuples = new RelationWrapper(ctx, fpEDB.relation2(), fpEDB.type());

		for (RelationWrapper.TupleWrapper t : edbTuples.tuples()) {
			String pred = t.getAsString(0);
			String file = t.getAsString(1);
			FormalPredicate dstPred = formalPredicateMap().get(pred);
			Relation2 rel = dstPred.relation2();

			CSVUtil.readRelation(ctx, dstPred.type(), dstPred.relation2(), opts.getFactsDir() + "/" + file);
		}
	}

	public void Program.evalOUTPUT(EvaluationContext ctx, CmdLineOpts opts) throws IOException {
		FormalPredicate fpOUTPUT = formalPredicateMap().get(GlobalNames.OUTPUT_NAME);

		if (fpOUTPUT == null) {
			// no IMPORT in the program, nothing to do
			return;
		}

		// now iterate over the tuples in the OUTPUT relation
		RelationWrapper outputTuples = new RelationWrapper(ctx, fpOUTPUT.relation2(), fpOUTPUT.type());

		for (RelationWrapper.TupleWrapper t : outputTuples.tuples()) {
			String pred = t.getAsString(0);
			FormalPredicate srcPred = formalPredicateMap().get(pred);
			CSVUtil.writeRelation(ctx, srcPred.type(), srcPred.relation2(), opts.getOutputDir() + "/" + srcPred.getPRED_ID() + ".csv");
		}
	}


	public void Program.generateObjectProgramRelations(CmdLineOpts opts) throws IOException {
		// Start a timer to measure the speed of the import
		StopWatch progRelTimer = StopWatch.createStarted();

		evalIMPORT(evalCtx(), null);

		FormalPredicate fpImp = formalPredicateMap().get(GlobalNames.IMPORT_NAME);
		if (fpImp == null)
			return;


		// now iterate over the tuples in the IMPORT relation
		RelationWrapper importTuples = new RelationWrapper(evalCtx(), fpImp.relation2(), fpImp.type());
		for (RelationWrapper.TupleWrapper t : importTuples.tuples()) {
			String pred = t.getAsString(0);

			FormalPredicate srcPred = formalPredicateMap().get(pred);
			CSVUtil.writeRelation(evalCtx(), srcPred.type(), srcPred.relation2(),
								  opts.getFactsDir() + "/" + srcPred.getPRED_ID() + ".csv");
		}

		// stop the timer and report
		progRelTimer.stop();
		SimpleLogger.logger().time("Evaluate IMPORT statements: " + progRelTimer.getTime() + "ms");
	}


	public void Program.dumpAllRelations(EvaluationContext ctx) throws IOException {
		for (FormalPredicate pred : getFormalPredicates()) {
			CSVUtil.writeRelation(ctx, pred.type(), pred.relation2(), pred.getPRED_ID() + ".csv");
		}
	}

	syn lazy EvaluationContext Program.evalCtx() = new EvaluationContext();

	public void Program.eval(CmdLineOpts opts) throws IOException {
		EvaluationContext ctx = evalCtx();

		java.util.List<Stratum> strata = strata(ctx);
		dumpStrata();
		predicateDependencyGraph().dump();

		evalEDB(ctx, opts);
		evalIMPORT(ctx, null);

		for (Stratum s : strata) {
			s.eval();
		}
		evalOUTPUT(ctx, opts);
		if (false) dumpAllRelations(ctx);
	}

	public void Program.evalParallel(CmdLineOpts opts) throws IOException {
		EvaluationContext ctx = evalCtx();

		evalEDB(ctx, opts);
		evalIMPORT(ctx, null);

		dumpStrata();
		predicateDependencyGraph().dump();

		int hwThreads = Runtime.getRuntime().availableProcessors();
		ExecutorService exec = Executors.newFixedThreadPool(Math.max(1, hwThreads / 2));

		java.util.List<ParallelStratum> readyStrata = new LinkedList<>(parallelStrata(ctx, exec));
		LinkedList<Future<java.util.List<ParallelStratum>>> futures = new LinkedList<>();

		while (!(readyStrata.isEmpty() && futures.isEmpty())) {
			// schedule any stratum that is ready
			for (ParallelStratum s : readyStrata) {
				futures.add(exec.submit(s));
			}
			readyStrata.clear();

			// iterate over all futures, check if they are done;
			// if they are, then decrement the counters of successor strata
			ListIterator<Future<java.util.List<ParallelStratum>>> it =  futures.listIterator(0);
			while (it.hasNext()) {
				Future<java.util.List<ParallelStratum>> f = it.next();
				if (f.isDone()) {
					it.remove();
					try {
						java.util.List<ParallelStratum> succs = f.get();
						for (ParallelStratum s : succs) {
							s.decPreds();
							if (s.isReady())
								readyStrata.add(s);
						}
					} catch (InterruptedException e) {
						throw new RuntimeException(e);
					} catch (ExecutionException e) {
						throw new RuntimeException(e);
					}
				}
			}
		}

		exec.shutdown();
		try {
			exec.awaitTermination(Integer.MAX_VALUE, java.util.concurrent.TimeUnit.DAYS);
		} catch (InterruptedException e) {
		}

		evalOUTPUT(ctx, opts);
		if (false) dumpAllRelations(ctx);
	}

	public void FormalPredicate.eval(EvaluationContext ctx) {
		for (Stratum s : strata(ctx)) {
			s.eval();
		}
	}
}

import java.util.TreeSet;

aspect ErrorCollection {
    /**
    	Check if the types of the constant terms used in meta-predicates are valid.
    **/
    coll TreeSet<String> Program.initialTypeCheckErrors() [new TreeSet<String>()] with add;
    syn boolean Program.hasInitialTypeErrors() = !initialTypeCheckErrors().isEmpty();
    syn String Program.initialTypeErrorReport() {
        StringBuilder sb = new StringBuilder();
        for(String err : initialTypeCheckErrors()) sb.append(err).append("\n");
        return sb.toString();
    }

    coll TreeSet<String> Program.semanticErrors() [new TreeSet<String>()] with add;
    syn boolean Program.hasSemanticErrors() = !semanticErrors().isEmpty();
    syn String Program.errorReport() {
        StringBuilder sb = new StringBuilder();
        for(String err : semanticErrors()) sb.append(err).append("\n");
        return sb.toString();
    }

    coll TreeSet<String> Program.typeCheckErrors() [new TreeSet<String>()] with add;
    syn boolean Program.hasTypeErrors() = !typeCheckErrors().isEmpty();
    syn String Program.typeErrorReport() {
        StringBuilder sb = new StringBuilder();
        for(String err : typeCheckErrors()) sb.append(err).append("\n");
        return sb.toString();
    }

    Literal contributes "Non-ground fact: " + this
        when !isGround() && isFact() && enclosingPattern() == null
        to Program.semanticErrors();

    Rule contributes "Unbound variable(s): " + unboundVariables() + " in " + this
        when !unboundVariables().isEmpty()
        to Program.semanticErrors();

    TYPEOFLiteral contributes "Wrong number of arguments in: " + this + ", expected: " + predicateRef().formalpredicate().realArity()
        when getTerm().isList() &&
             predicateRef().formalpredicate().isUniqueArity() &&
             ((TermList)getTerm()).getNumTerms() !=
             predicateRef().formalpredicate().realArity()
        to Program.semanticErrors();

    NEGLiteral contributes "Free variable(s) " + freeVars() + " in " + this + " in rule " + clause()
        when !freeVars().isEmpty() && enclosingPattern() == null
        to Program.semanticErrors();

    Functor contributes "Free variable(s) " + freeVars() + " in " + this + " in rule " + occuresIn().clause()
        when !freeVars().isEmpty() && enclosingPattern() == null
        to Program.semanticErrors();

    ClausePattern contributes "Nested patterns are not allowed in " + enclosingPattern()
        when enclosingPattern() != null
        to Program.semanticErrors();

	ClausePattern contributes "Patterns are not allowed outside the 'analyze' blocks " + this
		when enclosingAnalyzeBlock() == null
		to Program.semanticErrors();

	TermGap contributes "Gap terms '...' are not allowed outside patterns"
		when enclosingPattern() == null
		to Program.semanticErrors();

	LiteralGap contributes "Gap literals '...' are not allowed outside patterns"
		when enclosingPattern() == null
		to Program.semanticErrors();
}

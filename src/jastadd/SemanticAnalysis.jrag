import java.util.TreeSet;

aspect ErrorCollection {
    coll TreeSet<String> Program.semanticErrors() [new TreeSet<String>()] with add;
    syn boolean Program.hasSemanticErrors() = !semanticErrors().isEmpty();
    syn String Program.errorReport() {
        StringBuilder sb = new StringBuilder();
        for(String err : semanticErrors()) sb.append(err).append("\n");
        return sb.toString();
    }

    Literal contributes "Non-ground fact: " + this
        when !isGround() && isFact()
        to Program.semanticErrors();

    Rule contributes "Unbound variable(s): " + unboundVariables() + " in " + this
        when !unboundVariables().isEmpty()
        to Program.semanticErrors();

	syn TreeSet<Variable> CommonLiteral.freeVarsInNegativeLiteral() {
		if (!hasNot())
			return new TreeSet<>();

		TreeSet<Variable> negvars  = variables();
		TreeSet<Variable> inclbodyvars = ((Rule)clause()).boundVariables();
		TreeSet<Variable> free = new TreeSet<Variable>(Term.termComparator);

		for(Variable v : negvars) {
			if(!inclbodyvars.contains(v))
				free.add(v);
		}
		return free;
	}

	CommonLiteral contributes "Free variable(s) " + freeVarsInNegativeLiteral() + " in " + this + " in rule " + clause()
		when !freeVarsInNegativeLiteral().isEmpty()
		to Program.semanticErrors();

    Functor contributes "Free variable(s) " + freeVars() + " in " + this + " in rule " + literal().clause()
        when !freeVars().isEmpty()
        to Program.semanticErrors();

	Literal contributes "Nullary literals are not (yet) supported: " + getPredicate().getPRED_ID() + "." when
		arity() == 0 to Program.semanticErrors();

	Pattern contributes "Patterns are not allowed outside analyze blocks: " + this + "." when
		enclosingAnalyzeBlock() == null to Program.semanticErrors();

	Wildcard contributes this + " is not allowed inside constraints." when
		literal() instanceof Constraint to Program.semanticErrors();

	Wildcard contributes this + " is not allowed in rule heads or facts." when
		literal().isDef() to Program.semanticErrors();

	Constraint contributes "Constraints are not allowed in facts." when
		isFact() to Program.semanticErrors();

	Constraint contributes "Constraints are not allowed inside a rule's head." when
		isDef() && !isFact() to Program.semanticErrors();
}

import java.util.TreeSet;

aspect ErrorCollection {
    coll TreeSet<String> Program.semanticErrors() [new TreeSet<String>()] with add;
    syn boolean Program.hasSemanticErrors() = !semanticErrors().isEmpty();
    syn String Program.errorReport() {
        StringBuilder sb = new StringBuilder();
        for(String err : semanticErrors()) sb.append(err).append("\n");
        return sb.toString();
    }

    Literal contributes "Non-ground fact: " + this
        when !isGround() && isFact()
        to Program.semanticErrors();

    Rule contributes "Unbound variable(s): " + unboundVariables() + " in " + this
        when !unboundVariables().isEmpty()
        to Program.semanticErrors();

    NEGLiteral contributes "Free variable(s) " + freeVars() + " in " + this + " in rule " + clause()
        when !freeVars().isEmpty()
        to Program.semanticErrors();

    Functor contributes "Free variable(s) " + freeVars() + " in " + this + " in rule " + occuresIn().clause()
        when !freeVars().isEmpty()
        to Program.semanticErrors();

	// predefined literals must be ground
	Literal contributes getPredicate().getPRED_ID() + " predicate must be ground." when
		isPredefined() && !isGround() to Program.semanticErrors();

	// predefined literals must appear only inside facts
	Literal contributes getPredicate().getPRED_ID() + " predicate can be used only as a fact." when
		isPredefined() && !(clause() instanceof Fact) to Program.semanticErrors();

	Literal contributes "Nullary literals are not (yet) supported: " + getPredicate().getPRED_ID() + "." when
		arity() == 0 to Program.semanticErrors();

	Pattern contributes "Patterns are not allowed outside analyze blocks: " + this + "." when
		enclosingAnalyzeBlock() == null to Program.semanticErrors();
}

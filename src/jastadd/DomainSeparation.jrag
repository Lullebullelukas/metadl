import org.jgrapht.alg.util.UnionFind;
import java.util.stream.IntStream;
import org.apache.commons.collections4.SetUtils;

aspect DomainSeparation {
	public class DomainSignature<T> extends UnionFind<T> {
		private Set<T> elems = new HashSet<>();

		public DomainSignature(Set<T> e) {
			super(e);
			elems.addAll(e);
		}

		public DomainSignature(Collection<T> c) {
			this(new HashSet<>(c));
		}

		// Create a domain signature with the same equivalence
		// classes as sig
		public DomainSignature(DomainSignature<T> sig) {
			super(sig.elems);
			elems.addAll(sig.elems);
			for (T e : sig.elems) {
				union(e, sig.find(e));
			}
		}

		// create a new signature where i <=> j are in the same equivalence class iff
		// i <=> j in s1 and i <=> j in s2.

		public static <T extends Comparable> DomainSignature<T> merge(DomainSignature<T> s1, DomainSignature<T> s2) {
			assert s1.elems.equals(s2.elems);
			DomainSignature<T> ret = new DomainSignature<T>(s1.elems);
			for (T e1 : s1.elems) {
				for (T e2 : s2.elems) {
					if (s1.inSameSet(e1, e2) &&
						s2.inSameSet(e1, e2)) {
						ret.union(e1, e2);
					}
				}
			}
			return ret;
		}

		@Override public void addElement(T e) {
			elems.add(e);
			super.addElement(e);
		}

		@Override public boolean equals(Object o) {
			if (o == this)
				return true;
			if (!(o instanceof DomainSignature))
				return false;
			DomainSignature<T> other = (DomainSignature<T>) o;
			return equivalenceSets().equals(other.equivalenceSets());
		}

		public Set<Set<T>> equivalenceSets() {
			Map<T, Set<T>> m = new HashMap<>();
			for (T e : elems) {
				T r = find(e);
				Set<T> s = m.get(r);
				if (s == null) {
					s = new HashSet<T>();
					m.put(r, s);
				}
				s.add(e);
			}
			return new HashSet<>(m.values());
		}

		@Override public String toString() {
			return equivalenceSets().toString();
		}
	}

	syn DomainSignature<Integer> FormalPredicate.initialDomainSignature() {
		// program representation predicates have their own signatures
		if (getProgramRepresentationKind().isPresent()) {
			return programRepresentationDomainSignature(getProgramRepresentationKind().get());
		}

		DomainSignature<Integer> dom = new DomainSignature<Integer>(Collections.emptySet());
		// add all the indices that have AST type to the same domain
		int first = -1;
		for (int i : astIndices()) {
			dom.addElement(i);
			if (first != -1) {
				dom.union(first, i);
			} else {
				first = i;
			}
		}

		return dom;
	}

	syn lazy java.util.List<Integer> FormalPredicate.astIndices() {
		java.util.List<Integer> l = new ArrayList<>();
		for (int i = 0; i < type().arity(); i++) {
			if (type().get(i) == ASTNodeType.get())
				l.add(i);
		}
		return l;
	}

	syn lazy java.util.List<Integer> Literal.astIndices() =
		getPredicate().formalpredicate().astIndices();

	syn lazy Set<String> Literal.astVariables() =
		astIndices().stream().map(i -> getTerms(i)).filter(t -> t instanceof Variable).map(t -> ((Variable) t).getVAR_ID()).collect(Collectors.toSet());

	syn DomainSignature<Integer> FormalPredicate.domainSignature() circular [initialDomainSignature()] {
		// iterate over all the heads and merge their signatures
		DomainSignature<Integer> predSig = new DomainSignature<>(domainSignature());
		for (Literal l : literals()) {
			if (l.isDef() && l.clause() instanceof Rule) {
				DomainSignature<Integer> literalSig = new DomainSignature<>(astIndices());
				DomainSignature<String> clauseSig = ((Rule)l.clause()).domainSignature();
				for (int i : l.astIndices()) {
					if (!(l.getTerms(i) instanceof Variable))
						continue;
					String vi = ((Variable)l.getTerms(i)).getVAR_ID();
					for (int j : l.astIndices()) {
						if (!(l.getTerms(j) instanceof Variable))
							continue;
						String vj = ((Variable)l.getTerms(j)).getVAR_ID();
						if (clauseSig.inSameSet(vi, vj))
							literalSig.union(i, j);
					}
				}
				predSig = DomainSignature.merge(predSig, literalSig);
			}
		}
		return predSig;
	}

	private DomainSignature<String> Rule.initialDomainSignature() {
		// initially all the variables have their own domain
		DomainSignature<String> dom = new DomainSignature<String>(Collections.emptySet());
		for (String varName : varMap().variableNames()) {
			if (varMap().get(varName).get(0).type() == ASTNodeType.get()) {
				dom.addElement(varName);
			}
		}
		return dom;
	}

	syn Literal CommonLiteral.asLiteral();
	eq Literal.asLiteral() = this;
	eq Pattern.asLiteral() = getLiteral();
	eq Constraint.asLiteral() = null;

	syn DomainSignature<String> Rule.domainSignature() circular [initialDomainSignature()] {
		DomainSignature<String> ruleSig = initialDomainSignature();

		for (CommonLiteral c : getBodys()) {
			if (c.hasNot())
				continue;

			Literal l = c.asLiteral();
			if (l == null)
				continue;

			DomainSignature<Integer> literalSig = l.getPredicate().formalpredicate().domainSignature();
			for (int i : l.astIndices()) {
				if (!(l.getTerms(i) instanceof Variable))
					continue;
				String vi = ((Variable)l.getTerms(i)).getVAR_ID();
				for (int j : l.astIndices()) {
					if (!(l.getTerms(j) instanceof Variable))
						continue;
					String vj = ((Variable)l.getTerms(j)).getVAR_ID();
					if (literalSig.inSameSet(i, j))
						ruleSig.union(vi, vj);
				}
			}
		}
		return ruleSig;
	}

	public void Program.dumpDomainSignatures(PrintStream ps) {
		for (FormalPredicate p : getFormalPredicates()) {
			ps.print(p.getPRED_ID() + " : " + p.type());
			ps.println(" " + p.domainSignature().equivalenceSets());
		}
	}

	syn boolean FormalPredicate.isSingleDomain() =
		domainSignature().equivalenceSets().size() == 1;

	syn DomainSignature<Literal> Rule.domainSeparation() {
		DomainSignature<Literal> sig = new DomainSignature<>(Collections.emptySet());
		for (CommonLiteral c : getBodys()) {
			Literal l = c.asLiteral();
			if (l == null)
				continue;
			if (!l.getPredicate().formalpredicate().isASTPredicate())
				continue;
			sig.addElement(l);
		}

		for (int i = 0; i < getNumBody(); ++i) {
			Literal li = getBody(i).asLiteral();
			if (li == null)
				continue;
			if (!li.getPredicate().formalpredicate().isSingleDomain())
				continue;

			for (int j = i + 1; j < getNumBody(); ++j) {
				Literal lj = getBody(j).asLiteral();
				if (lj == null)
					continue;
				if (!lj.getPredicate().formalpredicate().isSingleDomain())
					continue;
				// both literals' domains have a single partition, check whether
				// they share a variable
				if (!SetUtils.intersection(li.astVariables(), lj.astVariables()).isEmpty())
					sig.union(li, lj);
			}
		}
		return sig;
	}

	syn boolean FormalPredicate.isLocal() circular [true] {
		for (Clause c : definedIn()) {
			if (!c.isLocal()) {
				return false;
			}
		}
		return true;
	}

	syn boolean Clause.isLocal() circular [true];
	eq Fact.isLocal() = true;
	eq Rule.isLocal() {
		java.util.List<Literal> astLiterals = new ArrayList<>();
		// all the AST literals are single domain
		for (CommonLiteral c : getBodys()) {
			Literal l = c.asLiteral();
			if (l == null)
				continue;
			FormalPredicate pred = l.getPredicate().formalpredicate();
			// this rule uses a non-local predicate
			if (!pred.isLocal())
				return false;
			if (pred.isASTPredicate()) {
				// check that the predicate has exactly one equivalence set;
				// this means that the predicate contains information about
				// exactly one AST and has witnesses for that
				if (pred.domainSignature().equivalenceSets().size() != 1)
					return false;
				// collect the literals that depend on AST facts
				astLiterals.add(l);
			}
		}

		if (astLiterals.isEmpty())
			return true;

		DomainSignature<Literal> s = new DomainSignature<>(astLiterals);
		for (int i = 0; i < astLiterals.size(); ++i) {
			Literal li = astLiterals.get(i);
			for (int j = i + 1; j < astLiterals.size(); ++j) {
				Literal lj = astLiterals.get(j);
				if (!SetUtils.intersection(li.astVariables(), lj.astVariables()).isEmpty())
					s.union(li, lj);
			}
		}

		return s.equivalenceSets().size() == 1;
	}

	syn boolean FormalPredicate.initialIsASTPredicate() {
		if (getProgramRepresentationKind().isPresent())
			return true;
		return false;
	}

	syn Set<FormalPredicate> Clause.predicateUses();
	eq Fact.predicateUses() = Collections.emptySet();
	eq Rule.predicateUses() {
		Set<FormalPredicate> res = new HashSet<>();
		for (CommonLiteral c : getBodys()) {
			Literal l = c.asLiteral();
			if (l != null) {
				res.add(l.getPredicate().formalpredicate());
			}
		}
		return res;
	}

	syn boolean Clause.isASTClause() circular [false] {
		for (FormalPredicate fp : predicateUses())
			if (!fp.isASTPredicate())
				return false;
		return true;
	}

	syn boolean FormalPredicate.isASTPredicate() circular [initialIsASTPredicate()] {
		for (Clause c : definedIn()) {
			if (!c.isASTClause())
				return false;
		}
		return true;
	}
}

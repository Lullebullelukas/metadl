import org.jgrapht.graph.DefaultDirectedGraph;
import org.jgrapht.Graph;
import org.jgrapht.graph.DefaultEdge;
import org.jgrapht.alg.connectivity.KosarajuStrongConnectivityInspector;
import org.jgrapht.alg.interfaces.StrongConnectivityAlgorithm;
import org.jgrapht.nio.dot.DOTExporter;
import org.jgrapht.traverse.TopologicalOrderIterator;
import java.util.LinkedHashSet;
import java.io.FileWriter;
import eval.Stratum;
import org.apache.commons.lang3.tuple.Triple;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Callable;

aspect Stratification {
	public class PredicateDependencyGraph extends DefaultDirectedGraph<FormalPredicate, DefaultEdge> {
		PredicateDependencyGraph() {
			super(DefaultEdge.class);
		}

		public void addEdge(Pair<Collection<FormalPredicate>, Collection<FormalPredicate>> es) {
			for (FormalPredicate from : es.getLeft())
				addVertex(from);
			for (FormalPredicate to : es.getRight())
				addVertex(to);
			for (FormalPredicate from : es.getLeft()) {
				for (FormalPredicate to : es.getRight()) {
					addEdge(from, to);
				}
			}
		}

		public void dump() throws IOException {
			DOTExporter<FormalPredicate, DefaultEdge> dotEx = new DOTExporter<>(v -> v.getPRED_ID());
			dotEx.exportGraph(this, new FileWriter("pdg.dot"));

			StrongConnectivityAlgorithm<FormalPredicate, DefaultEdge> sc =
				new KosarajuStrongConnectivityInspector<>(this);

			DOTExporter<Graph<FormalPredicate, DefaultEdge>, DefaultEdge> dotEx2 = new DOTExporter<>();

			dotEx2.exportGraph(sc.getCondensation(), new FileWriter("scc.dot"));
		}
	}

	/**
	   predicateDependencyGraph = a graph with vertices representing the predicates of the program and
	   edges the data-dependencies between these predicates. The graph contains an edge P -> Q iff
	   the Datalog program contains a rule ..., Q, ... :- ... , P, ... .
	 */
	coll PredicateDependencyGraph Program.predicateDependencyGraph() [new PredicateDependencyGraph()] with addEdge;
	coll Set<Clause> FormalPredicate.definedIn() [new LinkedHashSet<Clause>()];

	syn Pair<Collection<FormalPredicate>, Collection<FormalPredicate>> Clause.pdgContribution();
	eq Rule.pdgContribution() {
		Set<FormalPredicate> from = new HashSet<>();
		Set<FormalPredicate> to = new HashSet<>();

		for (CommonLiteral h : getHeadss()) {
			if (h instanceof Literal) {
				to.add(((Literal) h).getPredicate().formalpredicate());
			}
		}

		for (CommonLiteral t : evalSchedule()) {
			if (t instanceof Literal) {
				from.add(((Literal) t).getPredicate().formalpredicate());
			}
		}
		return Pair.of(from, to);
	}
	eq Fact.pdgContribution() {
		Set<FormalPredicate> to = new HashSet<>();
		for (CommonLiteral h : getHeadss()) {
			if (h instanceof Literal) {
				to.add(((Literal) h).getPredicate().formalpredicate());
			}
		}
		return Pair.of(Collections.emptySet(), to);
	}

	Clause contributes pdgContribution() to Program.predicateDependencyGraph();
	AnalyzeBlock contributes nta getExpandedClauses() to Program.predicateDependencyGraph();

	Literal contributes clause() when isDef() to FormalPredicate.definedIn() for getPredicate().formalpredicate();
	AnalyzeBlock contributes nta getExpandedClauses() to FormalPredicate.definedIn();

	public static Stratum Program.genStratum(EvaluationContext ctx, PredicateDependencyGraph pdg,
											 Graph<FormalPredicate, DefaultEdge> scc) {
		java.util.List<FormalPredicate> orderedPreds = new ArrayList<>(scc.vertexSet());
		Collections.sort(orderedPreds, (l, r) -> l.getPRED_ID().compareTo(r.getPRED_ID()));

		if (orderedPreds.size() == 1 &&
			!pdg.containsEdge(orderedPreds.get(0), orderedPreds.get(0))) {

			FormalPredicate p = orderedPreds.get(0);
			// control statements in the current stratum
			java.util.List<Control> stmts = new ArrayList<>();
			String desc = "";
			for (Clause c : p.definedIn()) {
				stmts.addAll(c.genCode(ctx, false, Collections.emptySet()));
				desc += c.toString();
			}
			// the stratum contains a single predicate; if it does not depend on
			// itself, then it's safe to evaluate all its rules only once
			return Stratum.single(Collections.singletonList(p.relation2()), stmts, desc);
		} else {
			// control statements in the current stratum
			java.util.List<Control> stmts = new ArrayList<>();
			String desc = "";
			for (FormalPredicate p : orderedPreds) {
				for (Clause c : p.definedIn()) {
					stmts.addAll(c.genCode(ctx, true, scc.vertexSet()));
					desc += c.toString();
				}
			}
			java.util.List<Triple<Relation2, Relation2, Relation2>> rels = orderedPreds.stream()
				.map(p -> Triple.of(p.relation2(),
									p.relation2next(),
									p.relation2delta()))
				.collect(Collectors.toList());
			return Stratum.fixpoint(rels, stmts, desc);
		}
	}

	syn lazy Graph<Graph<FormalPredicate, DefaultEdge>, DefaultEdge> Program.predicateDependencySCC() {
		PredicateDependencyGraph pdg = predicateDependencyGraph();

		StrongConnectivityAlgorithm<FormalPredicate, DefaultEdge> sca =
			new KosarajuStrongConnectivityInspector<>(pdg);

		return sca.getCondensation();
	}

	syn java.util.List<Stratum> Program.strata(EvaluationContext ctx) {
		java.util.List<Stratum> strata = new ArrayList<>();
		PredicateDependencyGraph pdg = predicateDependencyGraph();

		TopologicalOrderIterator<Graph<FormalPredicate, DefaultEdge>, DefaultEdge> it = new
			TopologicalOrderIterator<>(predicateDependencySCC());

		while (it.hasNext()) {
			Graph<FormalPredicate, DefaultEdge> scc = it.next();
			strata.add(genStratum(ctx, pdg, scc));
		}

		return strata;
	}

	public class ParallelStratum implements Callable<java.util.List<ParallelStratum>> {
		Stratum s;
		int nPreds;
		java.util.List<ParallelStratum> deps = new ArrayList<>();

		public ParallelStratum(Stratum s, int nPreds) {
			this.s = s;
			this.nPreds = nPreds;
		}

		public void decPreds() {
			assert nPreds > 0;
			nPreds--;
		}

		public boolean isReady() {
			return nPreds == 0;
		}

		@Override public java.util.List<ParallelStratum> call() {
			// evaluate the current stratum
			s.eval();
			return deps;
		}

		public void addSuccessor(ParallelStratum dep) {
			deps.add(dep);
		}
	}

	syn java.util.List<ParallelStratum> Program.parallelStrata(EvaluationContext ctx, ExecutorService exec) {
		Map<Graph<FormalPredicate, DefaultEdge>, ParallelStratum> sccToStratum = new HashMap<>();
		java.util.List<ParallelStratum> initialStrata = new ArrayList<>();

		PredicateDependencyGraph pdg = predicateDependencyGraph();
		Graph<Graph<FormalPredicate, DefaultEdge>, DefaultEdge> pdSCC = predicateDependencySCC();

		TopologicalOrderIterator<Graph<FormalPredicate, DefaultEdge>, DefaultEdge> it = new
			TopologicalOrderIterator<>(pdSCC);


		for (Graph<FormalPredicate, DefaultEdge> scc : pdSCC.vertexSet()) {
			ParallelStratum s = new ParallelStratum(genStratum(ctx, pdg, scc), pdSCC.incomingEdgesOf(scc).size());
			sccToStratum.put(scc, s);
		}

		for (Graph<FormalPredicate, DefaultEdge> scc : pdSCC.vertexSet()) {
			ParallelStratum s = sccToStratum.get(scc);
			assert s != null;
			sccToStratum.put(scc, s);
			if (pdSCC.incomingEdgesOf(scc).isEmpty()) {
				initialStrata.add(s);
			}

			for (DefaultEdge e : pdSCC.outgoingEdgesOf(scc)) {
				ParallelStratum d = sccToStratum.get(pdSCC.getEdgeTarget(e));
				assert d != null;
				s.addSuccessor(d);
			}
		}
		return initialStrata;
	}

	inh Graph<Graph<FormalPredicate, DefaultEdge>, DefaultEdge> FormalPredicate.predicateDependencySCC();
	eq Program.getFormalPredicate().predicateDependencySCC() = predicateDependencySCC();
	inh PredicateDependencyGraph FormalPredicate.predicateDependencyGraph();
	eq Program.getFormalPredicate().predicateDependencyGraph() = predicateDependencyGraph();

	private void FormalPredicate.transitiveClosureHelper(Graph<Graph<FormalPredicate, DefaultEdge>, DefaultEdge> scc,
														 Graph<FormalPredicate, DefaultEdge> thisSCC,
														 LinkedHashSet<Graph<FormalPredicate, DefaultEdge>> strata) {
		if (strata.contains(thisSCC))
			return;
		strata.add(thisSCC);
		for (DefaultEdge predSCCEdge : scc.incomingEdgesOf(thisSCC)) {
			Graph<FormalPredicate, DefaultEdge> predSCC = scc.getEdgeSource(predSCCEdge);
			transitiveClosureHelper(scc, predSCC, strata);
		}
	}

	// FormalPredicate.strata = strata that this predicate depends on, includig its own stratum;
	// the list is sorted in topological order
	syn java.util.List<Stratum> FormalPredicate.strata(EvaluationContext ctx) {
		// find the SCC that contains this formal predicate
		Graph<FormalPredicate, DefaultEdge> thisSCC =
			predicateDependencySCC().vertexSet().stream().filter(e -> e.vertexSet().contains(this)).findFirst().get();

		LinkedHashSet<Graph<FormalPredicate, DefaultEdge>> strataAsSCC = new LinkedHashSet<>();

		transitiveClosureHelper(predicateDependencySCC(),
								thisSCC, strataAsSCC);
		LinkedList<Stratum> strata = new LinkedList<>();

		strataAsSCC.forEach(scc -> strata.addFirst(Program.genStratum(ctx, predicateDependencyGraph(), scc)));

		return strata;
	}

	// TODO: check for negation in same stratum
	public void Program.dumpStrata() throws IOException {
		PrintStream f = new PrintStream("strata.dump");
		EvaluationContext ctx = new EvaluationContext();

		for (Stratum s : strata(ctx)) {
			s.prettyPrint(f);
			f.println();
		}
		f.close();
	}
}

import java.io.PrintStream;
import java.io.ByteArrayOutputStream;
import java.util.Iterator;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Collection;
import java.util.HashSet;
import lang.relation.PseudoTuple;
import lang.Compiler;
import java.util.ArrayList;

aspect PretyPrinting {
	public void ASTNode.prettyPrint(PrettyPrinter pr) {
		for(int i = 0; i < getNumChild(); ++i) {
            pr.prettyPrint(getChild(i));
        }
	}

    protected static <T extends ASTNode> void ASTNode.printList(List<T> list,
            String pre, String post, String delim, PrettyPrinter pr) {
        if (list.getNumChild() == 0)
            return;
        pr.out.print(pre);
        pr.prettyPrint(list.getChildNoTransform(0));
        if (list.getNumChild() == 1) {
            pr.out.print(post);
            return;
        }
        for (int i = 1; i != list.getNumChild(); ++i) {
            pr.out.print(delim);
            pr.prettyPrint(list.getChildNoTransform(i));
        }
        pr.out.print(post);
    }

    protected static <T extends ASTNode> void ASTNode.printCollection(Collection<T> collection,
            String pre, String post, String delim, PrettyPrinter pr) {
        Iterator<T> itr = collection.iterator();
        if (!itr.hasNext())
            return;
        pr.out.print(pre);
        pr.prettyPrint(itr.next());
        if (!itr.hasNext()) {
            pr.out.print(post);
            return;
        }
        while(itr.hasNext()) {
            pr.out.print(delim);
            pr.prettyPrint(itr.next());
        }
        pr.out.print(post);
    }

    public String ASTNode.prettyPrint() {
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        prettyPrint(new StandardPrettyPrinter(new PrintStream(bytes)));
        return bytes.toString();
    }

    public void ASTNode.prettyPrint(PrintStream out) {
        prettyPrint(new StandardPrettyPrinter(out));
    }

    public void PredicateSymbol.prettyPrint(PrettyPrinter pr) {
        pr.out.print(getPRED_ID());
    }

    public void PredicateRef.prettyPrint(PrettyPrinter pr) {
        pr.out.print("'" + getPRED_ID());
    }

    public void StringConstant.prettyPrint(PrettyPrinter pr) {
        pr.out.print("\"" + toString() + "\"");
    }

    public void Term.prettyPrint(PrettyPrinter pr) {
        pr.out.print(toString());
    }

    public void Atom.prettyPrint(PrettyPrinter pr) {
        pr.prettyPrint(getPredicate());
        printList(getTermss(), "(", ")", ", ", pr);
    }

    public void Rule.prettyPrint(PrettyPrinter pr) {
        printList(getHeadss(), "", "", ",", pr);
        pr.out.print(" :- ");
        printList(getBodys(), "", ".\n", ", ", pr);
    }

    public void Fact.prettyPrint(PrettyPrinter pr) {
        printList(getHeadss(), "", ".\n", ", ", pr);
    }

    public void EDBLiteral.prettyPrint(PrettyPrinter pr) {
        pr.prettyPrint(getPredicate());
        pr.out.print("(");
        pr.prettyPrint(getPredicateRef());
        pr.out.print(",");
        pr.prettyPrint(getFileLoc());
        pr.out.print(")");
    }

    public void IMPORTLiteral.prettyPrint(PrettyPrinter pr) {
		pr.prettyPrint(getPredicate());
		pr.out.print("(");
		pr.prettyPrint(getFileLoc());
		pr.out.print(",");
		pr.prettyPrint(getProgramRef());
		pr.out.print(")");
	}

    public void OUTPUTLiteral.prettyPrint(PrettyPrinter pr) {
        pr.prettyPrint(getPredicate());
        pr.out.print("(");
        pr.prettyPrint(getTerm());
        pr.out.print(")");
    }

    public void BinaryExclusiveTermLiteral.prettyPrint(PrettyPrinter pr) {
    	pr.prettyPrint(getPredicate());
        pr.out.print("(");
        pr.prettyPrint(getLeft());
        pr.out.print(",");
        pr.prettyPrint(getRight());
        pr.out.print(")");
    }

    public void BINDLiteral.prettyPrint(PrettyPrinter pr) {
        pr.out.print("BIND(");
    	pr.prettyPrint(getVariable());
        pr.out.print(", ");
    	pr.prettyPrint(getRight());
        pr.out.print(")");
    }

    public void NEGLiteral.prettyPrint(PrettyPrinter pr) {
    	pr.out.print("NOT(");
        pr.prettyPrint(getLiteral());
        pr.out.print(")");
    }

	public void Pattern.prettyPrint(PrettyPrinter pr) {
		printList(getLiterals(), "", "", ", ", pr);
	}

	public void AnalyzeBlock.prettyPrint(PrettyPrinter pr) {
		printList(getAllClauses(), "", "", "", pr);
	}

	public void Functor.prettyPrint(PrettyPrinter pr) {
		String op = null;
		String funcId = getFunc().getFUNC_ID();
		switch (funcId) {
		default:
			// generic functor, use prefix notation
			pr.out.print(funcId);
			printList(getArgs(), "(", ")", ", ", pr);
			return;
		case "add":
			op = "+";
			break;
		case "sub":
			op = "-";
			break;
		case "mul":
			op = "*";
			break;
		case "div":
			op = "/";
			break;
		}
		// arithmetic, infix notation
		pr.out.print("(");
		pr.prettyPrint(getArg(0));
		pr.out.print(")");
		pr.out.print(op);
		pr.out.print("(");
		pr.prettyPrint(getArg(1));
		pr.out.print(")");
	}
}

aspect ExtensionablePrinting {
    public abstract class PrettyPrinter<T extends ASTNode> {
        public final PrintStream out;
        public abstract void prettyPrint(T node);

        public PrettyPrinter(PrintStream out) {
            this.out = out;
        }
    }

    public class StandardPrettyPrinter<T extends ASTNode> extends PrettyPrinter<T> {
        public void prettyPrint(T node) {
            node.prettyPrint(this);
        }
        public StandardPrettyPrinter(PrintStream out) {
            super(out);
        }
    }

    public class SoufflePrettyPrinter<T extends ASTNode> extends PrettyPrinter<T> {
        public void prettyPrint(T node) {
            node.soufflePrint(this);
        }
        public SoufflePrettyPrinter(PrintStream out) {
            super(out);
        }
    }
}

aspect MetaPrinting {
    public static String Program.transformPredefinedName(String l) {
    	return l + "METAPREDICATE0000011111";
    }
}

aspect SoufflePrinting {
    public void ASTNode.soufflePrint(String path) throws IOException {
        File file = new File(path);
        FileOutputStream fop = new FileOutputStream(file);
        SoufflePrettyPrinter soufflePrinter = new SoufflePrettyPrinter(new PrintStream(fop));
        soufflePrinter.prettyPrint(this);
        fop.close();
    }

    public String ASTNode.soufflePrint() {
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        SoufflePrettyPrinter soufflePrinter = new SoufflePrettyPrinter(new PrintStream(bytes));
        soufflePrinter.prettyPrint(this);
        return bytes.toString();
    }

    public void ASTNode.soufflePrint(PrettyPrinter pr) {
        prettyPrint(pr);
    }

    public void NEGLiteral.soufflePrint(PrettyPrinter pr) {
    	pr.out.print("!");
        pr.prettyPrint(getLiteral());
    }

    public abstract String BinaryExclusiveTermLiteral.souffleOPString();
    public String EQLiteral.souffleOPString()  { return  "="; }
	public String NEQLiteral.souffleOPString() { return "!="; }
	public String LTLiteral.souffleOPString()  { return "<";  }
	public String LTELiteral.souffleOPString() { return "<="; }
	public String GTLiteral.souffleOPString()  { return ">";  }
	public String GTELiteral.souffleOPString() { return ">="; }

    public void BinaryExclusiveTermLiteral.soufflePrint(PrettyPrinter pr) {
        pr.prettyPrint(getLeft());
        pr.out.print(" ");
        pr.out.print(souffleOPString());
        pr.out.print(" ");
        pr.prettyPrint(getRight());
    }

    public void PredicateRef.soufflePrint(PrettyPrinter pr) {
        pr.out.print("\"");
        prettyPrint(pr);
        pr.out.print("\"");
    }

	public void Variable.soufflePrint(PrettyPrinter pr) {
		pr.out.print(getVAR_ID().replace("$", "?"));
	}

    public void Literal.artificalInput(PrettyPrinter pr) {
        pr.out.print(".input ");
        pr.out.print(predicate().getPRED_ID());
        pr.out.print("(filename=");
        pr.out.print("\"" + predicate().getPRED_ID() + ".csv" + "\"");
        pr.out.print(", delimiter=\",\"");
        pr.out.print(")\n");
    }

    public void BINDLiteral.soufflePrint(PrettyPrinter pr) {
    	pr.prettyPrint(getVariable());
        pr.out.print(" = ");
    	pr.prettyPrint(getRight());
    }

	public void Fact.soufflePrint(PrettyPrinter pr) {
		HashSet<Literal> nonIncl = new HashSet<Literal>();
		for(CommonLiteral il : getHeadss())
			nonIncl.add((Literal)il);
		printCollection(nonIncl, "", " :- true.\n", ", ", pr);
	}

    public void FormalPredicate.soufflePrint(PrettyPrinter pr) {
        if(!literal().isInclusive()) return;
        pr.out.print(".decl " + predicateName() + "(");
        ArrayList<PredicateSymbol> constants = new ArrayList<PredicateSymbol>();
        for(int i = 0; i != realArity(); ++i) {
			Type t = type().get(i);
			String souffleType = t == IntegerType.get() ? "number" : "symbol";
            constants.add(new PredicateSymbol("x_" + i + ":" + souffleType));
        }
        printCollection(constants, "", "", ", ", pr);
        pr.out.print(")");
    }

    private void Program.soufflePrintEDBDecl(PrettyPrinter pr) {
        FormalPredicate fp = formalPredicateMap().get(GlobalNames.EDB_NAME);
        if(fp == null) return;
		for (PredicateSymbol psym : fp.predicates()) {
			EDBLiteral edb = (EDBLiteral) psym.literal();

			PredicateRef predref = edb.getPredicateRef();
			StringConstant fileloc = (StringConstant) edb.getFileLoc();

			pr.out.print(".input ");
			pr.out.print(predref.getPRED_ID());
			pr.out.print("(filename=");
			pr.prettyPrint(fileloc);
			pr.out.print(", delimiter=\"");
			pr.out.print(Compiler.getCSVSeparatorEscaped());
			pr.out.print("\")\n");
		}
    }

    private void Program.soufflePrintOUTPUTDecl(PrettyPrinter pr) {
        FormalPredicate fp = formalPredicateMap().get(GlobalNames.OUTPUT_NAME);
        if(fp == null) return;
		for (PredicateSymbol psym : fp.predicates()) {
			OUTPUTLiteral output = (OUTPUTLiteral) psym.literal();
			PredicateRef predref = (PredicateRef)output.getTerm();
            pr.out.print(".output " + predref.getPRED_ID() + "(delimiter=\"");
			pr.out.print(Compiler.getCSVSeparatorEscaped());
			pr.out.print("\")\n");
		}
    }

    private String Program.souffleConstantToString(Constant C) {
	if (C instanceof PredicateRef) {
	    return "\"'" + ((PredicateRef)C).getPRED_ID() + "\"";
	} else if (C instanceof StringConstant) {
    	    return "\"" + C.toString() + "\"";
	} else {
	    return C.toString();
	}
    }


    private void Program.soufflePrintIMPORTFacts(PrettyPrinter pr) {
		FormalPredicate fp = formalPredicateMap().get(GlobalNames.IMPORT_NAME);
		if (fp == null) return;
		IMPORTLiteral importLiteral = (IMPORTLiteral) fp.literal();

		for (PredicateSymbol psym : fp.predicates()) {
			IMPORTLiteral imp = (IMPORTLiteral) psym.literal();
			PredicateRef predref = (PredicateRef) imp.getProgramRef();
			String predName = predref.getPRED_ID();
			String fileLoc = predName + ".csv";
            pr.out.print(".input ");
            pr.out.print(predName);
            pr.out.print("(filename=\"");
            pr.out.print(fileLoc);
            pr.out.print("\", delimiter=\"");
			pr.out.print(Compiler.getCSVSeparatorEscaped());
            pr.out.print("\")\n");
		}
    }


    public void Program.soufflePrint(PrettyPrinter pr) {
        printList(getFormalPredicates(), "", "\n", "\n", pr);
        HashSet<String> visited = new HashSet<String>();
        for(Literal l : predefinedLiterals()) {
            if(!visited.contains(l.predicate().getPRED_ID())) {
                // l.artificalInput(pr);
                visited.add(l.predicate().getPRED_ID());
            }
        }
        soufflePrintEDBDecl(pr);
        soufflePrintOUTPUTDecl(pr);
		soufflePrintIMPORTFacts(pr);
        prettyPrint(pr);
    }
}

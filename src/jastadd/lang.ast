/**
	Program
**/
Program  ::= CommonClause* /FormalPredicate*/;



/**
   Clause
**/
abstract CommonClause;
abstract Clause : CommonClause ::= Heads:CommonLiteral*;
Rule:Clause ::= Body:CommonLiteral*;
Fact:Clause;
AnalyzeBlock:CommonClause ::= ProgramRef:PredicateRef Lang:StringConstant EquivalenceDecl* Clause* /ExpandedClause:Clause*/;


/**
Equivalence
EquivalenceDecls come before Clauses in the AnalyzeBlocks
**/

EquivalencePatternDecl ::= <PATTERN>;
EquivalenceDecl ::= <LABEL> EquivalencePatternDecl*;


/**
   Marker AST node for negated Literals
**/
Not;

/**
   Literals
**/
abstract CommonLiteral ::= [Not];

Literal:CommonLiteral ::= Predicate:PredicateSymbol Terms:Term*;
abstract Constraint:CommonLiteral ::= Expr*;

abstract BinaryIntegerConstraint : Constraint;
EQLiteral:BinaryIntegerConstraint;
NEQLiteral:BinaryIntegerConstraint;
LTLiteral:BinaryIntegerConstraint;
LTELiteral:BinaryIntegerConstraint;
GTLiteral:BinaryIntegerConstraint;
GTELiteral:BinaryIntegerConstraint;

MATCHLiteral:Constraint;
BINDLiteral:Constraint;

/**
	Expressions
**/
abstract Expr;
Functor : Expr ::= Func:FunctorSymbol Arg:Expr*;

/**
    Terms
**/
abstract Term:Expr;
abstract Constant:Term;
abstract CommonVariable:Term;

Variable:CommonVariable ::= <VAR_ID>;
Wildcard:CommonVariable;
PredicateRef:Constant   ::= <PRED_ID>;
StringConstant:Constant ::= <STRING>;
IntConstant:Constant    ::= <NUMERAL>;

/**
    PredicateSymbols
**/
FormalPredicate ::= <PRED_ID>;
PredicateSymbol ::= <PRED_ID>;
FunctorSymbol ::= <FUNC_ID>;

/**
   Patterns
**/
Pattern : CommonLiteral ::= <PATTERN> /Literal/;
BoundedPattern : Pattern ::= CommonVariable;
EquivalencePattern : Pattern ::= <LABEL>;

/**
   Equivalence
**/



/**
   Internal AST Nodes
**/
InternalLiteral : Literal;
InternalFunctor : Functor;
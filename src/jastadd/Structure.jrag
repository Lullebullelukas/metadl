import java.util.HashSet;
import java.util.HashMap;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Set;
import lang.io.SimpleLogger;
import java.util.Collections;

aspect Utility {
	public class MapEntry<Key, Value> {
		public Key k;
		public Value v;

		public MapEntry(Key k, Value v) {
			this.k = k;
			this.v = v;
		}

		public boolean equals(Object o) {
			if (!(o instanceof MapEntry))
				return false;
			MapEntry<Key, Value> other = (MapEntry<Key, Value>) o;
			return k.equals(other.k) && v.equals(other.v);
		}

		public int hashCode() {
			return k.hashCode() ^ v.hashCode();
		}
	}

	public abstract class SetConstructor<Value, S extends Set<Value>> {
		public abstract S construct();
	}

	 public class HashSetConstructor<Value> extends SetConstructor<Value, HashSet<Value>> {
		public HashSet<Value> construct() {
			return new HashSet<Value>();
		}
	}

	public class MapToSetOf<Key, Value> extends HashMap<Key, Set<Value>> {
		private SetConstructor<Value, Set<Value>> constructor;
		public MapToSetOf(SetConstructor<Value, Set<Value>> constructor) {
			this.constructor = constructor;
		}
		public void add(MapEntry<Key, Value> me) {
			Set<Value> values = get(me.k);
			if(values == null) {
				values = constructor.construct();
				values.add(me.v);
				put(me.k, values);
			}else {
				values.add(me.v);
			}
		}


		public void addAll(Set<MapEntry<Key, Value>> mes) {
			for(MapEntry<Key, Value> me : mes) {
				Set<Value> values = get(me.k);
				if(values == null) {
					values = constructor.construct();
					values.add(me.v);
					put(me.k, values);
				}else {
					values.add(me.v);
				}
			}
		}
	}
}

aspect Program {
	inh Program Clause.program();
	eq Program.getChild().program() = this;

	coll HashSet<PredicateInterface> Program.predicateSymbols() [new HashSet<PredicateInterface>()] with add;
	PredicateSymbol contributes this to Program.predicateSymbols();
	PredicateRef	contributes this to Program.predicateSymbols();

	syn TreeSet<PredicateInterface> Program.uniquePredicateSymbols() {
		TreeSet<PredicateInterface> uniquePredicateSymbols = new TreeSet<PredicateInterface>(Program.predicateComparator);
		uniquePredicateSymbols.addAll(predicateSymbols());
		return uniquePredicateSymbols;
	}

	syn MapToSetOf<String, PredicateInterface> Program.predicateMap() {
		MapToSetOf<String, PredicateInterface> predicateMap = new MapToSetOf(new HashSetConstructor());
		for(PredicateInterface pred : predicateSymbols())
			predicateMap.add(new MapEntry(pred.getPRED_ID(), pred));
		return predicateMap;
	}

	public class FormalPredicateMap extends HashMap<String, FormalPredicate> {
		public void add(MapEntry<String, FormalPredicate> me) { put(me.k, me.v); }
	}

	coll FormalPredicateMap Program.formalPredicateMap() [new FormalPredicateMap()] with add;
	Program contributes nta getFormalPredicateList() to Program.formalPredicateMap();
	FormalPredicate contributes new MapEntry(predicateName(), this) to Program.formalPredicateMap();
	eq Program.getChild().formalPredicateMap() = formalPredicateMap();

	coll TreeSet<Literal> Program.predefinedLiterals() [new TreeSet<Literal>(Literal.literalComparator)] with add;
	Literal contributes this when isPredefined() to Program.predefinedLiterals();
}

aspect Clause {
	inh Clause Literal.clause();
	eq Clause.getChild().clause() = this;

	syn boolean CommonClause.isRule();
	eq Rule.isRule() = true;
	eq Fact.isRule() = false;
	eq AnalyzeBlock.isRule() = false;

	syn HashSet<Literal> Rule.literals() {
		HashSet<Literal> literals = new HashSet<Literal>();
		for(CommonLiteral l : getHeadss()) literals.add(l.asLiteral());
		literals.addAll(flattenedBodyLiterals());
		return literals;
	}

	syn HashSet<Literal> Rule.flattenedBodyLiterals() {
		HashSet<Literal> literals = new HashSet<Literal>();
		for(CommonLiteral l : getBodys()) literals.add(l.asLiteral());
		return literals;
	}

	syn TreeSet<Variable> Rule.variables() {
		TreeSet<Variable> variables = new TreeSet<Variable>(Term.termComparator);
		for(CommonLiteral l : literals()) variables.addAll(l.variables());
		return variables;
	}

	syn TreeSet<Variable> Rule.headVariables() {
		TreeSet<Variable> variables = new TreeSet<Variable>(Term.termComparator);
		for(CommonLiteral l : getHeadss()) variables.addAll(l.variables());
		return variables;
	}

	syn TreeSet<Variable> Rule.bodyVariables() {
		TreeSet<Variable> variables = new TreeSet<Variable>(Term.termComparator);
		for(CommonLiteral l : getBodys()) variables.addAll(l.variables());
		return variables;
	}

	syn TreeSet<Variable> Rule.unboundVariables() {
		TreeSet<Variable> variables = new TreeSet<Variable>(Term.termComparator);
		for(Variable v : headVariables())
			if(!bodyVariables().contains(v)) variables.add(v);
		return variables;
	}

	syn TreeSet<Variable> Rule.inclusiveBodyVariables() {
		TreeSet<Variable> variables = new TreeSet<Variable>(Term.termComparator);
		for(CommonLiteral l : getBodys()) {
			if(l.isInclusive())
				variables.addAll(l.variables());
			if(l.isBind()) {
				variables.addAll(((BINDLiteral)l).getVariable().variables());
			}
		}
		return variables;
	}
}

aspect Literal {
	syn PredicateSymbol CommonLiteral.predicate();
	eq Pattern.predicate() = null;

	eq Literal.predicate() = getPredicate();

	inh boolean Literal.isFact();
	eq Clause.getChild().isFact()		 = false;
	eq Fact.getHeads(int index).isFact() =	true;

	syn boolean Literal.isEDB() = getPredicate().getPRED_ID().equals(GlobalNames.EDB_NAME);
	syn boolean Literal.isOUTPUT() = getPredicate().getPRED_ID().equals(GlobalNames.OUTPUT_NAME);
	syn boolean Literal.isIMPORT() = getPredicate().getPRED_ID().equals(GlobalNames.IMPORT_NAME);
	syn boolean Literal.isPredefined() = isEDB() || isOUTPUT() || isIMPORT();

	syn boolean Literal.isAtom();
	eq	Literal.isAtom() = false;
	eq	Atom.isAtom()	 = true;

	syn boolean CommonLiteral.isNeg() = false;
	eq	NEGLiteral.isNeg()	  = true;

	syn boolean CommonLiteral.isBind() = false;
	eq	BINDLiteral.isBind()   = true;

	syn boolean CommonLiteral.isInclusive();
	eq CommonLiteral.isInclusive() = false;
	eq Atom.isInclusive() = true;

	inh boolean Literal.isDef();
	eq Clause.getChild().isDef() = false;
	eq Rule.getHeads().isDef()	 =	true;
	eq Fact.getHeads().isDef()	 =	true;

	inh boolean Literal.isUse();
	eq Clause.getChild().isUse() = false;
	eq Rule.getBody().isUse()	 = true;

	syn boolean Literal.isGround() = variables().isEmpty();

	syn TreeSet<Variable> CommonLiteral.variables();
	eq Atom.variables() {
		TreeSet<Variable> vars = new TreeSet<Variable>(Term.termComparator);
		for(Term t : getTermss())
			if(t.isVariable())
				vars.addAll(t.variables());
		return vars;
	}

	eq Constraint.variables() {
		TreeSet<Variable> vars = new TreeSet<Variable>(Term.termComparator);
		for(Expr e : getExprs())
			vars.addAll(e.variables());
		return vars;
	}

	public TreeSet<Variable> Literal.toVarSet(Term t) {
		TreeSet<Variable> vars = new TreeSet<Variable>(Term.termComparator);
		if(t.isVariable()) vars.add((Variable)t);
		return vars;
	}

	eq NEGLiteral.variables()	 = getCommonLiteral().variables();

	eq BINDLiteral.variables()	{
		TreeSet<Variable> vars = new TreeSet<Variable>(Term.termComparator);
		Variable v;
		vars.addAll(getVariable().variables());
		vars.addAll(getRight().variables());
		return vars;
	}

	eq BinaryExclusiveTermLiteral.variables() {
		TreeSet<Variable> vars = new TreeSet<Variable>(Term.termComparator);
		vars.addAll(getLeft().variables());
		vars.addAll(getRight().variables());
		return vars;
	}

	syn TreeSet<Constant> BinaryExclusiveTermLiteral.constants() {
		TreeSet<Constant> constants = new TreeSet<Constant>(Term.termComparator);
		constants.addAll(getLeft().constants());
		constants.addAll(getRight().constants());
		return constants;
	}

	syn TreeSet<Variable> NEGLiteral.freeVars() {
		TreeSet<Variable> negvars  = getCommonLiteral().variables();
		TreeSet<Variable> inclbodyvars = ((Rule)clause()).inclusiveBodyVariables();
		TreeSet<Variable> free = new TreeSet<Variable>(Term.termComparator);

		for(Variable v : negvars) {
			if(!inclbodyvars.contains(v))
				free.add(v);
		}
		return free;
	}
}

aspect CommonLiteral {
	syn Literal CommonLiteral.asLiteral();
	eq Pattern.asLiteral() = getLiteral();
	eq Literal.asLiteral() = this;
}

aspect Predicate {
	inh Literal PredicateSymbol.literal();
	inh Literal Term.literal();
	inh Literal PredicateRef.literal();
	eq	Literal.getChild().literal() = this;
	eq	AnalyzeBlock.getChild().literal() = null;

	public interface PredicateInterface {
		public boolean isRef();
		public String getPRED_ID();
	}
	PredicateSymbol implements PredicateInterface;
	PredicateRef	implements PredicateInterface;

	public boolean PredicateSymbol.isRef() { return false; }
	public boolean PredicateRef.isRef()	   { return true; }

	syn boolean PredicateInterface.isFact()	 = literal().isFact();
	syn boolean PredicateInterface.isEDB()	 = literal().isEDB();
	syn boolean PredicateInterface.isUse()	 = literal().isUse();
	syn boolean PredicateInterface.isDef()	 = literal().isDef();
	syn boolean PredicateInterface.isNeg()	 = literal().isNeg();
}

aspect Term {
	inh Literal Term.occuresIn();
	eq	Literal.getChild().occuresIn() = this;

	syn boolean Term.isWildcard() = false;
	eq Wildcard.isWildcard() = true;
}

aspect Expression {
	inh Literal Expr.occuresIn();
	public abstract TreeSet<Variable> Expr.variables();

	syn TreeSet<Variable> Functor.variables() {
		TreeSet<Variable> vars = new TreeSet<Variable>(Term.termComparator);
		for (Expr e : getArgs())
			vars.addAll(e.variables());
		return vars;
	}

	syn TreeSet<Variable> Functor.freeVars() {
		TreeSet<Variable> inclbodyvars = ((Rule)occuresIn().clause()).inclusiveBodyVariables();
		TreeSet<Variable> free = new TreeSet<Variable>(Term.termComparator);

		for(Variable v : variables()) {
			if(!inclbodyvars.contains(v))
				free.add(v);
		}
		return free;
	}

	syn TreeSet<Variable> Term.variables()	   = new TreeSet<Variable>(Term.termComparator);
	syn TreeSet<Variable> Variable.variables() {
		TreeSet<Variable> vars = new TreeSet<Variable>(Term.termComparator);
		vars.add(this);
		return vars;
	}

	public abstract TreeSet<Constant> Expr.constants();
	syn TreeSet<Constant> Term.constants()	   = new TreeSet<Constant>(Term.termComparator);
	syn TreeSet<Constant> Constant.constants() {
		TreeSet<Constant> constants = new TreeSet<Constant>(Term.termComparator);
		constants.add(this);
		return constants;
	}
	syn TreeSet<Constant> Functor.constants() {
		TreeSet constants = new TreeSet<>(Term.termComparator);
		for (Expr e : getArgs())
			constants.addAll(e.constants());
		return constants;
	}
}

aspect FormalPredicate {
	syn List Program.getFormalPredicateList() {
		List list = new List();
		for(PredicateInterface pred : uniquePredicateSymbols()) {
			if(!pred.isRef()) {
				FormalPredicate fp = new FormalPredicate(pred.getPRED_ID());
				list.add(fp);
			}
		}
		return list;
	}
	inh Program FormalPredicate.program();
	inh FormalPredicateMap FormalPredicate.formalPredicateMap();

	syn String FormalPredicate.predicateName() = getPRED_ID();
	syn Literal FormalPredicate.literal() = predicates().iterator().next().literal();
	syn HashSet<Literal> FormalPredicate.literals() {
		HashSet<Literal> literals = new HashSet<Literal>();
		for(PredicateSymbol ps : predicates()) {
			literals.add(ps.literal());
		}
		return literals;
	}

	inh HashSet<PredicateSymbol> FormalPredicate.predicates();
	eq Program.getFormalPredicate(int index).predicates() {
		HashSet<PredicateSymbol> predicates = new HashSet<PredicateSymbol>();
		for(PredicateInterface pi :	 predicateMap().get(getFormalPredicate(index).getPRED_ID())) {
			if(!pi.isRef())
				predicates.add((PredicateSymbol)pi);
		}
		return predicates;
	}

	inh HashSet<PredicateRef> FormalPredicate.predicateRefs();
	eq Program.getFormalPredicate(int index).predicateRefs() {
		HashSet<PredicateRef> predicates = new HashSet<PredicateRef>();
		for(PredicateInterface pi :	 predicateMap().get(getFormalPredicate(index).getPRED_ID())) {
			if(pi.isRef())
				predicates.add((PredicateRef)pi);
		}
		return predicates;
	}

	syn FormalPredicate PredicateInterface.formalpredicate() {
		FormalPredicate fp = literal().clause().program().formalPredicateMap().get(getPRED_ID());
		if(fp == null) {
			SimpleLogger.logger().log("Each PredicateSymbol should belong to a FormalPredicate: " + this,
				SimpleLogger.LogLevel.Level.ERROR);
			System.exit(0);
			return null; // Needed for JastAdd
		}
		return fp;
	}
}

aspect Types {
	syn boolean Term.isVariable() = this instanceof Variable;
	syn boolean Term.isConstant() = !isVariable();
}

import lang.cons.Constraint;
import java.io.StringReader;
import java.io.OutputStream;
import java.io.ByteArrayOutputStream;
import java.util.Arrays;
import lang.cons.ObjLangASTNode;
import java.io.ByteArrayOutputStream;
import beaver.Symbol;
import java.security.MessageDigest;
import static lang.io.SimpleLogger.*;
import java.util.IdentityHashMap;
import org.apache.commons.lang3.time.StopWatch;


import se.lth.sep.*;
import static se.lth.sep.Util.*;

aspect PatternLang {
	/**
	   enclosingAnalyzeBlock - the enclosing analyze block if it exists
	 */
	inh AnalyzeBlock CommonClause.enclosingAnalyzeBlock();
	inh AnalyzeBlock PredicateSymbol.enclosingAnalyzeBlock();
	inh AnalyzeBlock CommonLiteral.enclosingAnalyzeBlock();
	inh AnalyzeBlock Pattern.enclosingAnalyzeBlock();
	inh AnalyzeBlock PredicateRef.enclosingAnalyzeBlock();

	eq Program.getCommonClause().enclosingAnalyzeBlock() = null;
	eq AnalyzeBlock.getClause().enclosingAnalyzeBlock() = this;
	eq AnalyzeBlock.getExpandedClause().enclosingAnalyzeBlock() = this;

	syn String ASTNode.getScopePrefix() = getParent().getScopePrefix();
	eq Program.getScopePrefix() = "";
    eq AnalyzeBlock.getScopePrefix() = "A_" + getProgramRef().getPRED_ID() + "_";
	syn AnalyzeContext AnalyzeBlock.getContext() {
		return new AnalyzeContext(getScopePrefix(), getProgramRef().getPRED_ID());
	}

	coll ArrayList<Pattern> AnalyzeBlock.patterns() [new ArrayList<Pattern>()] root AnalyzeBlock;
	Pattern contributes this to AnalyzeBlock.patterns();

	syn nta List<Clause> AnalyzeBlock.getExpandedClauseList() {
		List<Clause> cls = new List<>();
		cls.addAll(generateHelperRelations());
		for (Clause c : getClauses())
			// TODO: this makes the parser run twice for each pattern;
			// try to cache this.
			cls.add(c.treeCopy());
		for (Pattern p : patterns()) {
			cls.addAll(p.getClauses());
		}
		return cls;
	}

	AnalyzeBlock contributes nta getExpandedClauses() to Program.predicateSymbols();

	public String AnalyzeBlock.translatePredicateName(String predName) {
		switch (getLang().getSTRING()) {
		case "metadl":
			return lang.metadl.pat.ast.PatLang.translatePredicateName(getContext(), predName);
		case "java5":
			return lang.java5.pat.ast.PatLang.translatePredicateName(getContext(), predName);
		case "java7":
			return lang.java7.pat.ast.PatLang.translatePredicateName(getContext(), predName);
		case "java8":
			return lang.java8.pat.ast.PatLang.translatePredicateName(getContext(), predName);
		}
		return null;
	}

	public java.util.List<lang.ast.Clause> AnalyzeBlock.generateHelperRelations() {
		switch (getLang().getSTRING()) {
		case "metadl":
			return lang.metadl.pat.ast.PatLang.generateHelperRelations(getContext());
		case "java5":
			return lang.java5.pat.ast.PatLang.generateHelperRelations(getContext());
		case "java7":
			return lang.java7.pat.ast.PatLang.generateHelperRelations(getContext());
		case "java8":
			return lang.java8.pat.ast.PatLang.generateHelperRelations(getContext());
		}
		return null;
	}

	rewrite PredicateSymbol {
		when (enclosingAnalyzeBlock() != null &&
			  enclosingAnalyzeBlock().translatePredicateName(getPRED_ID()) != null)
			to PredicateSymbol {
			return new PredicateSymbol(enclosingAnalyzeBlock().translatePredicateName(getPRED_ID()));
		}
	}

	rewrite PredicateRef {
		when (enclosingAnalyzeBlock() != null &&
			  enclosingAnalyzeBlock().translatePredicateName(getPRED_ID()) != null)
			to PredicateRef {
			return new PredicateRef(enclosingAnalyzeBlock().translatePredicateName(getPRED_ID()));
		}
	}

	syn lazy java.util.List<Clause> Pattern.getClauses() = getClausesHelper(null);
	eq BoundedPattern.getClauses() = getClausesHelper(getCommonVariable());

	public java.util.List<Clause> Pattern.getClausesHelper(CommonVariable bindVar) {
		AnalyzeContext ctx = enclosingAnalyzeBlock().getContext();
		ArrayList<Clause> ret = new ArrayList<>();
		for (ObjLangASTNode n : altParse()) {
			Atom head = getLiteralHelper(bindVar);
			Rule r = new Rule(new List<CommonLiteral>().add(head),
							  new List<CommonLiteral>().addAll(n.literals(ctx, bindVar)));
			ret.add(r);
		}
		return ret;
	}

	protected static String Pattern.hash(String s) {
		try {
			MessageDigest md = MessageDigest.getInstance("SHA-1");
			byte[] md5 = md.digest(s.getBytes("UTF-8"));
			StringBuffer sb = new StringBuffer();
			// Take the first 6 bytes only, to avoid long predicate names
			for (int i = 0; i < md5.length; i++) {
				sb.append(String.format("%02x", md5[i]));
			}
			return sb.toString();
		}
		catch (Exception e) {}
		return null;
	}

	syn String Pattern.predName() = hash(getPATTERN());
	eq BoundedPattern.predName() = hash(getPATTERN() + "bounded");


	public Atom Pattern.getLiteralHelper(CommonVariable bindVar) {
		AnalyzeContext ctx = enclosingAnalyzeBlock().getContext();
		List<Term> headVars = new List<>();
		// The assumption is that any parse tree of a pattern contains
		// the same metavariables
		ObjLangASTNode n = altParse().iterator().next();
		if (bindVar != null)
			headVars.add(bindVar);
		headVars.addAll(n.metavariables());
		// we're using a String hash  here; fingers crossed for no collisions in
		// the same analyze block
		Atom head = new Atom(new PredicateSymbol(ctx.scopePrefix + predName()),
							 headVars);
		return head;
	}

	syn nta Literal Pattern.getLiteral() = getLiteralHelper(null);
	eq BoundedPattern.getLiteral() = getLiteralHelper(getCommonVariable());

	syn lazy java.util.List<ObjLangASTNode> Pattern.altParse() {
		String srcLang = enclosingAnalyzeBlock().getLang().getSTRING();
		java.util.List<Category> tokens = new ArrayList<Category>();
		java.util.List<Symbol> symbols = new ArrayList<Symbol>();

		String[] tokenNames = null;
		beaver.Scanner scanner = null;
		ASTBuilder astBuilder = null;
		java.util.List<Category> startSymbols = null;


		switch (srcLang) {
		case "metadl":
			scanner = new lang.metadl.pat.ast.LangScanner(new StringReader(getPATTERN()));
			tokenNames = lang.metadl.pat.ast.PatLangParserSEP.Terminals.NAMES;
			astBuilder = lang.metadl.pat.ast.ASTBuilder.getInstance();
			startSymbols = Arrays.asList(lang.metadl.pat.ast.PatLangParserSEP.n_clause,
										 lang.metadl.pat.ast.PatLangParserSEP.n_common_literal,
										 lang.metadl.pat.ast.PatLangParserSEP.n_expr);
			break;
		case "java5":
			scanner = new lang.java5.pat.ast.PatLangScanner(new StringReader(getPATTERN()));
			tokenNames = lang.java5.pat.ast.PatLangParserSEP.Terminals.NAMES;
			astBuilder = lang.java5.pat.ast.ASTBuilder.getInstance();
			startSymbols = Arrays.asList(lang.java5.pat.ast.PatLangParserSEP.n_class_declaration,
										 lang.java5.pat.ast.PatLangParserSEP.n_type_declaration,
										 lang.java5.pat.ast.PatLangParserSEP.n_class_body_declaration,
										 lang.java5.pat.ast.PatLangParserSEP.n_interface_member_declaration,
										 lang.java5.pat.ast.PatLangParserSEP.n_block_statement,
										 lang.java5.pat.ast.PatLangParserSEP.n_expression,
										 lang.java5.pat.ast.PatLangParserSEP.n_type,
										 lang.java5.pat.ast.PatLangParserSEP.n_type_parameter,
										 lang.java5.pat.ast.PatLangParserSEP.n_type_argument);
			break;
		case "java7":
			scanner = new lang.java7.pat.ast.PatLangScanner(new StringReader(getPATTERN()));
			tokenNames = lang.java7.pat.ast.PatLangParserSEP.Terminals.NAMES;
			astBuilder = lang.java7.pat.ast.ASTBuilder.getInstance();
			startSymbols = Arrays.asList(lang.java7.pat.ast.PatLangParserSEP.n_class_declaration,
										 lang.java7.pat.ast.PatLangParserSEP.n_type_declaration,
										 lang.java7.pat.ast.PatLangParserSEP.n_class_body_declaration,
										 lang.java7.pat.ast.PatLangParserSEP.n_interface_member_declaration,
										 lang.java7.pat.ast.PatLangParserSEP.n_block_statement,
										 lang.java7.pat.ast.PatLangParserSEP.n_expression,
										 lang.java7.pat.ast.PatLangParserSEP.n_type,
										 lang.java7.pat.ast.PatLangParserSEP.n_type_parameter,
										 lang.java7.pat.ast.PatLangParserSEP.n_type_argument);
			break;
		case "java8":
			scanner = new lang.java8.pat.ast.PatLangScanner(new StringReader(getPATTERN()));
			tokenNames = lang.java8.pat.ast.PatLangParserSEP.Terminals.NAMES;
			astBuilder = lang.java8.pat.ast.ASTBuilder.getInstance();
			startSymbols = Arrays.asList(lang.java8.pat.ast.PatLangParserSEP.n_class_declaration,
										 lang.java8.pat.ast.PatLangParserSEP.n_type_declaration,
										 lang.java8.pat.ast.PatLangParserSEP.n_class_body_declaration,
										 lang.java8.pat.ast.PatLangParserSEP.n_interface_member_declaration,
										 lang.java8.pat.ast.PatLangParserSEP.n_block_statement,
										 lang.java8.pat.ast.PatLangParserSEP.n_expression,
										 lang.java8.pat.ast.PatLangParserSEP.n_type,
										 lang.java8.pat.ast.PatLangParserSEP.n_type_parameter,
										 lang.java8.pat.ast.PatLangParserSEP.n_type_argument);
			break;
		}

		Grammar grammar = astBuilder.getGrammar();

		do {
			beaver.Symbol sym;
			try {
				sym = scanner.nextToken();
			} catch (Exception e) {
				System.out.println(e);
				break;
			}
			if (sym.getId() != 0 /*EOF*/) {
				tokens.add(grammar.getCategory(tokenNames[sym.getId()]));
				symbols.add(sym);
			} else {
				break;
			}
		} while (true);

		Category[] tokenArray = tokens.toArray(new Category[1]);
		EarleyParser parser = astBuilder.getParser();

		SPPFTrivialProductionRemover tpr = new SPPFTrivialProductionRemover(grammar) {
				@Override public boolean isBubleUpChild(Category p, Category c) {
					if (c.getName().equals("METAVARID"))
						return true;
					if (c.getName().equals("GAP"))
						return true;
					return false;
				}
			};

		ArrayList<ObjLangASTNode> ret = new ArrayList<>();

		SimpleLogger.logger().debug("Parsing pattern " + toString());

		StopWatch parsePatternTimer = StopWatch.createStarted();

		for (Category startSymbol : startSymbols) {
			SPPFNode root = parser.parse(tokenArray, startSymbol);
			if (root == null) {
				continue;
			}

			{
				// exclude this debug print from timing
				parsePatternTimer.suspend();
				if (SimpleLogger.isDebugMode())
					Util.dumpParseResult("parse-tree-orig.dot", root, grammar);
				// continue measuring the time
				parsePatternTimer.resume();
			}

			java.util.List<ParseTree> pts = Util.enumerateParseTrees(root, grammar, tpr);
			for (ParseTree pt : pts) {
				try {
					ObjLangASTNode astRoot = (ObjLangASTNode) astBuilder.buildAST(pt, symbols);
					ret.add(astRoot);
					parsePatternTimer.suspend();
					if (SimpleLogger.isDebugMode()) {
						Util.dumpParseTree("parse-tree" + pt.hashCode() + ".dot", pt);
						Util.dumpParseResult("parse-graph" + root.hashCode() + ".dot", root, grammar);
						OutputStream ps = new ByteArrayOutputStream();
						astRoot.debugPrint(new PrintStream(ps));
						SimpleLogger.logger().debug(ps.toString());
					}
					parsePatternTimer.resume();
				} catch (Exception e) {
					Util.dumpParseTree("parse-tree.dot", pt);
					Util.dumpParseResult("parse-graph.dot", root, grammar);
					throw e;
				}
			}
		}

		parsePatternTimer.stop();
		SimpleLogger.logger().time("Parsing pattern " + toString() + ": " + parsePatternTimer.getTime() + "ms");

		if (ret.isEmpty()) {
			logger().error("Error while parsing pattern: " + getPATTERN());
			throw new RuntimeException("Errow while parsing pattern");
		}

		return ret;
	}

	eq Pattern.variables() {
		TreeSet<lang.ast.Variable> vars = new TreeSet<>(lang.ast.Term.termComparator);
		for (ObjLangASTNode ast : altParse()) {
			vars.addAll(ast.metavariables());
		}
		return vars;
	}

	eq BoundedPattern.variables() {
		TreeSet<lang.ast.Variable> vars = super.variables();
		vars.add((Variable)getCommonVariable());
		return vars;
	}

	eq Pattern.isInclusive() = true;

	public class AnalyzeContext {
		public String scopePrefix;
		public String progRelName;

		public AnalyzeContext(String scopePrefix, String progRelName) {
			this.scopePrefix = scopePrefix;
			this.progRelName = progRelName;
		}

		// TODO: make scopePrefix private and fix all uses
		public String prefix(String name) {
			return scopePrefix + name;
		}
	}

	public interface ASTBuilder {
		Symbol buildAST(final ParseTree t, final java.util.List<Symbol> symbols);
		Grammar getGrammar();
		EarleyParser getParser();
	}
}

import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.FileFilterUtils;
import org.apache.commons.io.filefilter.WildcardFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.apache.commons.io.FileUtils;
import java.util.Map;

aspect GlobalNames {
	public class GlobalNames {
		public static final String EDB_NAME        =  "EDB";
		public static final String NEGATION_NAME   =  "NOT";
		public static final String OUTPUT_NAME     =  "OUTPUT";
		public static final String IMPORT_NAME     =  "IMPORT";
	}

	public static Relation IMPORTLiteral.loadJavaSources(java.util.List<String> locs) throws IOException {
		org.extendj.ast.Program p = new org.extendj.ast.Program();

		// Set the path to the Java runtime
		String bootCP = System.getenv().get("METADL_JAVA_RT");
		if (bootCP != null)
			p.options().setValueForOption(bootCP, "-bootclasspath");
		String CP = System.getenv().get("METADL_JAVA_CP");
		if (CP != null)
			p.options().setValueForOption(CP, "-classpath");

		for (String loc : locs) {
			// Walk all the java files in the directory and add them to the program
			File fileOrDir = new File(loc);
			if (fileOrDir.isDirectory()) {
				IOFileFilter ff = new WildcardFileFilter("*.java");
				Iterator<File> it = FileUtils.iterateFiles(fileOrDir, ff, TrueFileFilter.INSTANCE);
				while (it.hasNext()) {
					File f = it.next();
					p.addSourceFile(f.getPath());
				}
			} else {
				p.addSourceFile(fileOrDir.getPath());
			}
		}

		// Some sanity check
		org.extendj.ast.TypeDecl object = p.lookupType("java.lang", "Object");
		if (object.isUnknown()) {
			// If we try to continue without java.lang.Object, we'll just get a stack overflow
			// in member lookups because the unknown (Object) type would be treated as circular.
			throw new RuntimeException("Error: java.lang.Object is missing."
									   + " The Java standard library was not found.");
		}

		// Generate the program relation
		lang.java.obj.DatalogProjection2 proj2 = new lang.java.obj.DatalogProjection2(p);
		proj2.generate();
		Relation ret = proj2.getRelation();

		return ret;
	}
}

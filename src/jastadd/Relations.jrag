import java.util.HashSet;
import java.util.HashMap;
import java.util.TreeSet;
import java.util.Comparator;
import lang.relation.Relation;
import lang.relation.PseudoTuple;

aspect Arity {
    syn int Literal.arity();
    eq NEGLiteral.arity()    = 1;
    eq EDBLiteral.arity()    = 2;
    eq OUTPUTLiteral.arity() = 1;
    eq BINDLiteral.arity()   = 2;
    eq BinaryExclusiveTermLiteral.arity() = 2;
    eq IMPORTLiteral.arity() = 3;
    eq Atom.arity() = getNumTerms();

    syn int PredicateSymbol.arity() = literal().arity();

    syn HashSet<Integer> FormalPredicate.arities() {
    	HashSet<Integer> arities = new HashSet<Integer>();
    	for(PredicateSymbol pred : predicates()) {
        	arities.add(pred.arity());
        }
        return arities;
    }

    syn HashSet<Integer> FormalPredicate.realArities() {
        HashSet<Integer> realArities = new HashSet<Integer>(arities());
        realArities.remove(-1);
        return realArities;
    }

    syn boolean FormalPredicate.isUniqueArity() {
        return realArities().size() <= 1;
    }

    syn int FormalPredicate.realArity() {
        if(!isUniqueArity() || realArities().size() == 0) return 0;
        return realArities().iterator().next();
    }

    Program contributes nta getFormalPredicates() to Program.semanticErrors();
    FormalPredicate contributes ("Different Arities for predicate symbol: " + predicateName())
        when !isUniqueArity() && arities().size() != 1
        to Program.semanticErrors();

}

aspect Relation {
	public static Relation FormalPredicate.nullRelation = new Relation(0);
	public Relation FormalPredicate.relation = FormalPredicate.nullRelation;

	syn PseudoTuple Literal.toTuple();
	eq Atom.toTuple()          = new PseudoTuple(getTermss());
	eq EDBLiteral.toTuple()    = new PseudoTuple(getPredicateRef(), getFileLoc());
	eq OUTPUTLiteral.toTuple() = new PseudoTuple(getTerm());
	eq BinaryExclusiveTermLiteral.toTuple()  = new PseudoTuple(0);
	eq BINDLiteral.toTuple()   = new PseudoTuple(0);
	eq NEGLiteral.toTuple() = ((Literal)getLiteral()).toTuple();
	eq IMPORTLiteral.toTuple() = new PseudoTuple(getProgramRef(), getFileLoc(), getLang());
}

aspect Rules {
	syn HashSet<Rule> FormalPredicate.useInRules() {
		HashSet<Rule> rules = new HashSet<Rule>();
		for(PredicateSymbol pred : predicates()) {
			if(pred.isUse()) {
				rules.add((Rule)pred.literal().clause());
			}
		}
		return rules;
	}

	syn HashSet<Clause> FormalPredicate.definedIn() {
		HashSet<Clause> rules = new HashSet<Clause>();
		for(PredicateSymbol pred : predicates()) {
			if(pred.isDef()) {
				rules.add(pred.literal().clause());
			}
		}
		return rules;
	}

	public static boolean FormalPredicate.hasNegativeDefUse(FormalPredicate def, FormalPredicate use) {
		HashSet<Rule> rules_use = use.useInRules();
		for(Clause c : def.definedIn()) {
			if(!c.isRule()) continue;
			Rule r = (Rule)c;
			if(!rules_use.contains(r)) continue;
			for(CommonLiteral lit : r.flattenedBodyLiterals()) {
				if(!lit.isNeg()) continue;
				NEGLiteral nl = (NEGLiteral) lit;
				if(nl.getLiteral().predicate().getPRED_ID().equals(use.predicateName())) return true;
			}
		}
		return false;
	}

	syn TreeSet<Literal> Rule.inclusiveBodyLiterals() {
		TreeSet<Literal> literals = new TreeSet<Literal>(Literal.literalComparator);
		for(Literal l : flattenedBodyLiterals()) {
			if(l.isInclusive()) literals.add(l);
		}
		return literals;
	}

	syn TreeSet<Literal> Rule.exclusiveBodyLiterals() {
		TreeSet<Literal> literals = new TreeSet<Literal>(Literal.literalComparator);
		for(Literal l : flattenedBodyLiterals()) {
			if(!l.isInclusive()) literals.add(l);
		}
		return literals;
	}
}

aspect DependencyGraph {
	syn HashSet<FormalPredicate> FormalPredicate.dependsOn() {
		HashSet<FormalPredicate> defIn = new HashSet<FormalPredicate>();
		for(Clause c : definedIn()) {
			if(!c.isRule())continue;
			Rule r = (Rule) c;
			for (Literal l : r.flattenedBodyLiterals()) {
				if(l.isNeg()) {
					NEGLiteral nl = (NEGLiteral) l;
					defIn.add(nl.getLiteral().predicate().formalpredicate());
				} else if (l.isInclusive()) {
					defIn.add(l.predicate().formalpredicate());
				}
			}
		}

		/**
			First compute what to output.
		**/
		FormalPredicate output = program().formalPredicateMap().get(GlobalNames.OUTPUT_NAME);
		if(output != null) {
			defIn.add(output);
		}

		for(PredicateRef ref : predicateRefs()) {
			if (ref.literal() != null && ref.literal().isEDB()) {
				defIn.add(((EDBLiteral)ref.literal()).getPredicate().formalpredicate());
			} else if (ref.literal() != null && ref.literal().isIMPORT()) {
				defIn.add(((IMPORTLiteral)ref.literal()).getPredicate().formalpredicate());
			}
		}

		if(hasRecursiveEDB()) {
			defIn.add(formalPredicateMap().get(GlobalNames.EDB_NAME));
		}
		return defIn;
	}
}

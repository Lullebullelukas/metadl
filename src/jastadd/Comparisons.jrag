import java.util.Comparator;

aspect Conversion {
	syn int IntConstant.intValue() = Integer.parseInt(getNUMERAL());
	public String StringConstant.toString() { return getSTRING(); }
	public String IntConstant.toString()    { return getNUMERAL(); }

	public String Term.toString()            { return "NO_IMPL_TO_STRING"; }
	public String Variable.toString()        { return getVAR_ID(); }
	public String PredicateRef.toString()    { return "'" + getPRED_ID(); }
	public String FormalPredicate.toString() { return "FP_" + predicateName(); }
	public String Wildcard.toString()        { return "_"; }
	public String ASTNode.toString()         { return prettyPrint(); }


	syn int Literal.evalOrder();

	eq IMPORTLiteral.evalOrder()  = 0;
	eq EDBLiteral.evalOrder()     = 1;
	eq OUTPUTLiteral.evalOrder()  =  5;
	eq Atom.evalOrder()           =  6;
	eq BINDLiteral.evalOrder()    =  7;
	eq NEGLiteral.evalOrder()     =  8;
	eq EQLiteral.evalOrder()      =  9;
	eq NEQLiteral.evalOrder()     =  10;
	eq LTLiteral.evalOrder()      =  11;
	eq LTELiteral.evalOrder()     =  12;
	eq GTLiteral.evalOrder()      =  13;
	eq GTELiteral.evalOrder()     =  14;
}

aspect Comparison {
	public class CompareTerm implements Comparator<Term> {
		@Override
		public int compare(Term t1, Term t2) {
			return t1.toString().compareTo(t2.toString());
		}
	}

	public class ComparePredicates implements Comparator<PredicateInterface> {
		@Override
		public int compare(PredicateInterface t1, PredicateInterface t2) {
			if(t1.isRef() != t2.isRef()) return t1.isRef() ? -1 : 1;
			return t1.getPRED_ID().compareTo(t2.getPRED_ID());
		}
	}
	public static final ComparePredicates Program.predicateComparator = new ComparePredicates();

	@Override
	public boolean PredicateSymbol.equals(Object o) {
		if(!(o instanceof PredicateSymbol)) return false;
		return Program.predicateComparator.compare(this, (PredicateSymbol)o) == 0;
	}

	@Override
	public boolean PredicateRef.equals(Object o) {
		if(!(o instanceof PredicateRef)) return false;
		return Program.predicateComparator.compare(this, (PredicateRef)o) == 0;
	}

	public static final CompareTerm Term.termComparator = new CompareTerm();
	@Override
	public boolean Term.equals(Object o) {
		if(!(o instanceof Term)) return false;
		return termComparator.compare(this, (Term)o) == 0;
	}

	public class CompareFormalPredicate implements Comparator<FormalPredicate> {
		@Override
		public int compare(FormalPredicate p1, FormalPredicate p2) {
			return p1.predicateName().compareTo(p2.predicateName());
		}
	}

	public static final CompareFormalPredicate FormalPredicate.formalPredicateComparator = new CompareFormalPredicate();
	@Override
	public boolean FormalPredicate.equals(Object o) {
		if(!(o instanceof FormalPredicate)) return false;
		return formalPredicateComparator.compare(this, (FormalPredicate)o) == 0;
	}

	@Override
	public int FormalPredicate.hashCode() {
		return predicateName().hashCode();
	}

	public static final CompareLiterals Literal.literalComparator = new CompareLiterals();
	public class CompareLiterals implements Comparator<Literal> {
		@Override
		public int compare(Literal l1, Literal l2) {
			int ev1 = l1.evalOrder();
			int ev2 = l2.evalOrder();
			if(ev1 != ev2) return ev1 < ev2 ? -1 : ev1 == ev2 ? 0 : 1;
			return l1.hashCode() < l2.hashCode() ? -1 : l1.hashCode() == l2.hashCode() ? 0 : 1;
		}
	}

	public static final CompareFPLiterals FormalPredicate.fpLiteralComparator = new CompareFPLiterals();
	public class CompareFPLiterals implements Comparator<FormalPredicate> {
		@Override
		public int compare(FormalPredicate fp1, FormalPredicate fp2) {
			return Literal.literalComparator.compare(fp1.literal(), fp2.literal());
		}
	}

	@Override
	public boolean Literal.equals(Object o) {
		if(!(o instanceof Literal)) return false;
		return literalComparator.compare(this, (Literal)o) == 0;
	}
}

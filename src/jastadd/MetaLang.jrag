import lang.cons.Constraint;
import java.io.StringReader;
import java.util.Arrays;
import lang.cons.ObjLangASTNode;
import java.io.ByteArrayOutputStream;
import beaver.Symbol;
import java.security.MessageDigest;
import static lang.io.SimpleLogger.*;
import java.util.IdentityHashMap;
import se.lth.sep.EarleyParser;

aspect MetaLang {
	/**
	   enclosingAnalyzeBlock - the enclosing analyze block if it exists
	 */
	inh AnalyzeBlock CommonClause.enclosingAnalyzeBlock();
	inh AnalyzeBlock PredicateSymbol.enclosingAnalyzeBlock();
	inh AnalyzeBlock CommonLiteral.enclosingAnalyzeBlock();
	inh AnalyzeBlock Pattern.enclosingAnalyzeBlock();
	inh AnalyzeBlock PredicateRef.enclosingAnalyzeBlock();

	eq Program.getCommonClause().enclosingAnalyzeBlock() = null;
	eq AnalyzeBlock.getClause().enclosingAnalyzeBlock() = this;
	eq AnalyzeBlock.getExpandedClause().enclosingAnalyzeBlock() = this;

	syn String ASTNode.getScopePrefix() = getParent().getScopePrefix();
	eq Program.getScopePrefix() = "";
    eq AnalyzeBlock.getScopePrefix() = "A_" + getProgramRef().getPRED_ID() + "_";
	syn AnalyzeContext AnalyzeBlock.getContext() {
		return new AnalyzeContext(getScopePrefix(), getProgramRef().getPRED_ID());
	}

	coll ArrayList<Pattern> AnalyzeBlock.patterns() [new ArrayList<Pattern>()] root AnalyzeBlock;
	Pattern contributes this to AnalyzeBlock.patterns();

	syn nta List<Clause> AnalyzeBlock.getExpandedClauseList() {
		List<Clause> cls = new List<>();
		cls.addAll(generateHelperRelations());
		for (Clause c : getClauses())
			cls.add(c.treeCopy());
		for (Pattern p : patterns()) {
			cls.addAll(p.getClauses());
		}
		return cls;
	}

	AnalyzeBlock contributes nta getExpandedClauses() to Program.predicateSymbols();

	public String AnalyzeBlock.translatePredicateName(String predName) {
		switch (getLang().getSTRING()) {
		case "metadl":
			return lang.metadl.pat.ast.PatLang.translatePredicateName(getContext(), predName);
		case "java4":
			return lang.java4.pat.ast.PatLang.translatePredicateName(getContext(), predName);
		}
		return null;
	}

	public java.util.List<lang.ast.Clause> AnalyzeBlock.generateHelperRelations() {
		switch (getLang().getSTRING()) {
		case "metadl":
			return lang.metadl.pat.ast.PatLang.generateHelperRelations(getContext());
		case "java4":
			return lang.java4.pat.ast.PatLang.generateHelperRelations(getContext());
		}
		return null;
	}

	rewrite PredicateSymbol {
		when (enclosingAnalyzeBlock() != null &&
			  enclosingAnalyzeBlock().translatePredicateName(getPRED_ID()) != null)
			to PredicateSymbol {
			return new PredicateSymbol(enclosingAnalyzeBlock().translatePredicateName(getPRED_ID()));
		}
	}

	rewrite PredicateRef {
		when (enclosingAnalyzeBlock() != null &&
			  enclosingAnalyzeBlock().translatePredicateName(getPRED_ID()) != null)
			to PredicateRef {
			return new PredicateRef(enclosingAnalyzeBlock().translatePredicateName(getPRED_ID()));
		}
	}

	syn lazy java.util.List<Clause> Pattern.getClauses() = getClausesHelper(null);
	eq BoundedPattern.getClauses() = getClausesHelper(getCommonVariable());

	public java.util.List<Clause> Pattern.getClausesHelper(CommonVariable bindVar) {
		AnalyzeContext ctx = enclosingAnalyzeBlock().getContext();
		ArrayList<Clause> ret = new ArrayList<>();
		for (ObjLangASTNode n : altParse()) {
			Atom head = getLiteralHelper(bindVar);
			Rule r = new Rule(new List<CommonLiteral>().add(head),
							  new List<CommonLiteral>().addAll(n.literals(ctx, bindVar)));
			ret.add(r);
		}
		return ret;
	}

	public static String Pattern.hash(String s) {
		try {
			MessageDigest md = MessageDigest.getInstance("SHA-1");
			byte[] md5 = md.digest(s.getBytes("UTF-8"));
			StringBuffer sb = new StringBuffer();
			// Take the first 6 bytes only, to avoid long predicate names
			for (int i = 0; i < md5.length; i++) {
				sb.append(String.format("%02x", md5[i]));
			}
			return sb.toString();
		}
		catch (Exception e) {}
		return null;
	}

	public Atom Pattern.getLiteralHelper(CommonVariable bindVar) {
		AnalyzeContext ctx = enclosingAnalyzeBlock().getContext();
		List<Term> headVars = new List<>();
		// The assumption is that any parse tree of a pattern contains
		// the same metavariables
		ObjLangASTNode n = altParse().iterator().next();
		if (bindVar != null)
			headVars.add(bindVar);
		headVars.addAll(n.metavariables());
		// we're using a String hash  here; fingers crossed for no collisions in
		// the same analyze block
		Atom head = new Atom(new PredicateSymbol(ctx.scopePrefix + hash(getPATTERN())),
							 headVars);
		return head;
	}

	syn nta Literal Pattern.getLiteral() = getLiteralHelper(null);
	eq BoundedPattern.getLiteral() = getLiteralHelper(getCommonVariable());

	syn nta List<Literal> Pattern.getLiterals() {
		return new List<Literal>().add(getLiteral());
		// List<Literal> literals = new
		// literals.addAll(patternAST().literals(enclosingAnalyzeBlock().getContext(), null));
		// return literals;
	}

	// syn nta List<Literal> BoundedPattern.getLiterals() {
		// List<Literal> literals = new List<>();
		// literals.addAll(patternAST().literals(enclosingAnalyzeBlock().getContext(), getCommonVariable()));
		// return literals;
	// }

	syn lazy java.util.List<ObjLangASTNode> Pattern.altParse() {
		String srcLang = enclosingAnalyzeBlock().getLang().getSTRING();
		java.util.List<Category> tokens = new ArrayList<Category>();
		java.util.List<Symbol> symbols = new ArrayList<Symbol>();

		String[] tokenNames = null;
		beaver.Scanner scanner = null;
		Grammar grammar = new Grammar();

		switch (srcLang) {
			case "metadl":
				scanner = new lang.metadl.pat.ast.LangScanner(new StringReader(getPATTERN()));
				tokenNames = lang.metadl.pat.ast.PatLangParser.Terminals.NAMES;
				lang.metadl.pat.ast.PatLangParserSEP.addRules(grammar);
				break;
			case "java4":
				scanner = new lang.java4.pat.ast.PatLangScanner(new StringReader(getPATTERN()));
				tokenNames = lang.java4.pat.ast.PatLangParser.Terminals.NAMES;
				lang.java4.pat.ast.PatLangParserSEP.addRules(grammar);
				break;
		}

		do {
			beaver.Symbol sym;
			try {
				sym = scanner.nextToken();
			} catch (Exception e) {
				System.out.println(e);
				break;
			}
			if (sym.getId() != 0 /*EOF*/) {
				tokens.add(grammar.getCategory(tokenNames[sym.getId()]));
				symbols.add(sym);
			}
			else
				break;
		} while (true);

		EarleyParser parser = new EarleyParser(grammar);
		Category[] tokenArray = tokens.toArray(new Category[1]);
		SPPFNode root = parser.parse(tokenArray, lang.metadl.pat.ast.PatLangParserSEP.n_rule);
		if (root == null) {
			SimpleLogger.logger().log("Error while parsing pattern: " + getPATTERN() + "\n",
										  SimpleLogger.LogLevel.Level.ERROR );
			System.exit(1);
		}

		TranslateToASTVisitor visitor = new TranslateToASTVisitor(symbols, grammar);
		root.accept(visitor);
		assert visitor.getTranslation(root) != null;
		System.exit(0);

		return null;
	}

	syn lazy ObjLangASTNode Pattern.patternAST() {
		//altParse();

		ObjLangASTNode node = null;

		String srcLang = enclosingAnalyzeBlock().getLang().getSTRING();

		java.util.List<Exception> exceptions = new java.util.ArrayList<>();

		ByteArrayOutputStream errStream = new ByteArrayOutputStream();

		java.util.List<Short> altGoals = null;
		switch (srcLang) {
		case "metadl":
			altGoals = Arrays.asList(lang.metadl.pat.ast.PatLangParser.AltGoals.clause,
									 lang.metadl.pat.ast.PatLangParser.AltGoals.common_literal,
									 lang.metadl.pat.ast.PatLangParser.AltGoals.expr);
			break;
		case "java4":
			altGoals = Arrays.asList(lang.java4.pat.ast.PatLangParser.AltGoals.class_declaration,
									 lang.java4.pat.ast.PatLangParser.AltGoals.interface_declaration,
									 lang.java4.pat.ast.PatLangParser.AltGoals.method_declaration,
									 lang.java4.pat.ast.PatLangParser.AltGoals.statement
									 );
			break;
		}

		// Try all the goals until one succeeds. Also collect the errors to report them
		// in case none of the parsing attempts is successful.
		for (short g : altGoals) {
			beaver.Scanner scanner = null;
			beaver.Parser parser = null;
			node = null;

			switch (srcLang) {
			case "metadl":
				scanner = new lang.metadl.pat.ast.LangScanner(new StringReader(getPATTERN()));
				parser = new lang.metadl.pat.ast.PatLangParser();
				break;
			case "java4":
				scanner = new lang.java4.pat.ast.PatLangScanner(new StringReader(getPATTERN()));
				parser = new lang.java4.pat.ast.PatLangParser();
				break;
			default:
				SimpleLogger.logger().log("Unknown language in analyze block: " + srcLang, SimpleLogger.LogLevel.Level.ERROR);
				System.exit(1);
			}

			try {
				// the parsers writes directly to System.err so we capture it
				PrintStream oldErr = System.err;
				System.setErr(new PrintStream(errStream));
				node = (ObjLangASTNode) parser.parse(scanner, g);

				ByteArrayOutputStream bstream = new ByteArrayOutputStream();
				PrintStream ps = new PrintStream(bstream);
				ps.println("Parsed pattern: " + getPATTERN());
				node.debugPrint(ps);

				SimpleLogger.logger().log(bstream.toString(), SimpleLogger.LogLevel.Level.DEBUG);

				System.setErr(oldErr);
				break;
			} catch (Exception e) {
				exceptions.add(e);
			}

			if (node != null)
				break;
		}

		if (node == null) {
			// None of the parsing attempts succeeded. Print the errors
			for (Exception e : exceptions)
				SimpleLogger.logger().log("Error while parsing pattern: " + getPATTERN() + "\n" + e.toString(),
										  SimpleLogger.LogLevel.Level.ERROR );
			System.out.println(errStream.toString());
			System.exit(1);
		}

		return node;
	}

	eq Pattern.variables() {
		return patternAST().metavariables();
	}

	eq BoundedPattern.variables() {
		TreeSet<lang.ast.Variable> vars = new TreeSet<>(lang.ast.Term.termComparator);
		vars.addAll(patternAST().metavariables());
		vars.add((Variable)getCommonVariable());
		return vars;
	}

	eq Pattern.isInclusive() = true;

	public class AnalyzeContext {
		public String scopePrefix;
		public String progRelName;

		public AnalyzeContext(String scopePrefix, String progRelName) {
			this.scopePrefix = scopePrefix;
			this.progRelName = progRelName;
		}
	}
}

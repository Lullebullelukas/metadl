import lang.cons.Constraint;
import java.io.StringReader;
import java.util.Arrays;
import lang.cons.ObjLangASTNode;
import java.io.ByteArrayOutputStream;
import edu.osu.ling.pep.*;
import beaver.Symbol;

aspect MetaLang {
	/**
	   enclosingAnalyzeBlock - the enclosing analyze block if it exists
	 */
	inh AnalyzeBlock CommonClause.enclosingAnalyzeBlock();
	inh AnalyzeBlock PredicateSymbol.enclosingAnalyzeBlock();
	inh AnalyzeBlock CommonLiteral.enclosingAnalyzeBlock();
	inh AnalyzeBlock Pattern.enclosingAnalyzeBlock();
	inh AnalyzeBlock PredicateRef.enclosingAnalyzeBlock();

	eq Program.getCommonClause().enclosingAnalyzeBlock() = null;
	eq AnalyzeBlock.getClause().enclosingAnalyzeBlock() = this;
	eq AnalyzeBlock.getExpandedClause().enclosingAnalyzeBlock() = this;

	syn String ASTNode.getScopePrefix() = getParent().getScopePrefix();
	eq Program.getScopePrefix() = "";
    eq AnalyzeBlock.getScopePrefix() = "A_" + getProgramRef().getPRED_ID() + "_";
	syn AnalyzeContext AnalyzeBlock.getContext() {
		return new AnalyzeContext(getScopePrefix(), getProgramRef().getPRED_ID());
	}

	syn nta List<Clause> AnalyzeBlock.getExpandedClauseList() {
		List<Clause> cls = new List<>();
		cls.addAll(generateHelperRelations());
		for (Clause c : getClauses())
			cls.add(c.treeCopy());
		return cls;
	}

	AnalyzeBlock contributes nta getExpandedClauses() to Program.predicateSymbols();

	public String AnalyzeBlock.translatePredicateName(String predName) {
		switch (getLang().getSTRING()) {
		case "metadl":
			return lang.metadl.pat.ast.PatLang.translatePredicateName(getContext(), predName);
		case "java4":
			return lang.java4.pat.ast.PatLang.translatePredicateName(getContext(), predName);
		}
		return null;
	}

	public java.util.List<lang.ast.Clause> AnalyzeBlock.generateHelperRelations() {
		switch (getLang().getSTRING()) {
		case "metadl":
			return lang.metadl.pat.ast.PatLang.generateHelperRelations(getContext());
		case "java4":
			return lang.java4.pat.ast.PatLang.generateHelperRelations(getContext());
		}
		return null;
	}

	rewrite PredicateSymbol {
		when (enclosingAnalyzeBlock() != null &&
			  enclosingAnalyzeBlock().translatePredicateName(getPRED_ID()) != null)
			to PredicateSymbol {
			return new PredicateSymbol(enclosingAnalyzeBlock().translatePredicateName(getPRED_ID()));
		}
	}

	rewrite PredicateRef {
		when (enclosingAnalyzeBlock() != null &&
			  enclosingAnalyzeBlock().translatePredicateName(getPRED_ID()) != null)
			to PredicateRef {
			return new PredicateRef(enclosingAnalyzeBlock().translatePredicateName(getPRED_ID()));
		}
	}

	syn nta List<Literal> Pattern.getLiterals() {
		List<Literal> literals = new List<>();
		literals.addAll(patternAST().literals(enclosingAnalyzeBlock().getContext(), null));
		return literals;
	}

	syn nta List<Literal> BoundedPattern.getLiterals() {
		List<Literal> literals = new List<>();
		literals.addAll(patternAST().literals(enclosingAnalyzeBlock().getContext(), getCommonVariable()));
		return literals;
	}


	private static void Pattern.collectLeafNodes(java.util.List<ParseTree> leaves, ParseTree current) {
		if (current.getChildren() == null) {
			leaves.add(current);
		} else {
			for (ParseTree c : current.getChildren())
				collectLeafNodes(leaves, c);
		}
	}

	private static void Pattern.transform(Map<ParseTree, Symbol> pt2s, ParseTree current, String srcLang) {
		if (pt2s.containsKey(current))
			return;
		for (ParseTree c : current.getChildren()) {
			transform(pt2s, c, srcLang);
		}
		Symbol s = null;
		switch (srcLang) {
		case "metadl":
			s = lang.metadl.pat.ast.PatLangParserPEP.visit(pt2s, current);
			break;
		case "java4":
			s = lang.java4.pat.ast.PatLangParserPEP.visit(pt2s, current);
			break;
		}
		if (s == null) {
			SimpleLogger.logger().log("Unable to translate parse tree: " + current.toString(),
									  SimpleLogger.LogLevel.Level.ERROR);
			throw new RuntimeException();
		}
		pt2s.put(current, s);
	}

	public ObjLangASTNode Pattern.transformParseTreeToAST(java.util.List<Symbol> tokens, ParseTree root) {
		ArrayList<ParseTree> leaves = new ArrayList<ParseTree>();
		String srcLang = enclosingAnalyzeBlock().getLang().getSTRING();

		collectLeafNodes(leaves, root);
		if (leaves.size() != tokens.size()) {
			SimpleLogger.logger().log("Mismatch between the number of leaves in the " +
									  "parse tree and the number of tokens in the parsed string",
									  SimpleLogger.LogLevel.Level.ERROR);
			throw new RuntimeException();
		}

		HashMap<ParseTree, Symbol> pt2s = new HashMap<ParseTree, Symbol>();

		// now seed the ParseTree to Symbol map
		for (int i = 0; i < leaves.size(); ++i) {
			Symbol s = tokens.get(i);
			ParseTree pt = leaves.get(i);
			pt2s.put(pt, s);
		}

		transform(pt2s, root, srcLang);

		return (ObjLangASTNode) pt2s.get(root);
	}

	public void Pattern.altParse() {
		String srcLang = enclosingAnalyzeBlock().getLang().getSTRING();
		java.util.List<String> tokens = new ArrayList<String>();
		java.util.List<Symbol> symbols = new ArrayList<Symbol>();
		String[] tokenNames = null;
		beaver.Scanner scanner = null;

		switch (srcLang) {
			case "metadl":
				scanner = new lang.metadl.pat.ast.LangScanner(new StringReader(getPATTERN()));
				tokenNames = lang.metadl.pat.ast.PatLangParser.Terminals.NAMES;
				break;
			case "java4":
				scanner = new lang.java4.pat.ast.PatLangScanner(new StringReader(getPATTERN()));
				tokenNames = lang.java4.pat.ast.PatLangParser.Terminals.NAMES;
				break;
		}

		do {
			beaver.Symbol sym;
			try {
				sym = scanner.nextToken();
			} catch (Exception e) {
				System.out.println(e);
				break;
			}
			if (sym.getId() != 0 /*EOF*/) {
				tokens.add(tokenNames[sym.getId()]);
				symbols.add(sym);
			}
			else
				break;
		} while (true);


		System.out.println(tokens);

		Set<ParseTree> parseTrees = null;
		Parse parse = null;

		Grammar javaGrammar = new Grammar("java4");
		lang.java4.pat.ast.PatLangParserPEP.addRules(javaGrammar);
		Grammar metadlGrammar = new Grammar("metadl");
		lang.metadl.pat.ast.PatLangParserPEP.addRules(metadlGrammar);

		EarleyParser parser = new EarleyParser(javaGrammar);

		try {
			switch (srcLang) {
			case "java4": {
				parser.setGrammar(javaGrammar);
				parse = parser.parse(tokens, lang.java4.pat.ast.PatLangParserPEP.n_class_declaration);
				break;
			}
			case "metadl": {
				parser.setGrammar(metadlGrammar);
				parse = parser.parse(tokens, lang.metadl.pat.ast.PatLangParserPEP.n_inner_clause);
				break;
			}
			}
		}
		catch (PepException e) {
				System.out.println(e);
				System.exit(1);
		}

		if (parse.getStatus() == Status.ERROR) {
			System.out.println("Error while parsing.");
		} else if (parse.getStatus() == Status.REJECT) {
			System.out.println("Token list rejected.");
		}
		parseTrees = parse.getParseTrees();
		System.out.println(parseTrees.size());
		for (ParseTree t : parseTrees) {
			ObjLangASTNode n = transformParseTreeToAST(symbols, t);
			ByteArrayOutputStream bstream = new ByteArrayOutputStream();
			PrintStream ps = new PrintStream(bstream);
			n.debugPrint(ps);
			SimpleLogger.logger().log(bstream.toString(), SimpleLogger.LogLevel.Level.DEBUG);
		}
	}

	syn lazy ObjLangASTNode Pattern.patternAST() {
		altParse();

		ObjLangASTNode node = null;

		String srcLang = enclosingAnalyzeBlock().getLang().getSTRING();

		java.util.List<Exception> exceptions = new java.util.ArrayList<>();

		ByteArrayOutputStream errStream = new ByteArrayOutputStream();

		java.util.List<Short> altGoals = null;
		switch (srcLang) {
		case "metadl":
			altGoals = Arrays.asList(lang.metadl.pat.ast.PatLangParser.AltGoals.clause,
									 lang.metadl.pat.ast.PatLangParser.AltGoals.common_literal,
									 lang.metadl.pat.ast.PatLangParser.AltGoals.expr);
			break;
		case "java4":
			altGoals = Arrays.asList(lang.java4.pat.ast.PatLangParser.AltGoals.class_declaration,
									 lang.java4.pat.ast.PatLangParser.AltGoals.interface_declaration,
									 lang.java4.pat.ast.PatLangParser.AltGoals.method_declaration,
									 lang.java4.pat.ast.PatLangParser.AltGoals.statement
									 );
			break;
		}

		// Try all the goals until one succeeds. Also collect the errors to report them
		// in case none of the parsing attempts is successful.
		for (short g : altGoals) {
			beaver.Scanner scanner = null;
			beaver.Parser parser = null;
			node = null;

			switch (srcLang) {
			case "metadl":
				scanner = new lang.metadl.pat.ast.LangScanner(new StringReader(getPATTERN()));
				parser = new lang.metadl.pat.ast.PatLangParser();
				break;
			case "java4":
				scanner = new lang.java4.pat.ast.PatLangScanner(new StringReader(getPATTERN()));
				parser = new lang.java4.pat.ast.PatLangParser();
				break;
			default:
				SimpleLogger.logger().log("Unknown language in analyze block: " + srcLang, SimpleLogger.LogLevel.Level.ERROR);
				System.exit(1);
			}

			try {
				// the parsers writes directly to System.err so we capture it
				PrintStream oldErr = System.err;
				System.setErr(new PrintStream(errStream));
				node = (ObjLangASTNode) parser.parse(scanner, g);

				ByteArrayOutputStream bstream = new ByteArrayOutputStream();
				PrintStream ps = new PrintStream(bstream);
				ps.println("Parsed pattern: " + getPATTERN());
				node.debugPrint(ps);

				SimpleLogger.logger().log(bstream.toString(), SimpleLogger.LogLevel.Level.DEBUG);

				System.setErr(oldErr);
				break;
			} catch (Exception e) {
				exceptions.add(e);
			}

			if (node != null)
				break;
		}

		if (node == null) {
			// None of the parsing attempts succeeded. Print the errors
			for (Exception e : exceptions)
				SimpleLogger.logger().log("Error while parsing pattern: " + getPATTERN() + "\n" + e.toString(),
										  SimpleLogger.LogLevel.Level.ERROR );
			System.out.println(errStream.toString());
			System.exit(1);
		}

		return node;
	}

	eq Pattern.variables() {
		return patternAST().metavariables();
	}

	eq BoundedPattern.variables() {
		TreeSet<lang.ast.Variable> vars = new TreeSet<>(lang.ast.Term.termComparator);
		vars.addAll(patternAST().metavariables());
		vars.add((Variable)getCommonVariable());
		return vars;
	}

	eq Pattern.isInclusive() = true;

	public class AnalyzeContext {
		public String scopePrefix;
		public String progRelName;

		public AnalyzeContext(String scopePrefix, String progRelName) {
			this.scopePrefix = scopePrefix;
			this.progRelName = progRelName;
		}
	}
}

import lang.cons.Constraint;
import java.io.StringReader;


aspect MetaLang {
	/**
	   enclosingAnalyzeBlock - the enclosing analyze block if it exists
	 */
	inh AnalyzeBlock CommonClause.enclosingAnalyzeBlock();
	inh AnalyzeBlock PredicateSymbol.enclosingAnalyzeBlock();
	inh AnalyzeBlock CommonLiteral.enclosingAnalyzeBlock();
	inh AnalyzeBlock Pattern.enclosingAnalyzeBlock();

	eq Program.getCommonClause().enclosingAnalyzeBlock() = null;
	eq AnalyzeBlock.getClause().enclosingAnalyzeBlock() = this;
	eq AnalyzeBlock.getExpandedClause().enclosingAnalyzeBlock() = this;

	syn String ASTNode.getScopePrefix() = getParent().getScopePrefix();
	eq Program.getScopePrefix() = "";
    eq AnalyzeBlock.getScopePrefix() = "A_" + getProgramRef().getPRED_ID() + "_";
	syn AnalyzeContext AnalyzeBlock.getContext() {
		return new AnalyzeContext(getScopePrefix(), getProgramRef().getPRED_ID());
	}

	syn nta List<Clause> AnalyzeBlock.getExpandedClauseList() {
		List<Clause> cls = new List<>();
		cls.addAll(patlang.ast.PatLang.generateHelperRelations(getContext()));
		for (Clause c : getClauses())
			cls.add(c.treeCopy());
		return cls;
	}

	AnalyzeBlock contributes nta getExpandedClauses() to Program.predicateSymbols();

	rewrite PredicateSymbol {
		when (enclosingAnalyzeBlock() != null &&
			  patlang.ast.PatLang.translatePredicateName(enclosingAnalyzeBlock().getContext(), getPRED_ID()) != null)
			to PredicateSymbol {
			return new PredicateSymbol(patlang.ast.PatLang.translatePredicateName(enclosingAnalyzeBlock().getContext(),
																				  getPRED_ID()));
		}
	}

	syn nta List<Literal> Pattern.getLiterals() {
		List<Literal> literals = new List<>();
		literals.addAll(patternAST().literals(enclosingAnalyzeBlock().getContext()));
		return literals;
	}

	syn patlang.ast.ASTNode Pattern.patternAST() {
		patlang.ast.ASTNode node = null;

		short[] AltGoals = new short[]{
			patlang.ast.PatLangParser.AltGoals.clause,
			patlang.ast.PatLangParser.AltGoals.common_literal,
			patlang.ast.PatLangParser.AltGoals.expr
		};

		java.util.List<Exception> exceptions = new java.util.ArrayList<>();

		ByteArrayOutputStream errStream = new ByteArrayOutputStream();


		// Try all the goals until one succeeds. Also collect the errors to report them
		// in case none of the parsing attempts is successful.
		for (short g : AltGoals) {
			try {
				patlang.ast.LangScanner scanner = new patlang.ast.LangScanner(new StringReader(getPATTERN()));
				patlang.ast.PatLangParser parser = new patlang.ast.PatLangParser();
				// the parsers writes directly to System.err so we capture it
				PrintStream oldErr = System.err;
				System.setErr(new PrintStream(errStream));
				node = (patlang.ast.ASTNode) parser.parse(scanner, g);
				System.setErr(oldErr);
				break;
			} catch (Exception e) {
				exceptions.add(e);
			}
		}

		if (node == null) {
			// None of the parsing attempts succeeded. Print the errors
			for (Exception e : exceptions)
				SimpleLogger.logger().log("Error while parsing pattern: " + getPATTERN() + "\n" + e.toString());
			System.out.println(errStream.toString());
			System.exit(1);
		}

		return node;
	}

	eq Pattern.variables() {
		return patternAST().metavariables();
	}

	eq Pattern.isInclusive() = true;

	public class AnalyzeContext {
		public String scopePrefix;
		public String progRelName;

		public AnalyzeContext(String scopePrefix, String progRelName) {
			this.scopePrefix = scopePrefix;
			this.progRelName = progRelName;
		}
	}
}

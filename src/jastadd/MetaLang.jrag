import lang.cons.Constraint;
import lang.cons.ObjLangASTNode;
import objlang.ast.ProgRelPart;
import java.io.StringReader;


aspect MetaLang {
	/**
	   enclosingAnalyzeBlock - the enclosing analyze block if it exists
	 */
	inh AnalyzeBlock CommonClause.enclosingAnalyzeBlock();
	inh AnalyzeBlock PredicateSymbol.enclosingAnalyzeBlock();

	eq Program.getCommonClause().enclosingAnalyzeBlock() = null;
	eq AnalyzeBlock.getClause().enclosingAnalyzeBlock() = this;

	syn String ASTNode.getScopePrefix() = getParent().getScopePrefix();
	eq Program.getScopePrefix() = "";
    eq AnalyzeBlock.getScopePrefix() = "A_" + getProgramRef().getPRED_ID() + "_";

	syn nta List<Clause> AnalyzeBlock.getAllClauses() {
		List<Clause> cls = new List<>();
		cls.addAll(objlang.ast.ObjLang.generateHelperRelations(
															   getScopePrefix(),
															   getProgramRef().getPRED_ID()
															   ));
		for (Clause c : getClauses())
			cls.add(c.treeCopy());
		return cls;
	}

	AnalyzeBlock contributes nta getAllClauses() to Program.predicateSymbols();
	AnalyzeBlock contributes nta getAllClauses() to Program.pass1TypeMap();

	rewrite PredicateSymbol {
		when (enclosingAnalyzeBlock() != null &&
			  objlang.ast.ObjLang.translatePredicateName(getScopePrefix(), getPRED_ID()) != null) to PredicateSymbol {
			return new PredicateSymbol(objlang.ast.ObjLang.translatePredicateName(getScopePrefix(), getPRED_ID()));
		}
	}

	syn nta List<Literal> Pattern.getLiterals() {
		List<Literal> literals = new List<>();
		literals.addAll(objectAST().literals(getScopePrefix()));
		return literals;
	}

	syn objlang.ast.ASTNode Pattern.objectAST() {
		objlang.ast.LangScanner scanner = new objlang.ast.LangScanner(new StringReader(getPATTERN()));
		objlang.ast.LangParser parser = new objlang.ast.LangParser();
		objlang.ast.Clause clause = null;
		try {
			clause = (objlang.ast.Clause) parser.parse(scanner, objlang.ast.LangParser.AltGoals.inner_clause);
		} catch (Exception e) {
			SimpleLogger.logger().log("Error while parsing pattern: " + getPATTERN() + "\n" + e.toString());
		}
		return clause;
	}

	eq Pattern.variables() {
		return objectAST().metavariables();
	}

	eq Pattern.isInclusive() = true;
}

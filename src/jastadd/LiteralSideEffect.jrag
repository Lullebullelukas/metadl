import lang.ast.config.Description;
import lang.io.CSVUtil;
import java.util.HashSet;
import lang.relation.Relation;
import lang.relation.Binding;
import lang.relation.Instantiation;
import java.util.Collections;
import java.util.TreeSet;
import java.util.HashMap;
import java.util.Map;


aspect LiteralSideEffect {
    public void Literal.sideEffect(Program program, Description descr, Relation delta) {}
    public HashSet<String> Program.loadedEDB = new HashSet<String>();
    /**
     * Currently unnecessary Reads, Should Check Deltas Later.
     */
    public void EDBLiteral.sideEffect(Program program, Description descr, Relation delta) {
        boolean changed = true;
        SimpleLogger.logger().log("Begin EDB Load: " + delta, SimpleLogger.LogLevel.Level.DEBUG);

        while(changed) {
        	changed = false;
            int size = getPredicateRef().formalpredicate().relation.size();
            HashSet<EDBRead> reads = new HashSet<>();
            for(PseudoTuple ps : delta.tuples()) {
                PredicateRef pr = (PredicateRef) ps.coord(0);
                String path = ((StringConstant)ps.coord(1)).toString();
                String id = pr.getPRED_ID() + path;
                if(!program.loadedEDB.contains(id)) {
                	reads.add(new EDBRead(pr, path));
                	program.loadedEDB.add(id);
                }
            }

            for(EDBRead r : reads) {
                FormalPredicate fp = program.formalPredicateMap().get(r.ref.getPRED_ID());
                if(fp == null) {
                    SimpleLogger.logger().log("Each PredicateSymbol should belong to a FormalPredicate: " + r.ref.getPRED_ID(), SimpleLogger.LogLevel.Level.ERROR);
                    System.exit(0);
                }
                if(fp.literal().isEDB()) {
					// This is for supporting EDB('EDB, "EDB.csv"). TBD if this is useful.
                	Relation delta2 = new Relation(fp.realArity());
                	CSVUtil.readFileInto(program, delta2, descr.factsDir() + "/" + r.path);
                	fp.relation.tuples().addAll(delta2.tuples());
                	delta = delta2;
                	changed = true;
                } else {
					// An ordinary EDB read
                	CSVUtil.readFileInto(program, fp, descr.factsDir() + "/" + r.path);
				}
            }
        }
        SimpleLogger.logger().log("End EDB Load: " + delta, SimpleLogger.LogLevel.Level.DEBUG);
    }

    public class EDBRead {
        public PredicateRef ref;
        public String path;

        public EDBRead(PredicateRef ref, String path) {
            this.ref = ref;
            this.path = path;
        }
    }

	public PredicateRef IMPORTLiteral.getPredicateRefForRelation(String relName) {
		switch (relName) {
		case "Program":
			return getProgramRef();
		case "Lst":
			return getListRef();
		case "Rule":
			return getRuleRef();
		case "Fact":
			return getFactRef();
		case "Atom":
			return getAtomRef();
		case "PredicateSymbol":
			return getPredicateSymbolRef();
		case "IntConstant":
			return getIntConstantRef();
		case "StringConstant":
			return getStringConstantRef();
		case "PredicateRef":
			return getPredicateRefRef();
		case "Variable":
			return getVariableRef();
		case "IMPORTLiteral":
			return getIMPORTLiteralRef();
		case "EDBLiteral":
			return getEDBLiteralRef();
		case "OUTPUTLiteral":
			return getOUTPUTLiteralRef();
		case "NEGLiteral":
		    return getNEGLiteralRef();
		case "BINDLiteral":
		    return getBINDLiteralRef();
		case "BinaryExclusiveTermLiteral":
		    return getBinaryExclusiveTermLiteralRef();
		case "BinExpr":
		    return getBinExprRef();
		default:
			return null;
		}
	}

	private void IMPORTLiteral.dumpAllRelations(Map<String, Relation> nameToRelMap)
	{
		for (Map.Entry<String, Relation> kv : nameToRelMap.entrySet()) {
			System.out.println(kv.getKey());
			System.out.println(kv.getValue());
		}
	}


	public void IMPORTLiteral.sideEffect(Program program, Description descr, Relation delta) {
		SimpleLogger.logger().log("Computing side effects of loading program...", SimpleLogger.LogLevel.Level.DEBUG);
		for (PseudoTuple t : delta.tuples()) {
			SimpleLogger.logger().log("Loading program " + t.coord(0), SimpleLogger.LogLevel.Level.DEBUG);
			Program importedProgram = null;

			try {
				importedProgram = (Program) FileUtil.parse(new File(t.coord(0).toString()));
			} catch(Exception e) {
				SimpleLogger.logger().log("Could not open file for IMPORT: " + t.coord(0).toString(), SimpleLogger.LogLevel.Level.ERROR);
				System.exit(1);
			}

			HashMap<String, Relation> nameToRelMap = importedProgram.datalogProjection().nameToRelMap;

			for (Map.Entry<String, Relation> kv : nameToRelMap.entrySet()) {
				PredicateRef ref = getPredicateRefForRelation(kv.getKey());

				if (ref == null) {
					SimpleLogger.logger().log("The relation " + kv.getKey() + " cannot be imported using the IMPORT statement.",
											  SimpleLogger.LogLevel.Level.ERROR);
					dumpAllRelations(nameToRelMap);
					continue;
				}

				FormalPredicate fp = program.formalPredicateMap().get(ref.getPRED_ID());
				if (fp == null) {
                    SimpleLogger.logger().log("Each PredicateSymbol should belong to a FormalPredicate: " + ref.getPRED_ID(),
											  SimpleLogger.LogLevel.Level.ERROR);
					System.exit(0);
                }

				fp.relation.addAll(kv.getValue());
			}
		}
	}
}

aspect InitialSideEffect {
    public void Literal.initialSideEffect(Program program, Description descr) {
        if(isInclusive()) {
            FormalPredicate fp = predicate().formalpredicate();
            if(fp.relation == FormalPredicate.nullRelation)
				fp.relation = new Relation(fp.realArity());
        }
    }

    public void PREDLiteral.initialSideEffect(Program program, Description descr) {
        predicate().formalpredicate().relation = new Relation(arity());
        Relation r = predicate().formalpredicate().relation;
        for(PredicateRef pr : getPredicateRefs()) {
            r.addTuple(new PseudoTuple(pr));
        }
    }

    public void ATOMLiteral.initialSideEffect(Program program, Description descr) {
        predicate().formalpredicate().relation = new Relation(arity());
        Relation r = predicate().formalpredicate().relation;
        for(PredicateRef pr : getPredicateRefs()) {
            r.addTuple(new PseudoTuple(pr));
        }
    }

    public void TYPEOFLiteral.initialSideEffect(Program program, Description descr) {
    	predicate().formalpredicate().relation = new Relation(arity());
    	Relation r = predicate().formalpredicate().relation;
    	for(FormalPredicate fp : program.getFormalPredicates()) {
    		PredicateRef pr = new PredicateRef(fp.predicateName());
    		Term type = program.derivedTypeMap.get(fp);
    		if(type == null) continue;
    		r.addTuple(new PseudoTuple(pr, type));
    	}
    }
}

aspect LiteralSelection {
    public Relation Literal.accumBody(Relation body_rel) {
    	Relation r_current = predicate().formalpredicate().relation.select(Binding.createBinding(toTuple()));
		return Relation.join(body_rel, r_current);
    }
    public Relation NEGLiteral.accumBody(Relation body_rel) {
        Relation positive = getLiteral().predicate().formalpredicate().relation.select(Binding.createBinding(toTuple()));
        return Relation.difference(body_rel, positive);
    }

    public abstract boolean BinaryExclusiveTermLiteral.binaryTest(Term t1, Term t2);
    public boolean EQLiteral.binaryTest(Term t1, Term t2)  { return Term.termComparator.compare(t1, t2) == 0; }
    public boolean NEQLiteral.binaryTest(Term t1, Term t2) { return Term.termComparator.compare(t1, t2) != 0; }
    public boolean LTLiteral.binaryTest(Term t1, Term t2)  { return Term.termComparator.compare(t1, t2)  < 0; }
    public boolean LTELiteral.binaryTest(Term t1, Term t2) { return Term.termComparator.compare(t1, t2) <= 0; }
    public boolean GTLiteral.binaryTest(Term t1, Term t2)  { return Term.termComparator.compare(t1, t2)  > 0; }
    public boolean GTELiteral.binaryTest(Term t1, Term t2) { return Term.termComparator.compare(t1, t2) >= 0; }

    public abstract Term Expr.eval(Instantiation inst);
    public abstract Term BinExpr.mappend(Term t1, Term t2);

    syn Term AddExpr.mappend(Term t1, Term t2) {
        if(!Term.sameType(t1, t2)) {
            SimpleLogger.logger().log("Different Types for terms: " + t1 + ", " + t2, SimpleLogger.LogLevel.Level.ERROR);
            System.exit(0);
        }
        if(t1.isInteger())
            return new IntConstant("" + (((IntConstant) t1).intValue() + ((IntConstant) t2).intValue()));
        else if(t1.isString())
            return new StringConstant(((StringConstant)t1).getSTRING() + ((StringConstant)t2).getSTRING());
        if(!Term.sameType(t1, t2)) {
            SimpleLogger.logger().log("Non-supported add for: " + t1 + ", " + t2, SimpleLogger.LogLevel.Level.ERROR);
            System.exit(0);
        }
        return null;
    }

    syn Term SubExpr.mappend(Term t1, Term t2) {
        return new IntConstant("" + (((IntConstant) t1).intValue() - ((IntConstant) t2).intValue()));
    }

    syn Term MulExpr.mappend(Term t1, Term t2) {
        return new IntConstant("" + (((IntConstant) t1).intValue() * ((IntConstant) t2).intValue()));
    }

    syn Term DivExpr.mappend(Term t1, Term t2) {
        return new IntConstant("" + (((IntConstant) t1).intValue() / ((IntConstant) t2).intValue()));
    }

    syn Term Term.eval(Instantiation inst)     = this;
    syn Term Variable.eval(Instantiation inst) = inst.get(this);
    syn Term BinExpr.eval(Instantiation inst)  = mappend(getLeft().eval(inst), getRight().eval(inst));


    public Relation EQLISTLiteral.accumBody(Relation body_rel) {
        TreeSet<Variable> variables = getTermList().variables();
        TreeSet<Constant> constants = getTermList().constants();
        PseudoTuple name_tuple = new PseudoTuple(variables);

        Iterator<PseudoTuple> itr = body_rel.tuples().iterator();
        while(itr.hasNext()) {
            PseudoTuple ps = itr.next();
            PseudoTuple project = new PseudoTuple(ps, body_rel.binding, name_tuple);

            if(!project.isUniInfo() || constants.size() > 1) {
                itr.remove();
            } else if (constants.size() == 1 && project.arity() > 0 &&
                    Term.termComparator.compare(constants.iterator().next(), project.coord(0)) != 0) {
                itr.remove();
            }
        }
        return body_rel;
    }

    public Relation BinaryExclusiveTermLiteral.accumBody(Relation body_rel) {
        TreeSet<Variable> variables = variables();
        PseudoTuple name_tuple = new PseudoTuple(variables);

        Iterator<PseudoTuple> itr = body_rel.tuples().iterator();
        while(itr.hasNext()) {
            PseudoTuple ps = itr.next();
            PseudoTuple project = new PseudoTuple(ps, body_rel.binding, name_tuple);
            Instantiation inst = new Instantiation(name_tuple, project);
            Term left = getLeft().eval(inst);
            Term right = getRight().eval(inst);
            if(!binaryTest(left, right)) {
                itr.remove();
            }
        }
        return body_rel;
    }

    public Relation BINDLiteral.accumBody(Relation body_rel) {
        TreeSet<Variable> variables = getRight().variables();
        if(body_rel != Relation.nullRelation) {
            body_rel.expand();
            PseudoTuple name_tuple = new PseudoTuple(variables);

            for(PseudoTuple ps : body_rel.tuples()) {
                PseudoTuple project = new PseudoTuple(ps, body_rel.binding, name_tuple);
                Instantiation inst = new Instantiation(name_tuple, project);
                Term right = getRight().eval(inst);
                ps.set(ps.arity() - 1, right);
            }
            body_rel.binding.bind(getVariable(), body_rel.arity() - 1);
        } else if(variables.isEmpty()) {
            Term right = getRight().eval(null);
            Relation r = new Relation(1);
            r.binding = Binding.createBinding(new PseudoTuple(getVariable()));
            r.addTuple(new PseudoTuple(right));
            return r;
        }
        return body_rel;
    }
}

import lang.relation.Relation;
import lang.relation.PseudoTuple;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Collections;
import java.lang.reflect.ParameterizedType;
import lang.io.StringUID;


aspect DatalogProject {
	/**
	   Build the name of the relation from the dynamic type of the
	   node.
	 */
	public String ASTNode.getRelation() {
		String nodeName = this.getClass().getName();
		String[] splitNodeName = nodeName.split("\\.");
		String relName = splitNodeName[splitNodeName.length - 1];
		return relName;
	}

	/**
	   Assign a unique ID to every node in the AST
	 */
	public int ASTNode.UID = 0;
	public static int ASTNode.RunningId = 0;
	public synchronized int ASTNode.getNodeId() {
		if (UID == 0) {
			UID = ++ASTNode.RunningId;
		}
		return UID;
	}

	coll Relation Program.datalogProjection() [new Relation(5)] with addTuples root Program;

	syn java.util.List<PseudoTuple> ASTNode.toTuples() {
		String relName = getRelation();
		java.util.List<PseudoTuple> ret = new ArrayList<>();

		// the children in the tree
		int childIndex = 0;
		for (int i = 0; i < getNumChild(); ++i) {
			ASTNode child = getChild(i);

			lang.ast.StringConstant Kind = new lang.ast.StringConstant(relName);
			lang.ast.IntConstant ChildId;
			if (child instanceof Opt) {
				if (child.getNumChild() == 0)
					ChildId = new lang.ast.IntConstant("0");
				else
					ChildId = new lang.ast.IntConstant("" + child.getChild(0).getNodeId());
			} else {
				ChildId = new lang.ast.IntConstant("" + child.getNodeId());
			}
			lang.ast.IntConstant CurrentNodeId = new lang.ast.IntConstant("" + getNodeId());
			lang.ast.IntConstant ChildIdx = new lang.ast.IntConstant("" + childIndex++);
			lang.ast.StringConstant Token = new lang.ast.StringConstant("");
			ret.add(new PseudoTuple(Kind, CurrentNodeId, ChildIdx, ChildId, Token));
		}

		// other tokens attached to the node
		for (String t : tokens()) {
			// For every token, we generate two tuples
			// ("NodeKind", CurrentNodeId, ChildIdx, ChildId, "")
			// ("Token", ChildId, 0, 0, "TokenAsString")
			int tokenUID = StringUID.getInstance().uid(t);
			{
				// Add a tuple to the current node relation
				lang.ast.StringConstant Kind = new lang.ast.StringConstant(relName);
				lang.ast.IntConstant ChildId = new lang.ast.IntConstant("" + tokenUID);
				lang.ast.IntConstant CurrentNodeId = new lang.ast.IntConstant("" + getNodeId());
				lang.ast.IntConstant ChildIdx = new lang.ast.IntConstant("" + childIndex++);
				lang.ast.StringConstant Token = new lang.ast.StringConstant("");
				ret.add(new PseudoTuple(Kind, CurrentNodeId, ChildIdx, ChildId, Token));
			}

			{
				// Add a tuple to Token relation
				lang.ast.StringConstant Kind = new lang.ast.StringConstant("Terminal");
				lang.ast.IntConstant ChildId = new lang.ast.IntConstant("0");
				lang.ast.IntConstant CurrentNodeId = new lang.ast.IntConstant("" + tokenUID);
				lang.ast.IntConstant ChildIdx = new lang.ast.IntConstant("0");
				lang.ast.StringConstant Token = new lang.ast.StringConstant(t);
				ret.add(new PseudoTuple(Kind, CurrentNodeId, ChildIdx, ChildId, Token));
			}
		}

		{
			// record the source location
			// ("SourceInfo, CurrentNodeId, Line, Col, "")
			lang.ast.StringConstant Kind = new lang.ast.StringConstant("SourceInfo");
			lang.ast.IntConstant CurrentNodeId = new lang.ast.IntConstant("" + getNodeId());
			lang.ast.IntConstant Line = new lang.ast.IntConstant("" + getLine(getStart()));
			lang.ast.IntConstant Col = new lang.ast.IntConstant("" + getColumn(getStart()));
			lang.ast.StringConstant Token = new lang.ast.StringConstant("");
			ret.add(new PseudoTuple(Kind, CurrentNodeId, Line, Col, Token));
		}

		return ret;
	}

    eq Opt.toTuples() {
		return Collections.emptyList();
	}

	syn java.util.List<String> ASTNode.tokens() = Collections.emptyList();
	eq IntConstant.tokens() {
		return Collections.singletonList(getNUMERAL());
	}
	eq StringConstant.tokens() {
		return Collections.singletonList(getSTRING());
	}
	eq PredicateRef.tokens() {
		return Collections.singletonList(getPRED_ID());
	}
	eq PredicateSymbol.tokens() {
		return Collections.singletonList(getPRED_ID());
	}
	eq FunctorSymbol.tokens() {
		return Collections.singletonList(getFUNC_ID());
	}
	eq Variable.tokens() {
		return Collections.singletonList(getVAR_ID());
	}

	ASTNode contributes toTuples() to Program.datalogProjection() ;

	syn Relation Program.asRelation() = datalogProjection();
}

%class "ConfigParser";
%package "lang.ast.config";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};

%terminals FILEPATH, SEP, BOTTOMUPNAIVE, SOUFFLE, OUTDIR, FACTSDIR, SOUFFLEOUT,
           PRETTYPRINT, EVAL, TYPE_PROG, SEMANTIC_CHECK, TYPE_CHECK, PRE_PRINT,
	   CSVSEPARATOR, SEP_CHAR;

%typeof  descr                    =  "Description";
%typeof  pretty                   =  "Task";
%typeof  task                     =  "Task";
%typeof  eval                     =  "Task";
%typeof  type_prog                =  "Task";
%typeof  pretty_task              =  "Task";
%typeof  eval_task                =  "Task";
%typeof  semantic_check           =  "Task";
%typeof  type_check               =  "Task";
%typeof  pre_print                =  "Task";
%typeof  file_path                =  "FilePath";
%typeof  input_file               =  "InputFile";
%typeof  output_dir               =  "OutputDir";
%typeof  facts_dir                =  "FactsDir";
%typeof  config_param             =  "ConfigParam";
%typeof  config_params            =  "List";
%typeof  config_params_no_empty   =  "List";
%typeof  souffle_params           =  "List";
%typeof  souffle_params_no_empty  =  "List";
%typeof  souffle_param            =  "SouffleParam";
%typeof  output_file_name         =  "OutputFileName";
%typeof  csv_separator            =  "CSVSeparator";

%goal descr;

descr = task.t input_file.fn {: return new Description(t, fn); :};

task = pretty
     | eval
     | type_prog
     | semantic_check
     | type_check
     | pre_print
     ;

pretty     =  PRETTYPRINT SEP pretty_task;
eval       =  EVAL        SEP eval_task;

pretty_task = BOTTOMUPNAIVE config_params.params {: return new PrettyBottomUpNaive(params); :}
            | SOUFFLE config_params.params souffle_params.s_params {: return new PrettySouffle(params, s_params); :}
            ;

eval_task = BOTTOMUPNAIVE config_params.params {: return new EvalBottomUpNaive(params); :}
          | SOUFFLE config_params.params souffle_params.s_params {: return new EvalSouffle(params, s_params); :}
          ;

type_prog          =  TYPE_PROG config_params.params {: return new TypeProg(params); :};
semantic_check     =  SEMANTIC_CHECK config_params.params {: return new SemanticCheck(params); :};
type_check         =  TYPE_CHECK config_params.params {: return new TypeCheck(params); :};
pre_print          =  PRE_PRINT config_params.params  souffle_params.s_params{: return new PrePrint(params, s_params); :};
souffle_params = souffle_params_no_empty
          | /* epsilon */ {: return new List(); :}
          ;

souffle_params_no_empty = souffle_param.param {: return new List().add(param); :}
                       | souffle_params_no_empty.list souffle_param.param {: return list.add(param); :}
                       ;

souffle_param = output_file_name;

config_params = config_params_no_empty
          | /* epsilon */ {: return new List(); :}
          ;

config_params_no_empty = config_param.param {: return new List().add(param); :}
                       | config_params_no_empty.list config_param.param {: return list.add(param); :}
                       ;

config_param  = file_path
              | csv_separator
	      ;

file_path     = output_dir
              | facts_dir
              ;

input_file        =  FILEPATH.fn {: return new InputFile(fn); :};
output_dir        =  OUTDIR FILEPATH.fn {: return new OutputDir(fn); :};
facts_dir         =  FACTSDIR FILEPATH.fn {: return new FactsDir(fn); :};
output_file_name  =  SOUFFLEOUT FILEPATH.fn {: return new OutputFileName(fn); :};
csv_separator     =  CSVSEPARATOR SEP_CHAR.c {: return new CSVSeparator(c); :};
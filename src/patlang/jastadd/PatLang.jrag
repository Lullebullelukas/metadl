import lang.cons.Constraint;
import java.util.TreeSet;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.Collections;
import lang.cons.ObjLangASTNode;
import java.lang.reflect.Method;
import java.lang.ReflectiveOperationException;
import lang.ast.AnalyzeContext;
import lang.io.StringUID;

aspect Pattern {

	/**
	   Assign a unique ID to every node in the AST
	*/
	private int ASTNode.UID = 0;
	private static int ASTNode.RunningId = 0;
	public synchronized int ASTNode.getNodeId() {
		if (UID == 0) {
			UID = ++ASTNode.RunningId;
		}
		return UID;
    }

	/**
	   Attributes that implement the MetaVariableTraits interface
	 */

	public static String ASTNode.GAP = "Gap";
	public static String ASTNode.METAVARIABLE = "MetaVar";
	public static String ASTNode.INDEX_METAVARIABLE = "IndexMetaVar";
	public static String ASTNode.INDEX_ACCESSOR_METHOD = "getElement";

	syn String ASTNode.name() {
		String nodeNameFull = this.getClass().getName();
		String[] splitNodeName = nodeNameFull.split("\\.");
		String nodeName = splitNodeName[splitNodeName.length - 1];
		return nodeName;
	}

	syn String ASTNode.getRelation() = name();

	syn boolean ASTNode.isIndexMetaVar() {
		return name().startsWith(INDEX_METAVARIABLE);
	}

	syn boolean ASTNode.isGap() {
		return name().startsWith(GAP);
	}

	syn boolean ASTNode.isMetaVar() {
		return name().startsWith(METAVARIABLE) && !name().startsWith("MetaVariable");
	}

	syn String ASTNode.indexVarName() {
		if (isIndexMetaVar()) {
			// We do not know the dynamic type of this metavariable
			// and there is no common supertype of all metavariables
			try {
				Method m = this.getClass().getMethod("getVar");
				MetaVariable v = (MetaVariable) m.invoke(this);
				return v.getID();
			} catch (ReflectiveOperationException e) {
				throw new Error(e.toString());
			}
		} else {
			return "i_" + getNodeId();
		}
	}

	syn String ASTNode.varName() {
		if (isMetaVar()) {
			try {
				Method m = this.getClass().getMethod("getVar");
				MetaVariable v = (MetaVariable) m.invoke(this);
				return v.getID();
			} catch (ReflectiveOperationException e) {
				throw new Error(e.toString());
			}
		} else {
			return "v_" + getNodeId();
		}
	}

	// TODO: the token list should be generated
	syn java.util.List<String> ASTNode.tokens() = Collections.emptyList();
	eq IntConstant.tokens() {
		return Collections.singletonList(getNUMERAL());
	}
	eq StringConstant.tokens() {
		return Collections.singletonList(getSTRING());
	}
	eq PredicateRef.tokens() {
		return Collections.singletonList(getPRED_ID());
	}
	eq PredicateSymbol.tokens() {
		return Collections.singletonList(getPRED_ID());
	}
	eq FunctorSymbol.tokens() {
		return Collections.singletonList(getFUNC_ID());
	}

	/**
	   The asLiterals() equations are isomorphic to toTuples()
	   equations in the DatalogProject aspect. The common parts should be
	   factored out to ensure that the relational
	   representation of a program matches the code generated for a pattern.
	 */
	syn ArrayList<lang.ast.Literal> ASTNode.asLiterals(AnalyzeContext ctx);

	eq ASTNode.asLiterals(AnalyzeContext ctx) {
		ArrayList<lang.ast.Literal> literals = new ArrayList<>();
		if (isGap() || isMetaVar() || isIndexMetaVar())
			return literals;

		String relName = getRelation();
		java.util.ArrayList<lang.ast.Literal> ret = new ArrayList<>();

		// the children in the tree
		int childIndex = 0;
		for (int i = 0; i < getNumChild(); ++i) {
			ASTNode child = getChild(i);

			lang.ast.List<lang.ast.Term> terms = new lang.ast.List<>();
			lang.ast.StringConstant Kind = new lang.ast.StringConstant(relName);
			lang.ast.Term ChildId;
			if (child instanceof Opt) {
				if (child.getNumChild() == 0)
					// TODO: semantics around optionals
					ChildId = new lang.ast.IntConstant("0");
				else
					ChildId = new lang.ast.Variable(child.getChild(0).varName());
			} else {
				ChildId = new lang.ast.Variable(child.varName());
			}
			lang.ast.Variable CurrentNodeId = new lang.ast.Variable(varName());
			lang.ast.IntConstant ChildIdx = new lang.ast.IntConstant("" + childIndex++);
			lang.ast.StringConstant Token = new lang.ast.StringConstant("");

			terms.add(Kind).add(CurrentNodeId).add(ChildIdx).add(ChildId).add(Token);
			ret.add(new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.progRelName), terms));
		}

		// other tokens attached to the node
		for (String t : tokens()) {
			// For every token, we generate two tuples
			// ("NodeKind", CurrentNodeId, ChildIdx, ChildId, "")
			// ("Token", ChildId, 0, 0, "TokenAsString")
			int tokenUID = StringUID.getInstance().uid(t);
			{
				lang.ast.List<lang.ast.Term> terms = new lang.ast.List<>();

				// Add a tuple to the current node relation
				lang.ast.StringConstant Kind = new lang.ast.StringConstant(relName);
				lang.ast.Variable ChildId = new lang.ast.Variable("t_" + tokenUID);
				lang.ast.Variable CurrentNodeId = new lang.ast.Variable(varName());
				lang.ast.IntConstant ChildIdx = new lang.ast.IntConstant("" + childIndex++);
				lang.ast.Wildcard Token = new lang.ast.Wildcard();

				terms.add(Kind).add(CurrentNodeId).add(ChildIdx).add(ChildId).add(Token);
				ret.add(new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.progRelName), terms));
			}

			{
				// Add a tuple to Token relation
				lang.ast.List<lang.ast.Term> terms = new lang.ast.List<>();

				lang.ast.StringConstant Kind = new lang.ast.StringConstant("Terminal");
				lang.ast.Wildcard ChildId = new lang.ast.Wildcard();
				lang.ast.Variable CurrentNodeId = new lang.ast.Variable("t_" + tokenUID);
				lang.ast.Wildcard ChildIdx = new lang.ast.Wildcard();
				lang.ast.StringConstant Token = new lang.ast.StringConstant(t);

				terms.add(Kind).add(CurrentNodeId).add(ChildIdx).add(ChildId).add(Token);
				ret.add(new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.progRelName), terms));
			}
		}

		return ret;
	}

	ASTNode implements ObjLangASTNode;

	syn ArrayList<Constraint> List.constraints() {
		if (getNumChild() == 0) {
			return new ArrayList<>();
		}

		ArrayList<Constraint> cons = new ArrayList<>();
		ASTNode prevNonGap = null;
		ASTNode prev = null;
		boolean seenGap = false;

		for (int i = 0; i < getNumChild(); ++i) {
			ASTNode c = getChild(i);
			if (!c.isGap()) {
				if (!seenGap) {
					// no gaps seen from the beginning, then the index variable
					// is constrained to be equal to the position in the list
					cons.add(Constraint.eq(c, i));
				} else if (prev == prevNonGap) {
					// seen gaps, but the predecessor is not a gap
					// e.g. P(...,$i:t,$j:u,...) -> constrain $i + 1 == $j
					cons.add(Constraint.next(prev, c));
				} else if (prevNonGap != null) {
					// seen gaps, but the predecessor is a gap
					// e.g. P(...,$i:t,...,$j:u,...)
					// There are two alternatives to chosse from:
					// 1. constrain $j > $i
					// 2. no constraint
					// We choose to implement 2 to allow a pattern like
					// ... :- ..., EQ(x, y), ..., $p(...),... . to cover cases
					// where EQ comes before $p and after $p. If ordering is
					// required, the user can add explicit indices.
					cons.add(Constraint.member(c));
				} else if (prevNonGap == null) {
					// seens only gaps before
					cons.add(Constraint.member(c));
				}

				if (i + 1 == getNumChild()) {
					// this is the rightmost element in a list with gaps
					// e.g. P(...,$i:t) -> constrain $i to be the index of the last element
					cons.add(Constraint.last(c));
				}
			}

			if (!c.isGap()) {
				prevNonGap = c;
			} else {
				seenGap = true;
			}
			prev = c;
		}
		return cons;
	}

	syn ArrayList<lang.ast.Clause> ASTNode.asClauses(AnalyzeContext ctx) = new ArrayList<>();
	eq List.asClauses(AnalyzeContext ctx) {
		ArrayList<Constraint> cons = constraints();
		if (cons.isEmpty())
			return new ArrayList<>();
		ArrayList<lang.ast.Clause> clauses = new ArrayList<>();
		for (Constraint c : cons) {
			lang.ast.Clause cls = c.generateClause(ctx);
			if (cls != null)
				clauses.add(cls);
		}
		return clauses;
	}

	eq List.asLiterals(AnalyzeContext ctx) {
		ArrayList<Constraint> cons = constraints();
		if (cons.isEmpty())
			return super.asLiterals(ctx);

		ArrayList<lang.ast.Literal> lits = new ArrayList<>();
		for (Constraint c : cons)
			lits.addAll(c.generateLiterals(ctx));
		return lits;
	}

	// eq MetaVariable.asLiterals(String scopePrefix) = new ArrayList<>();
	eq Opt.asLiterals(AnalyzeContext ctx) = new ArrayList<>();
	// eq MetaVariable.varName() = "$" + getMETAVAR_ID();

	syn ArrayList<lang.ast.Literal> ASTNode.literals(AnalyzeContext ctx) {
		// An add-hoc way of implementing parameterized collection attributes
		ArrayList<lang.ast.Literal> list = new ArrayList<>();
		list.addAll(asLiterals(ctx));
		for (ASTNode c : astChildren())
			list.addAll(c.literals(ctx));
		return list;
	}

	syn TreeSet<lang.ast.Variable> ASTNode.metavariables() {
		TreeSet<lang.ast.Variable> vars = new TreeSet<>(lang.ast.Term.termComparator);
		for (ASTNode c : astChildren())
			vars.addAll(c.metavariables());
		return vars;
	}

	eq MetaVariable.metavariables() {
		TreeSet<lang.ast.Variable> vars = new TreeSet<>(lang.ast.Term.termComparator);
		vars.add(new lang.ast.Variable(getID()));
		return vars;
	}
}

aspect AnalyzeBlock {
	public class PatLang {
		public static lang.ast.Rule implicitTypeDecl(AnalyzeContext ctx) {
			lang.ast.List<lang.ast.CommonLiteral> head = new lang.ast.List<>();
			lang.ast.List<lang.ast.CommonLiteral> body = new lang.ast.List<>();
			lang.ast.List<lang.ast.Term> vars = new lang.ast.List<>();
			vars.add(new lang.ast.StringConstant("")).add(new lang.ast.IntConstant("0")).add(new lang.ast.IntConstant("0"))
				.add(new lang.ast.IntConstant("0")).add(new lang.ast.StringConstant("0"));

			head.add(new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.progRelName), vars));
			body.add(new lang.ast.NEQLiteral(new lang.ast.PredicateSymbol("NEQ"),
											 new lang.ast.IntConstant("0"),
											 new lang.ast.IntConstant("0")));

			return new lang.ast.Rule(head, body);
		}


		/**
		   For every analyze block, insert relations that provide the
		   context for evaluating the expanded patterns.
		*/
		public static lang.ast.Rule makeIdentifierRule(AnalyzeContext ctx, String name) {
			lang.ast.List<lang.ast.CommonLiteral> headList = new lang.ast.List<>();
			lang.ast.List<lang.ast.CommonLiteral> bodyList = new  lang.ast.List<>();

			lang.ast.List<lang.ast.Term> headVars = new lang.ast.List<>();
			headVars.add(new lang.ast.Variable("n_id"));
			headVars.add(new lang.ast.Variable("name"));
			lang.ast.CommonLiteral head = new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.scopePrefix + "ID"),
									headVars);
			lang.ast.CommonLiteral body = new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.scopePrefix + name),
									headVars.treeCopyNoTransform());

			headList.add(head);
			bodyList.add(body);

			return new lang.ast.Rule(headList, bodyList);
		}


		public static lang.ast.List<lang.ast.Clause> generateHelperRelations(AnalyzeContext ctx) {
			lang.ast.List<lang.ast.Clause> ret = new lang.ast.List<>();

			// Add two new rules, to map variables and predicates to their predicates
			// ret.add(makeIdentifierRule(ctx, "Variable"));
			// ret.add(makeIdentifierRule(ctx, "PredicateSymbol"));
			// ret.add(makeIdentifierRule(ctx, "FunctorSymbol"));
			ret.add(implicitTypeDecl(ctx));

			return ret;
		}

		public static String translatePredicateName(AnalyzeContext ctx, String predName) {
			String s = null;
			switch (predName) {
			case "INT": s = "IntConstant"; break;
			case "STR": s = "StringConstant"; break;
			case "REF": s = "PredicateRef"; break;
			case "ID": s = "ID"; break;
			case "EXPR": s = "EXPR"; break;
			case "SRC": s = "SourceInfo"; break;
			default: return null;
			}
			return ctx. scopePrefix + s;
		}
	}
}

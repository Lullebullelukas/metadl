import lang.cons.Constraint;
import java.util.TreeSet;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.Collections;
import lang.cons.ObjLangASTNode;
import java.lang.reflect.Method;
import java.lang.ReflectiveOperationException;
import lang.ast.AnalyzeContext;
import lang.io.StringUID;
import java.util.Arrays;
import java.io.PrintStream;

aspect Pattern {

	/**
	   Assign a unique ID to every node in the AST
	*/
	private int ASTNode.UID = 0;
	private static int ASTNode.RunningId = 0;
	public synchronized int ASTNode.getNodeId() {
		if (UID == 0) {
			UID = ++ASTNode.RunningId;
		}
		return UID;
    }

	/**
	   Attributes that implement the MetaVariableTraits interface
	 */

	public static String ASTNode.GAP = "Gap";
	public static String ASTNode.METAVARIABLE = "MetaVar";
	public static String ASTNode.INDEX_METAVARIABLE = "IndexMetaVar";
	public static String ASTNode.INDEX_ACCESSOR_METHOD = "getElement";

	/**
	   Control strict matching of lists and optionals. When true, a pattern
	   will assert that missing optional elements do not exist in the program.
	 */
	protected static boolean ASTNode.STRICT_MATCH = false;

	syn String ASTNode.name() {
		String nodeNameFull = this.getClass().getName();
		String[] splitNodeName = nodeNameFull.split("\\.");
		String nodeName = splitNodeName[splitNodeName.length - 1];
		return nodeName;
	}

	public void ASTNode.debugPrintInternal(int offset, PrintStream ps) {
		for (int i = 0; i < offset; ++i)
			ps.print('_');
		ps.println(name() + " : " + varName());
		for (int i = 0; i < getNumChildNoTransform(); ++i) {
			if (getChildNoTransform(i) != null)
				getChildNoTransform(i).debugPrintInternal(offset + 2, ps);
		}
	}

	public void MetaVariable.debugPrintInternal(int offset, PrintStream ps) {
		for (int i = 0; i < offset; ++i)
			ps.print('_');
		ps.println(name() + ":" + getID());
	}

	public void ASTNode.debugPrint(PrintStream ps) {
		debugPrintInternal(0, ps);
	}

	syn String ASTNode.getRelation() = name();

	syn boolean ASTNode.isGap() {
		return name().startsWith(GAP);
	}

	syn boolean ASTNode.isMetaVar() {
		return name().startsWith(METAVARIABLE) && !name().startsWith("MetaVariable");
	}

	syn boolean MetaVariable.isWildcard() = getID().equals("`_");

	syn String ASTNode.varName() {
		if (isMetaVar()) {
			try {
				Method m = this.getClass().getMethod("getVar");
				MetaVariable v = (MetaVariable) m.invoke(this);
				if (!v.isWildcard())
					return v.getID();
			} catch (ReflectiveOperationException e) {
				throw new Error(e.toString());
			}
		}
		return "v_" + getNodeId();
	}

	syn String ASTNode.indexVarName() {
		return "i_" + getNodeId();
	}

	syn ArrayList<lang.ast.Literal> ASTNode.asLiterals(AnalyzeContext ctx, lang.ast.CommonVariable root);

	public ArrayList<lang.ast.Literal> ASTNode.metaVarAsLiterals(AnalyzeContext ctx, lang.ast.CommonVariable root) {
		assert isMetaVar();
		ArrayList<lang.ast.Literal> literals = new ArrayList<>();
		java.util.ArrayList<lang.ast.Literal> ret = new ArrayList<>();

		assert getRelation().startsWith(ASTNode.METAVARIABLE);
		String relName = getRelation().substring(ASTNode.METAVARIABLE.length());
		String predName = ctx.scopePrefix + "METAVAR";

		for (int i = 0; i < getNumChild(); ++i) {
			ASTNode child = getChild(i);
			if (child == null || child instanceof MetaVariable)
				continue;

			lang.ast.List<lang.ast.Term> terms = new lang.ast.List<>();
			lang.ast.Term Kind = new lang.ast.StringConstant(relName);
			lang.ast.Term ChildId = new lang.ast.Variable(child.varName());
			lang.ast.CommonVariable CurrentNodeId = new lang.ast.Variable(varName());
			lang.ast.IntConstant ChildIdx = new lang.ast.IntConstant("" + i);
			lang.ast.Term Token = new lang.ast.Wildcard();

			terms.add(Kind).add(CurrentNodeId).add(ChildIdx).add(ChildId).add(Token);
			ret.add(new lang.ast.Atom(new lang.ast.PredicateSymbol(predName), terms));
		}

		if (ret.isEmpty()) {
			// This metavariable node has no children. Just ensure that is bound to
			// the correct AST node type
			lang.ast.List<lang.ast.Term> terms = new lang.ast.List<>();
			lang.ast.StringConstant Kind = new lang.ast.StringConstant(relName);
			lang.ast.Term ChildId  = new lang.ast.Wildcard();
			lang.ast.CommonVariable CurrentNodeId = new lang.ast.Variable(varName());
			lang.ast.Term ChildIdx = new lang.ast.Wildcard();
			lang.ast.Term Token = new lang.ast.Wildcard();

			terms.add(Kind).add(CurrentNodeId).add(ChildIdx).add(ChildId).add(Token);
			ret.add(new lang.ast.Atom(new lang.ast.PredicateSymbol(predName), terms));
		}


		if (root != null) {
			// This is an a <: `b :> pattern. In this case, we need to ensure that a == b.
			lang.ast.List<lang.ast.Term> terms = new lang.ast.List<>();
			lang.ast.StringConstant Kind = new lang.ast.StringConstant(relName);
			lang.ast.Term ChildId  = new lang.ast.Wildcard();
			lang.ast.CommonVariable CurrentNodeId = root;
			lang.ast.Term ChildIdx = new lang.ast.Wildcard();
			lang.ast.Term Token = new lang.ast.Wildcard();

			terms.add(Kind).add(CurrentNodeId).add(ChildIdx).add(ChildId).add(Token);
			ret.add(new lang.ast.Atom(new lang.ast.PredicateSymbol(predName), terms));

			ret.add(new lang.ast.EQLiteral(new lang.ast.PredicateSymbol("EQ"),
										   new lang.ast.Variable(varName()),
										   root.treeCopyNoTransform()));
		}

		return ret;
	}

	/**
	   The asLiterals() equations are isomorphic to toTuples()
	   equations in the DatalogProject aspect. The common parts should be
	   factored out to ensure that the relational
	   representation of a program matches the code generated for a pattern.
	 */

	eq ASTNode.asLiterals(AnalyzeContext ctx, lang.ast.CommonVariable root) {
		ArrayList<lang.ast.Literal> literals = new ArrayList<>();
		if (isGap())
			return literals;
		if (isMetaVar())
			return metaVarAsLiterals(ctx, root);

		String relName = getRelation();

		java.util.ArrayList<lang.ast.Literal> ret = new ArrayList<>();

		// the children in the tree
		for (int i = 0; i < getNumChild(); ++i) {
			ASTNode child = getChild(i);
			lang.ast.List<lang.ast.Term> terms = new lang.ast.List<>();
			lang.ast.Term Kind = new lang.ast.StringConstant(relName);
			lang.ast.Term ChildId = new lang.ast.Variable(child.varName());
			lang.ast.CommonVariable CurrentNodeId = root != null ? root : new lang.ast.Variable(varName());
			lang.ast.IntConstant ChildIdx = new lang.ast.IntConstant("" + i);
			lang.ast.Term Token = new lang.ast.Wildcard();

			terms.add(Kind).add(CurrentNodeId).add(ChildIdx).add(ChildId).add(Token);
			ret.add(new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.progRelName), terms));
		}


		int childIndex = getNumChild();
		// other tokens attached to the node
		for (String t : tokens()) {
			// For every token, we generate two tuples
			// ("NodeKind", CurrentNodeId, ChildIdx, ChildId, "")
			// ("Token", ChildId, 0, 0, "TokenAsString")
			int tokenUID = StringUID.getInstance().uid(t);
			{
				lang.ast.List<lang.ast.Term> terms = new lang.ast.List<>();

				// Add a tuple to the current node relation
				lang.ast.Term Kind = relName != null ?
					new lang.ast.StringConstant(relName) : new lang.ast.Wildcard();
				lang.ast.Variable ChildId = new lang.ast.Variable("t_" + tokenUID);
				lang.ast.CommonVariable CurrentNodeId = root != null ? root : new lang.ast.Variable(varName());
				lang.ast.IntConstant ChildIdx = new lang.ast.IntConstant("" + childIndex++);
				lang.ast.Wildcard Token = new lang.ast.Wildcard();

				terms.add(Kind).add(CurrentNodeId).add(ChildIdx).add(ChildId).add(Token);
				ret.add(new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.progRelName), terms));
			}

			{
				// Add a tuple to Token relation
				lang.ast.List<lang.ast.Term> terms = new lang.ast.List<>();

				lang.ast.StringConstant Kind = new lang.ast.StringConstant("Terminal");
				lang.ast.Wildcard ChildId = new lang.ast.Wildcard();
				lang.ast.Variable CurrentNodeId = new lang.ast.Variable("t_" + tokenUID);
				lang.ast.Wildcard ChildIdx = new lang.ast.Wildcard();
				lang.ast.StringConstant Token = new lang.ast.StringConstant(t);

				terms.add(Kind).add(CurrentNodeId).add(ChildIdx).add(ChildId).add(Token);
				ret.add(new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.progRelName), terms));
			}
		}

		if (childIndex == 0) {
			// This node has no children, emit that
			lang.ast.List<lang.ast.Term> terms = new lang.ast.List<>();

			lang.ast.StringConstant Kind = new lang.ast.StringConstant(relName);
			lang.ast.Term ChildId  = ASTNode.STRICT_MATCH ? new lang.ast.IntConstant("-1") : new lang.ast.Wildcard();
			lang.ast.CommonVariable CurrentNodeId = root != null ? root : new lang.ast.Variable(varName());
			lang.ast.Term ChildIdx = ASTNode.STRICT_MATCH ? new lang.ast.IntConstant("-1") : new lang.ast.Wildcard();
			lang.ast.Term Token = new lang.ast.Wildcard();

			terms.add(Kind).add(CurrentNodeId).add(ChildIdx).add(ChildId).add(Token);
			ret.add(new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.progRelName), terms));
		}

		return ret;
	}

	ASTNode implements ObjLangASTNode;

	syn ArrayList<Constraint> List.constraints() {
		if (getNumChild() == 0) {
			return new ArrayList<>();
		}

		ArrayList<Constraint> cons = new ArrayList<>();
		ASTNode prevNonGap = null;
		ASTNode prev = null;
		boolean seenGap = false;

		for (int i = 0; i < getNumChild(); ++i) {
			ASTNode c = getChild(i);
			if (!c.isGap()) {
				if (!seenGap) {
					// no gaps seen from the beginning, then the index variable
					// is constrained to be equal to the position in the list
					cons.add(Constraint.eq(c, i));
				} else if (prev == prevNonGap) {
					// seen gaps, but the predecessor is not a gap
					// e.g. P(...,$i:t,$j:u,...) -> constrain $i + 1 == $j
					cons.add(Constraint.next(prev, c));
				} else if (prevNonGap != null) {
					// seen gaps, but the predecessor is a gap
					// e.g. P(...,$i:t,...,$j:u,...)
					// There are two alternatives to chosse from:
					// 1. constrain $j > $i
					// 2. no constraint
					// We choose to implement 2 to allow a pattern like
					// ... :- ..., EQ(x, y), ..., $p(...),... . to cover cases
					// where EQ comes before $p and after $p. If ordering is
					// required, the user can add explicit indices.
					cons.add(Constraint.member(c));
				} else if (prevNonGap == null) {
					// seens only gaps before
					cons.add(Constraint.member(c));
				}

				if (i + 1 == getNumChild()) {
					// this is the rightmost element in a list with gaps
					// e.g. P(...,$i:t) -> constrain $i to be the index of the last element
					cons.add(Constraint.last(c));
				}
			}

			if (!c.isGap()) {
				prevNonGap = c;
			} else {
				seenGap = true;
			}
			prev = c;
		}
		return cons;
	}

	syn ArrayList<lang.ast.Clause> ASTNode.asClauses(AnalyzeContext ctx) = new ArrayList<>();
	eq List.asClauses(AnalyzeContext ctx) {
		// TODO: this is not used currently used, because none of the
		// constraints implements the generateClause method.
		// Remove maybe?
		ArrayList<Constraint> cons = constraints();
		if (cons.isEmpty())
			return new ArrayList<>();
		ArrayList<lang.ast.Clause> clauses = new ArrayList<>();
		for (Constraint c : cons) {
			lang.ast.Clause cls = c.generateClause(ctx);
			if (cls != null)
				clauses.add(cls);
		}
		return clauses;
	}

	eq List.asLiterals(AnalyzeContext ctx, lang.ast.CommonVariable root) {
		ArrayList<lang.ast.Literal> lits = new ArrayList<>();

		if (getParent().isMetaVar())
			return lits;

		if (STRICT_MATCH && getNumChild() == 0) {
			// The list is empty, assert that the List relation does not
			// contain anything with this node ID
			lang.ast.List<lang.ast.Term> terms = new lang.ast.List<>();
			lang.ast.StringConstant Kind = new lang.ast.StringConstant(getRelation());
			lang.ast.Wildcard ChildId = new lang.ast.Wildcard();
			lang.ast.CommonVariable CurrentNodeId = root != null ? root : new lang.ast.Variable(varName());
			lang.ast.Wildcard ChildIdx = new lang.ast.Wildcard();
			lang.ast.Wildcard Token = new lang.ast.Wildcard();

			terms.add(Kind).add(CurrentNodeId).add(ChildIdx).add(ChildId).add(Token);
			lits.add(new lang.ast.NEGLiteral(new lang.ast.PredicateSymbol("NOT"),
											 new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.progRelName), terms)));
			return lits;
		}

		if (getNumChild() == 1 && getChild(0).isGap())
			return lits;

		ArrayList<Constraint> cons = constraints();
		if (cons.isEmpty())
			return super.asLiterals(ctx, null);

		for (Constraint c : cons)
			lits.addAll(c.generateLiterals(ctx));
		return lits;
	}

	eq MetaVariable.asLiterals(AnalyzeContext ctx, lang.ast.CommonVariable root) = new ArrayList<>();
	eq Opt.asLiterals(AnalyzeContext ctx, lang.ast.CommonVariable root) {
		ArrayList<lang.ast.Literal> lits = new ArrayList<>();
		if (getParent().isMetaVar())
			return lits;

		if (STRICT_MATCH && getNumChild() == 0) {
			lang.ast.List<lang.ast.Term> terms = new lang.ast.List<>();
			lang.ast.StringConstant Kind = new lang.ast.StringConstant(getRelation());
			lang.ast.Wildcard ChildId = new lang.ast.Wildcard();
			lang.ast.CommonVariable CurrentNodeId = root != null ? root : new lang.ast.Variable(varName());
			lang.ast.Wildcard ChildIdx = new lang.ast.Wildcard();
			lang.ast.Wildcard Token = new lang.ast.Wildcard();

			terms.add(Kind).add(CurrentNodeId).add(ChildIdx).add(ChildId).add(Token);
			lits.add(new lang.ast.NEGLiteral(new lang.ast.PredicateSymbol("NOT"),
											 new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.progRelName), terms)));
			return lits;
		}
		return super.asLiterals(ctx, root);
	}


	syn ArrayList<lang.ast.Literal> ASTNode.literals(AnalyzeContext ctx, lang.ast.CommonVariable root) {
		// An add-hoc way of implementing parameterized collection attributes
		ArrayList<lang.ast.Literal> list = new ArrayList<>();
		list.addAll(asLiterals(ctx, root));
		if (isGap())
			return list;
		for (ASTNode c : astChildren()) {
			if (c == null) {
				// Metavariable nodes may have null children, skip them
				assert isMetaVar();
			} else {
				list.addAll(c.literals(ctx, null));
			}
		}
		return list;
	}

	syn TreeSet<lang.ast.Variable> ASTNode.metavariables() {
		TreeSet<lang.ast.Variable> vars = new TreeSet<>(lang.ast.Term.termComparator);
		for (ASTNode c : astChildren()) {
			if (c != null)
				// Gaps might have null children, because the inherit from
				// the original AST node, skip them
				vars.addAll(c.metavariables());
		}
		return vars;
	}

	eq MetaVariable.metavariables() {
		TreeSet<lang.ast.Variable> vars = new TreeSet<>(lang.ast.Term.termComparator);
		if (isWildcard()) {
			// This a wildcard, don't add any metavariable for it
			return vars;
		}

		vars.add(new lang.ast.Variable(getID()));
		return vars;
	}

	public class PatLang {
		public static lang.ast.Rule implicitTypeDecl(AnalyzeContext ctx) {
			lang.ast.List<lang.ast.CommonLiteral> head = new lang.ast.List<>();
			lang.ast.List<lang.ast.CommonLiteral> body = new lang.ast.List<>();
			lang.ast.List<lang.ast.Term> vars = new lang.ast.List<>();
			vars.add(new lang.ast.StringConstant("")).add(new lang.ast.IntConstant("0")).add(new lang.ast.IntConstant("0"))
				.add(new lang.ast.IntConstant("0")).add(new lang.ast.StringConstant("0"));

			head.add(new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.progRelName), vars));
			body.add(new lang.ast.NEQLiteral(new lang.ast.PredicateSymbol("NEQ"),
											 new lang.ast.IntConstant("0"),
											 new lang.ast.IntConstant("0")));

			return new lang.ast.Rule(head, body);
		}

		/**
		   Build a rule of the shape:
		   $name(n_id, v) :- P($nodeKind, n_id, $idx, c_id, _), $name(c_id, v).
		 */
		public static lang.ast.Rule associateIdentifierToParentNode(AnalyzeContext ctx,
																	String nodeKind,
																	String name,
																	int idx) {
			lang.ast.List<lang.ast.CommonLiteral> headList = new lang.ast.List<>();
			lang.ast.List<lang.ast.CommonLiteral> bodyList = new  lang.ast.List<>();

			lang.ast.List<lang.ast.Term> headVars = new lang.ast.List<>();
			headVars.add(new lang.ast.Variable("n_id"));
			headVars.add(new lang.ast.Variable("v"));
			headList.add(new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.scopePrefix + name),
										   headVars));

			// ID(n_id, v) :- P(nodeKind, n_id, idx, c_id, _), ID(c_id, v).
			lang.ast.List<lang.ast.Term> body0Vars = new lang.ast.List<lang.ast.Term>()
				.add(new lang.ast.StringConstant(nodeKind))
				.add(new lang.ast.Variable("n_id"))
				.add(new lang.ast.IntConstant("" + idx))
				.add(new lang.ast.Variable("c_id"))
				.add(new lang.ast.Wildcard());

			lang.ast.List<lang.ast.Term> body1Vars = new lang.ast.List<lang.ast.Term>()
				.add(new lang.ast.Variable("c_id"))
				.add(new lang.ast.Variable("v"));


			bodyList.add(new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.progRelName), body0Vars))
				.add(new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.scopePrefix + name), body1Vars));


			return new lang.ast.Rule(headList, bodyList);
		}

		/**
		   Build a rule of the shape:
		   $name(n_id, v) :- P($nodeKind, n_id, idx, t_id, _), P("Terminal", t_id, _, _, v).
		   or, if converFunctor != null:
		   $name(n_id, v) :- P($nodeKind, n_id, idx, t_id, _), P("Terminal", t_id, _, _, w), BIND(v, $converFunctor(w)).
		*/
		public static lang.ast.Rule makeIdentifierRule(AnalyzeContext ctx,
													   String nodeKind,
													   String name,
													   int idx,
													   String convertFunctor) {
			lang.ast.List<lang.ast.CommonLiteral> headList = new lang.ast.List<>();
			lang.ast.List<lang.ast.CommonLiteral> bodyList = new  lang.ast.List<>();

			lang.ast.List<lang.ast.Term> headVars = new lang.ast.List<>();
			headVars.add(new lang.ast.Variable("n_id"));
			headVars.add(new lang.ast.Variable("v"));
			lang.ast.CommonLiteral head = new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.scopePrefix + name),
															headVars);

			// ID(n_id, v) :- P(nodeKind, n_id, idx, t_id, _), P("Terminal", t_id, _, _, v).
			lang.ast.List<lang.ast.Term> body0Vars = new lang.ast.List<lang.ast.Term>()
				.add(new lang.ast.StringConstant(nodeKind))
				.add(new lang.ast.Variable("n_id"))
				.add(new lang.ast.IntConstant("" + idx))
				.add(new lang.ast.Variable("t_id"))
				.add(new lang.ast.Wildcard());

			lang.ast.List<lang.ast.Term> body1Vars = new lang.ast.List<lang.ast.Term>()
				.add(new lang.ast.StringConstant("Terminal"))
				.add(new lang.ast.Variable("t_id"))
				.add(new lang.ast.Wildcard())
				.add(new lang.ast.Wildcard())
				.add(new lang.ast.Variable(convertFunctor != null ? "w" : "v"));

			headList.add(head);
			bodyList.add(new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.progRelName), body0Vars))
				.add(new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.progRelName), body1Vars));

			if (convertFunctor != null) {
				// name(n_id, v) :- P(nodeKind, n_id, idx, t_id, _), P("Terminal", t_id, _, _, w), BIND(v, convertFunctor(w))
				bodyList.add(new lang.ast.BINDLiteral(new lang.ast.PredicateSymbol("BIND"),
													  new lang.ast.Variable("v"),
													  new lang.ast.Functor(new lang.ast.FunctorSymbol(convertFunctor),
																		   new lang.ast.List<lang.ast.Expr>()
																		   .add(new lang.ast.Variable("w")))));
			}

			return new lang.ast.Rule(headList, bodyList);
		}

		public static lang.ast.Rule makeSrcInfoRule(AnalyzeContext ctx) {
			lang.ast.List<lang.ast.CommonLiteral> headList = new lang.ast.List<>();
			lang.ast.List<lang.ast.CommonLiteral> bodyList = new  lang.ast.List<>();

			/* SRC(n, startLine, startCol, endLine, endCol, file) :- P("SrcLocStart", n, startLine, startCol, file),
			   P("SrcLocEnd", n, endLine, endCol, _). */

			headList.add(new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.scopePrefix + "SRC"),
										   new lang.ast.List<lang.ast.Term>()
										   .add(new lang.ast.Variable("n"))
										   .add(new lang.ast.Variable("sl"))
										   .add(new lang.ast.Variable("sc"))
										   .add(new lang.ast.Variable("el"))
										   .add(new lang.ast.Variable("ec"))
										   .add(new lang.ast.Variable("f"))
										   ));
			bodyList.add(new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.progRelName),
										   new lang.ast.List<lang.ast.Term>()
										   .add(new lang.ast.StringConstant("SrcLocStart"))
										   .add(new lang.ast.Variable("n"))
										   .add(new lang.ast.Variable("sl"))
										   .add(new lang.ast.Variable("sc"))
										   .add(new lang.ast.Variable("f"))));
			bodyList.add(new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.progRelName),
										   new lang.ast.List<lang.ast.Term>()
										   .add(new lang.ast.StringConstant("SrcLocEnd"))
										   .add(new lang.ast.Variable("n"))
										   .add(new lang.ast.Variable("el"))
										   .add(new lang.ast.Variable("ec"))
										   .add(new lang.ast.Wildcard())));
			return new lang.ast.Rule(headList, bodyList);
		}

		public static lang.ast.Rule makeIndexRule(AnalyzeContext ctx) {
			lang.ast.List<lang.ast.CommonLiteral> headList = new lang.ast.List<>();
			lang.ast.List<lang.ast.CommonLiteral> bodyList = new  lang.ast.List<>();

			// The INDEX relation maps a node to its position inside a list
			// INDEX(n, i) :- P("List", _, i, n, _)
			headList.add(new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.scopePrefix + "INDEX"),
										   new lang.ast.List<lang.ast.Term>()
										   .add(new lang.ast.Variable("n"))
										   .add(new lang.ast.Variable("i"))));
			bodyList.add(new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.progRelName),
										   new lang.ast.List<lang.ast.Term>()
										   .add(new lang.ast.StringConstant("List"))
										   .add(new lang.ast.Wildcard())
										   .add(new lang.ast.Variable("i"))
										   .add(new lang.ast.Variable("n"))
										   .add(new lang.ast.Wildcard())));
			return new lang.ast.Rule(headList, bodyList);
		}

		public static lang.ast.Literal NEQ(lang.ast.Term t1, lang.ast.Term t2) {
			return new lang.ast.NEQLiteral(new lang.ast.PredicateSymbol("NEQ"), t1, t2);
		}

		public static lang.ast.Rule makeParentRule(AnalyzeContext ctx) {
			lang.ast.List<lang.ast.CommonLiteral> headList = new lang.ast.List<>();
			lang.ast.List<lang.ast.CommonLiteral> bodyList = new  lang.ast.List<>();
			// The PARENT relation maps a node to its children
			// PARENT(n, c) :- P(x, n, _, c, _), NEQ(t, "SrcLocBegin"), NEQ(t, "SrcLocEnd"), NEQ(x, "Terminal").
			headList.add(new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.scopePrefix + "PARENT"),
										   new lang.ast.List<lang.ast.Term>()
										   .add(new lang.ast.Variable("n"))
										   .add(new lang.ast.Variable("c"))));
			bodyList.add(new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.progRelName),
										   new lang.ast.List<lang.ast.Term>()
										   .add(new lang.ast.Variable("t"))
										   .add(new lang.ast.Variable("n"))
										   .add(new lang.ast.Wildcard())
										   .add(new lang.ast.Variable("c"))
										   .add(new lang.ast.Wildcard())));
			bodyList.add(NEQ(new lang.ast.Variable("t"), new lang.ast.StringConstant("SrcLocStart")));
			bodyList.add(NEQ(new lang.ast.Variable("t"), new lang.ast.StringConstant("SrcLocEnd")));
			bodyList.add(NEQ(new lang.ast.Variable("t"), new lang.ast.StringConstant("Terminal")));

			return new lang.ast.Rule(headList, bodyList);
		}

		public static lang.ast.Rule makeExistsRule(AnalyzeContext ctx) {
			lang.ast.List<lang.ast.CommonLiteral> headList = new lang.ast.List<>();
			lang.ast.List<lang.ast.CommonLiteral> bodyList = new  lang.ast.List<>();
			// Predicate to check the existence of a node
			// EXISTS(n) :- P(_, n, _, _, _).
			headList.add(new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.scopePrefix + "EXISTS"),
										   new lang.ast.List<lang.ast.Term>()
										   .add(new lang.ast.Variable("n"))));
			bodyList.add(new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.progRelName),
										   new lang.ast.List<lang.ast.Term>()
										   .add(new lang.ast.Wildcard())
										   .add(new lang.ast.Variable("n"))
										   .add(new lang.ast.Wildcard())
										   .add(new lang.ast.Wildcard())
										   .add(new lang.ast.Wildcard())));
			return new lang.ast.Rule(headList, bodyList);
		}

		public static void makeMetaVariableRelation(AnalyzeContext ctx,
													String nodeKind,
													java.util.List<lang.ast.Rule> ret) {
			// no metavariables for List and Opt
			if (nodeKind.equals("List") ||
				nodeKind.equals("Opt") ||
				nodeKind.equals("ASTNode"))
				return;

			// METAVAR($nodeKind, node_id, child_idx, child_id, aux) :- P($nodeKind, node_id, child_idx, child_id, aux)
			ret.add(new lang.ast.Rule(
							 new lang.ast.List<lang.ast.CommonLiteral>().add(new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.scopePrefix + "METAVAR"),
																		new lang.ast.List<lang.ast.Term>()
																		.add(new lang.ast.StringConstant(nodeKind))
																		.add(new lang.ast.Variable("node_id"))
																		.add(new lang.ast.Variable("child_idx"))
																		.add(new lang.ast.Variable("child_id"))
																		.add(new lang.ast.Variable("aux")))),
							 new lang.ast.List<lang.ast.CommonLiteral>().add(new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.progRelName),
																		 new lang.ast.List<lang.ast.Term>()
																		 .add(new lang.ast.StringConstant(nodeKind))
																		 .add(new lang.ast.Variable("node_id"))
																		 .add(new lang.ast.Variable("child_idx"))
																		 .add(new lang.ast.Variable("child_id"))
																		 .add(new lang.ast.Variable("aux"))))));

			// METAVAR(supertype($nodeKind), node_id, child_idx, child_id, aux) :- METAVAR($nodeKind, node_id, child_idx, child_id, aux)
			String nodeSuperType = PatternGrammarInfo.getNodeSuperType(nodeKind);
			if (nodeSuperType != null && !nodeSuperType.equals("ASTNode")) {
				ret.add(new lang.ast.Rule(
								 new lang.ast.List<lang.ast.CommonLiteral>().add(new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.scopePrefix + "METAVAR"),
																			 new lang.ast.List<lang.ast.Term>()
																			 .add(new lang.ast.StringConstant(nodeSuperType))
																			 .add(new lang.ast.Variable("node_id"))
																			 .add(new lang.ast.Variable("child_idx"))
																			 .add(new lang.ast.Variable("child_id"))
																			 .add(new lang.ast.Variable("aux")))),
								 new lang.ast.List<lang.ast.CommonLiteral>().add(new lang.ast.Atom(new lang.ast.PredicateSymbol(ctx.scopePrefix + "METAVAR"),
																			 new lang.ast.List<lang.ast.Term>()
																			 .add(new lang.ast.StringConstant(nodeKind))
																			 .add(new lang.ast.Variable("node_id"))
																			 .add(new lang.ast.Variable("child_idx"))
																			 .add(new lang.ast.Variable("child_id"))
																			 .add(new lang.ast.Variable("aux"))))));
			}
		}

		public static java.util.List<lang.ast.Rule> makeMetaVariableRelations(AnalyzeContext ctx) {
			java.util.List<lang.ast.Rule> ret = new java.util.ArrayList<>();
			for (String nodeType : PatternGrammarInfo.getNodeType()) {
				makeMetaVariableRelation(ctx, nodeType, ret);
			}
			return ret;
		}
	}
}

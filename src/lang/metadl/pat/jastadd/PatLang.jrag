import lang.cons.Constraint;
import java.util.TreeSet;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.Collections;
import lang.cons.ObjLangASTNode;
import java.lang.reflect.Method;
import java.lang.ReflectiveOperationException;
import lang.ast.AnalyzeContext;
import lang.io.StringUID;

aspect LanguageSpecific {
	// TODO: the token list should be generated
	syn java.util.List<String> ASTNode.tokens() = Collections.emptyList();
	eq IntConstant.tokens() {
		return Collections.singletonList(getNUMERAL());
	}
	eq StringConstant.tokens() {
		return Collections.singletonList(getSTRING());
	}
	eq PredicateRef.tokens() {
		return Collections.singletonList(getPRED_ID());
	}
	eq PredicateSymbol.tokens() {
		return Collections.singletonList(getPRED_ID());
	}
	eq FunctorSymbol.tokens() {
		return Collections.singletonList(getFUNC_ID());
	}
	eq Variable.tokens() {
		return Collections.singletonList(getVAR_ID());
	}

	public static lang.ast.List<lang.ast.Clause> PatLang.generateHelperRelations(AnalyzeContext ctx) {
		lang.ast.List<lang.ast.Clause> ret = new lang.ast.List<>();

		// Add two new rules, to map variables and predicates to their predicates
		ret.add(makeIdentifierRule(ctx, "Variable", "ID", 0, null));
		ret.add(makeIdentifierRule(ctx, "PredicateSymbol", "ID", 0, null));
		ret.add(makeIdentifierRule(ctx, "FunctorSymbol", "ID", 0, null));
		ret.add(makeIdentifierRule(ctx, "IntConstant", "INT", 0, "to_number"));
		ret.add(makeIdentifierRule(ctx, "StringConstant", "STR", 0, null));
		ret.add(makeIdentifierRule(ctx, "PredicateRef", "REF", 0, null));

		// Insert an implicit type declaration for the program relation
		ret.add(implicitTypeDecl(ctx));

		// Insert a relation to represent the source location of the node
		// represented by a metavariable
		ret.add(makeSrcInfoRule(ctx));

		// Insert a relation to map nodes to their position inside a list
		ret.add(makeIndexRule(ctx));

		return ret;
	}

	public static String PatLang.translatePredicateName(AnalyzeContext ctx, String predName) {
		String s = null;
		switch (predName) {
		case "INT":
		case "STR":
		case "ID":
		case "REF":
		case "SRC":
		case "INDEX":
			s = predName; break;
		case "EXPR": s = "EXPR"; break;
		default: return null;
		}
		return ctx. scopePrefix + s;
	}

}

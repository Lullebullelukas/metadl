import lang.relation.PseudoTuple;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Collections;
import java.lang.reflect.ParameterizedType;
import lang.io.StringUID;
import eval.Relation2;
import lang.relation.RelationWrapper;
import eval.EvaluationContext;
import lang.ast.PredicateType;
import lang.ast.IntegerType;
import lang.ast.PredicateRefType;
import lang.ast.StringType;


aspect LanguageSpecific {
	syn PredicateType Program.datalogProjectionType() {
		PredicateType t = new PredicateType(5);
		t.joinAt(0, StringType.get());
		t.joinAt(1, IntegerType.get());
		t.joinAt(2, IntegerType.get());
		t.joinAt(3, IntegerType.get());
		t.joinAt(4, StringType.get());
		return t;
	}

	coll RelationWrapper Program.datalogProjection() [new RelationWrapper(new EvaluationContext(),
																		  new Relation2(5),
																		  datalogProjectionType())]
		with insertPseudoTuples root Program;

	ASTNode contributes toTuples() to Program.datalogProjection() ;
	syn RelationWrapper Program.asRelation(EvaluationContext ctx) {
		// rw uses some internal context
		RelationWrapper rw = datalogProjection();
		// ret uses a context provided by call of asRelation
		RelationWrapper ret = new RelationWrapper(ctx, new Relation2(5), datalogProjectionType());
		ret.insertTuples(rw.tuples());
		return ret;
	}

	// TODO: implement this as for the Java language
	syn String ASTNode.getSourceFile() = "";

	// Identical defintion to PatLang.jrag
	syn java.util.List<String> ASTNode.tokens() = Collections.emptyList();

	eq IntConstant.tokens() {
		return Collections.singletonList(getNUMERAL());
	}
	eq StringConstant.tokens() {
		return Collections.singletonList(getSTRING());
	}
	eq PredicateRef.tokens() {
		return Collections.singletonList(getPRED_ID());
	}
	eq PredicateSymbol.tokens() {
		return Collections.singletonList(getPRED_ID());
	}
	eq FunctorSymbol.tokens() {
		return Collections.singletonList(getFUNC_ID());
	}
	eq Variable.tokens() {
		return Collections.singletonList(getVAR_ID());
	}
}

import eval.EvaluationContext;
import eval.Relation2;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;
import lang.ast.IntegerType;
import lang.ast.PredicateRefType;
import lang.ast.PredicateType;
import lang.ast.StringType;
import lang.io.StringUID;
import lang.relation.PseudoTuple;
import lang.relation.RelationWrapper;
import org.apache.commons.lang3.tuple.Pair;


aspect LanguageSpecific {
	syn PredicateType Program.datalogProjectionType() {
		PredicateType t = new PredicateType(5);
		t.joinAt(0, StringType.get());
		t.joinAt(1, IntegerType.get());
		t.joinAt(2, IntegerType.get());
		t.joinAt(3, IntegerType.get());
		t.joinAt(4, StringType.get());
		return t;
	}

	coll RelationWrapper Program.datalogProjection() [new RelationWrapper(new EvaluationContext(),
																		  new Relation2(5),
																		  datalogProjectionType())]
		with insertPseudoTuples root Program;

	ASTNode contributes toTuples() to Program.datalogProjection() ;
	syn RelationWrapper Program.asRelation(EvaluationContext ctx) {
		// rw uses some internal context
		RelationWrapper rw = datalogProjection();
		// ret uses a context provided by call of asRelation
		RelationWrapper ret = new RelationWrapper(ctx, new Relation2(5), datalogProjectionType());
		ret.insertTuples(rw.tuples());
		return ret;
	}

	// TODO: implement this as for the Java language
	syn String ASTNode.getSourceFile() = "";

	// Identical defintion in Tokens.jrag
	private static Map<Class<?>, java.util.List<Pair<String, Method>>> ASTNode.tokenAccessors = new HashMap<>();

	private java.util.List<Pair<String, Method>> ASTNode.getTokenAccessors() {
		java.util.List<Pair<String, Method>> tokenAccessor = tokenAccessors.get(getClass());
		if (tokenAccessor != null)
			return tokenAccessor;

		for (Method method : getClass().getMethods()) {
			ASTNodeAnnotation.Token token = method.getAnnotation(ASTNodeAnnotation.Token.class);
			if (token != null) {
				if (tokenAccessor == null) {
					tokenAccessor = new ArrayList<>();
				}
				tokenAccessor.add(Pair.of(token.name(), method));
			}
		}

		if (tokenAccessor == null) {
			tokenAccessor = Collections.emptyList();
		}

		tokenAccessors.put(getClass(), tokenAccessor);

		return tokenAccessor;
	}

	/**
	   Return a list of (Token Name, Token Value) pairs representing the
	   tokens of the current AST node
	 */
	public java.util.List<Pair<String, String>> ASTNode.namedTokens() {
		java.util.List<Pair<String, String>> tokens = new ArrayList<>();
		for (Pair<String, Method> accessor : getTokenAccessors()) {
			try {
				tokens.add(Pair.of(accessor.getLeft(), (String) accessor.getRight().invoke(this)));
			} catch (InvocationTargetException e) {
				throw new RuntimeException(e);
			} catch (IllegalAccessException e) {
				throw new RuntimeException(e);
			}
		}
		return tokens;
	}

	public final java.util.List<String> ASTNode.tokens() {
		return namedTokens().stream().map(Pair::getRight).collect(Collectors.toList());
	}
}

import java.util.TreeSet;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.Collections;
import lang.cons.ObjLangASTNode;
import java.lang.reflect.Method;
import java.lang.ReflectiveOperationException;
import lang.ast.AnalyzeContext;
import lang.io.StringUID;
import java.util.Arrays;

aspect LanguageSpecific {
	// TODO: the token list should be generated
	syn java.util.List<String> ASTNode.tokens() {
		try {
			Method m = getClass().getMethod("getID");
			String id = (String)m.invoke(this);
			assert id != null;
			return Collections.singletonList(id);
		} catch (ReflectiveOperationException e) {
			return Collections.emptyList();
		}
	}
	eq ArrayTypeAccess.tokens() {
		return Collections.emptyList();
	}
	eq Literal.tokens() {
		return Collections.singletonList(getLITERAL());
	}
	eq CompilationUnit.tokens() {
		return Collections.singletonList(getPackageDecl());
	}
	eq PackageAccess.tokens() {
		return Collections.singletonList(getPackage());
	}
	eq IdUse.tokens() {
		return Collections.singletonList(getID());
	}
	eq Modifier.tokens() {
		return Collections.singletonList(getID());
	}
	eq LabeledStmt.tokens() {
		return Collections.singletonList(getLabel());
	}
	eq BreakStmt.tokens() {
		return Collections.singletonList(getLabel());
	}
	eq ContinueStmt.tokens() {
		return Collections.singletonList(getLabel());
	}
	eq ParseName.tokens() {
		java.util.List<String>  tokenList = new ArrayList<>();
		for (NamePart np : nameParts)
			tokenList.add(np.toString());
		return tokenList;
	}

	public static lang.ast.Rule PatLang.makeTypeRule(AnalyzeContext ctx) {
		return rule(
					literal(ctx.prefix("TYPE"), "$n", "$t"), // TYPE(n, t) :-
					literal(ctx.prefix("REWRITE_MAP"), "$n", "$n_rw"),
					literal(ctx.progRelName, "ATTR_type", "$n_rw", "_", "$t_rw", "_"), // P("ATTR_type", n, _, t, _)
					literal(ctx.prefix("REWRITE_MAP"), "$t_rw", "$t")
					);
	}

	public static lang.ast.Rule PatLang.makeDeclRule(AnalyzeContext ctx) {
		return rule(
					literal(ctx.prefix("DECL"), "$n", "$t"), // DECL(n, t) :-
					literal(ctx.prefix("REWRITE_MAP"), "$n", "$n_rw"),
					literal(ctx.progRelName, "ATTR_decl", "$n_rw", "_", "$t_rw", "_"), // P("ATTR_decl", n, _, t, _)
					literal(ctx.prefix("REWRITE_MAP"), "$t_rw", "$t")
					);
	}

	public static lang.ast.Rule PatLang.makeGenericRule(AnalyzeContext ctx) {
		return rule(
					literal(ctx.prefix("GENERIC"), "$t", "$g"),
					literal(ctx.prefix("REWRITE_MAP"), "$t", "$t_rw"),
					literal(ctx.progRelName, "ATTR_generic_decl", "$t_rw", "_", "$g_rw", "_"),
					literal(ctx.prefix("REWRITE_MAP"), "$g_rw", "$g"));
	}

	public static lang.ast.Rule PatLang.makeASTRule(AnalyzeContext ctx) {
		return rule(
					literal(ctx.prefix("AST"), "$p1", "$p2", "$p3", "$p4", "$p5"),
					literal(ctx.progRelName, "$p1", "$p2", "$p3", "$p4", "$p5"));
	}


	public static java.util.List<lang.ast.Clause> PatLang.makeRewriteMap(AnalyzeContext ctx) {
		java.util.List<lang.ast.Clause> ret = new java.util.ArrayList<>();
		// REWRITE_MAP(n, n) :- P(_, n, _ , _, _), NOT(P("REWRITE", n, _, _, _)).
		ret.add(rule(
					 literal(ctx.prefix("REWRITE_MAP"), "$n", "$n"),
					 literal(ctx.progRelName, "_", "$n", "_", "_", "_"),
					 NOT(literal(ctx.progRelName, "REWRITE", "$n", "_", "_", "_"))));
		// REWRITE_MAP(n, m) :- P("REWRITE", n, _, m, _).
		ret.add(rule(
					 literal(ctx.prefix("REWRITE_MAP"), "$n", "$m"),
					 literal(ctx.progRelName, "REWRITE", "$n", "_", "$m", "_")));
		return ret;
	}

	public static java.util.List<lang.ast.Clause> PatLang.generateHelperRelations(AnalyzeContext ctx, Set<String> used) {
		java.util.List<lang.ast.Clause> ret = new java.util.ArrayList<>();
		// Identifiers
		if (used.contains("ID")) {
			ret.add(makeIdentifierRule(ctx, "IdUse", "ID", 0, null));
			ret.add(makeIdentifierRule(ctx, "ParseName", "ID", 0, null));
			ret.add(makeIdentifierRule(ctx, "EnumConstant", "ID", 3, null));
			ret.add(makeIdentifierRule(ctx, "FieldDeclarator", "ID", 2, null));
			ret.add(makeIdentifierRule(ctx, "VariableDeclarator", "ID", 2, null));
			ret.add(makeTerminalToIdentifierRule(ctx, "ID"));
		}
		// Modifiers
		if (used.contains("MOD"))
			ret.add(makeIdentifierRule(ctx, "Modifier", "MOD", 0, null));
		// Literals
		if (used.contains("CHAR"))
			ret.add(makeIdentifierRule(ctx, "CharacterLiteral", "CHAR", 0, null));
		if (used.contains("BOOLEAN"))
			ret.add(makeIdentifierRule(ctx, "BooleanLiteral", "BOOLEAN", 0, null));
		if (used.contains("STRING"))
			ret.add(makeIdentifierRule(ctx, "StringLiteral", "STRING", 0, null));
		if (used.contains("NULL"))
			ret.add(makeIdentifierRule(ctx, "NullLiteral", "NULL", 0, null));
		if (used.contains("INT"))
			ret.add(makeIdentifierRule(ctx, "IntegerLiteral", "INT", 0, null));
		if (used.contains("LONG"))
			ret.add(makeIdentifierRule(ctx, "LongLiteral", "LONG", 0, null));
		if (used.contains("FLOAT"))
			ret.add(makeIdentifierRule(ctx, "FloatingPointLiteral", "FLOAT", 0, null));
		if (used.contains("DOUBLE"))
			ret.add(makeIdentifierRule(ctx, "DoubleLiteral", "DOUBLE", 0, null));
		// Insert a relation to represent the source location of the node
		// represented by a metavariable
		if (used.contains("SRC"))
			ret.add(makeSrcInfoRule(ctx));
		// Insert a relation to map nodes to their position inside a list
		if (used.contains("INDEX"))
			ret.add(makeIndexRule(ctx));
		// Insert a relation to map nodes to their children
		if (used.contains("PARENT"))
			ret.add(makeParentRule(ctx));
		// Insert a relation to check existence of nodes
		if (used.contains("EXISTS"))
			ret.add(makeExistsRule(ctx));
		// Insert predicates that expose ExtendJ attributes
		if (used.contains("TYPE") || used.contains("GENERIC") || used.contains("DECL"))
			ret.addAll(makeRewriteMap(ctx));
		// Insert the TYPE relation
		if (used.contains("TYPE"))
			ret.add(makeTypeRule(ctx));
		// Insert the DECL relation
		if (used.contains("DECL"))
			ret.add(makeDeclRule(ctx));
		// Insert the GENERIC rule, map a concrete instance of a generic type
		// to the declaration of the generic type.
		if (used.contains("GENERIC"))
			ret.add(makeGenericRule(ctx));
		// Insert a rule for declaring a node's supertypes
		ret.addAll(makeSuperTypeRelation(ctx));
		// Expose the AST relation
		if (used.contains("AST"))
			ret.add(makeASTRule(ctx));
		// Introduce a predicate for provenance
		ret.add(makeProvenanceRelation(ctx));

		return ret;
	}

	public static String PatLang.translatePredicateName(AnalyzeContext ctx, String predName) {
		String s = null;
		switch (predName) {
		case "ID":
		case "MOD":
		case "CHAR":
		case "BOOLEAN":
		case "STRING":
		case "NULL":
		case "INT":
		case "LONG":
		case "FLOAT":
		case "DOUBLE":
		case "SRC":
		case "INDEX":
		case "EXISTS":
		case "PARENT":
		case "TYPE":
		case "DECL":
		case "GENERIC":
		// Expose the program representation through the AST context predicate.
		case "AST":
			s = predName; break;
		default: return null;
		}
		return ctx. scopePrefix + s;
	}

	public static lang.ast.PredicateType PatLang.contextPredicateType(String predName) {
		switch (predName) {
		case "ID":
		case "MOD":
		case "CHAR":
		case "BOOLEAN":
		case "STRING":
		case "NULL":
		case "INT":
		case "LONG":
		case "FLOAT":
		case "DOUBLE":
			return new lang.ast.PredicateType(lang.ast.ASTNodeType.get(),
											  lang.ast.StringType.get());
		case "SRC":
			return new lang.ast.PredicateType(lang.ast.ASTNodeType.get(),
											  lang.ast.IntegerType.get(),
											  lang.ast.IntegerType.get(),
											  lang.ast.IntegerType.get(),
											  lang.ast.IntegerType.get(),
											  lang.ast.StringType.get());
		case "INDEX":
			return new lang.ast.PredicateType(lang.ast.ASTNodeType.get(),
											  lang.ast.IntegerType.get());
		case "EXISTS":
			return new lang.ast.PredicateType(lang.ast.ASTNodeType.get());
		case "PARENT":
			return new lang.ast.PredicateType(lang.ast.ASTNodeType.get(),
											  lang.ast.ASTNodeType.get());
		case "TYPE":
		case "DECL":
		case "GENERIC":
			return new lang.ast.PredicateType(lang.ast.ASTNodeType.get(),
											  lang.ast.ExtASTNodeType.get());
		case "AST":
			return new lang.ast.PredicateType(lang.ast.StringType.get(),
											  lang.ast.ExtASTNodeType.get(),
											  lang.ast.IntegerType.get(),
											  lang.ast.ExtASTNodeType.get(),
											  lang.ast.StringType.get());
		default:
			return null;
		}
	}
}

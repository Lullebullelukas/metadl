import lang.cons.Constraint;
import java.util.TreeSet;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.Collections;
import lang.cons.ObjLangASTNode;
import java.lang.reflect.Method;
import java.lang.ReflectiveOperationException;
import lang.ast.AnalyzeContext;
import lang.io.StringUID;
import java.util.Arrays;

aspect LanguageSpecific {
	// TODO: the token list should be generated
	syn java.util.List<String> ASTNode.tokens() = Collections.emptyList();
	eq Literal.tokens() {
		return Collections.singletonList(getLITERAL());
	}
	eq CompilationUnit.tokens() {
		return Collections.singletonList(getPackageDecl());
	}
	eq IdWrapper.tokens() {
		return Collections.singletonList(getID());
	}
	eq PackageAccess.tokens() {
		return Collections.singletonList(getPackage());
	}
	eq IdUse.tokens() {
		return Collections.singletonList(getID());
	}
	eq Modifier.tokens() {
		return Collections.singletonList(getID());
	}
	eq LabeledStmt.tokens() {
		return Collections.singletonList(getLabel());
	}
	eq BreakStmt.tokens() {
		return Collections.singletonList(getLabel());
	}
	eq ContinueStmt.tokens() {
		return Collections.singletonList(getLabel());
	}

	public static java.util.List<lang.ast.Clause> PatLang.generateHelperRelations(AnalyzeContext ctx) {
		java.util.List<lang.ast.Clause> ret = new java.util.ArrayList<>();

		// Add two new rules, to map variables and predicates to their predicates
		// Identifiers
		ret.add(makeIdentifierRule(ctx, "IdUse", "ID", 0, null));
		ret.add(makeIdentifierRule(ctx, "IdWrapper", "ID", 0, null));
		// Modifiers
		ret.add(makeIdentifierRule(ctx, "Modifier", "MOD", 0, null));
		// Literals
		ret.add(makeIdentifierRule(ctx, "CharacterLiteral", "CHAR", 0, null));
		ret.add(makeIdentifierRule(ctx, "BooleanLiteral", "BOOLEAN", 0, null));
		ret.add(makeIdentifierRule(ctx, "StringLiteral", "STRING", 0, null));
		ret.add(makeIdentifierRule(ctx, "NullLiteral", "NULL", 0, null));
		ret.add(makeIdentifierRule(ctx, "IntegerLiteral", "INT", 0, null));
		ret.add(makeIdentifierRule(ctx, "LongLiteral", "LONG", 0, null));
		ret.add(makeIdentifierRule(ctx, "FloatingPointLiteral", "FLOAT", 0, null));
		ret.add(makeIdentifierRule(ctx, "DoubleLiteral", "DOUBLE", 0, null));
		// Insert an implicit type declaration for the program relation
		ret.add(implicitTypeDecl(ctx));
		// Insert a relation to represent the source location of the node
		// represented by a metavariable
		ret.add(makeSrcInfoRule(ctx));
		// Insert a relation to map nodes to their position inside a list
		ret.add(makeIndexRule(ctx));

		return ret;
	}

	public static String PatLang.translatePredicateName(AnalyzeContext ctx, String predName) {
		String s = null;
		switch (predName) {
		case "ID":
		case "MOD":
		case "CHAR":
		case "BOOLEAN":
		case "STRING":
		case "NULL":
		case "INT":
		case "LONG":
		case "FLOAT":
		case "DOUBLE":
		case "SRC":
		case "INDEX":
			s = predName; break;
		default: return null;
		}
		return ctx. scopePrefix + s;
	}

	eq MemberClassDecl.isWrapperNode() = true;
	eq MemberInterfaceDecl.isWrapperNode() = true;
	eq InstanceInitializer.isWrapperNode() = true;
	eq ExprStmt.isWrapperNode() = true;
}

import lang.relation.Relation;
import lang.relation.PseudoTuple;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Collections;
import java.lang.reflect.Method;
import lang.io.StringUID;
import java.util.Arrays;

aspect LanguageSpecific {
	coll Relation Program.datalogProjection() [new Relation(5)] with addTuples root Program;
	ASTNode contributes toTuples() to Program.datalogProjection() ;
	syn Relation Program.asRelation() = datalogProjection();

	private String CompilationUnit.sourceFile = "";
	public void CompilationUnit.setSourceFile(String srcFile) {
		sourceFile = srcFile;
	}

	inh String ASTNode.getSourceFileInternal();
	eq CompilationUnit.getChild().getSourceFileInternal() = getSourceFile();

	syn String ASTNode.getSourceFile() = getSourceFileInternal();
	eq CompilationUnit.getSourceFile() = sourceFile;
	eq Program.getSourceFile() = "";
	eq List.getSourceFile() = "";
	eq Opt.getSourceFile() = "";

	// Identical definition to Java5PatterToDatalog.jrag
	syn java.util.List<String> ASTNode.tokens() {
		try {
			Method m = getClass().getMethod("getID");
			String id = (String)m.invoke(this);
			assert id != null;
			return Collections.singletonList(id);
		} catch (ReflectiveOperationException e) {
			return Collections.emptyList();
		}
	}
	eq Literal.tokens() {
		return Collections.singletonList(getLITERAL());
	}
	eq CompilationUnit.tokens() {
		return Collections.singletonList(getPackageDecl());
	}
	eq PackageAccess.tokens() {
		return Collections.singletonList(getPackage());
	}
	eq IdUse.tokens() {
		return Collections.singletonList(getID());
	}
	eq Modifier.tokens() {
		return Collections.singletonList(getID());
	}
	eq LabeledStmt.tokens() {
		return Collections.singletonList(getLabel());
	}
	eq BreakStmt.tokens() {
		return Collections.singletonList(getLabel());
	}
	eq ContinueStmt.tokens() {
		return Collections.singletonList(getLabel());
	}
	eq ParseName.tokens() {
		java.util.List<String>  tokenList = new ArrayList<>();
		for (NamePart np : nameParts)
			tokenList.add(np.toString());
		return tokenList;
	}

}

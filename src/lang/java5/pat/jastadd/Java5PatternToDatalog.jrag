import lang.cons.Constraint;
import java.util.TreeSet;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.Collections;
import lang.cons.ObjLangASTNode;
import java.lang.reflect.Method;
import java.lang.ReflectiveOperationException;
import lang.ast.AnalyzeContext;
import lang.io.StringUID;
import java.util.Arrays;

aspect LanguageSpecific {
	// TODO: the token list should be generated
	syn java.util.List<String> ASTNode.tokens() {
		try {
			Method m = getClass().getMethod("getID");
			String id = (String)m.invoke(this);
			assert id != null;
			return Collections.singletonList(id);
		} catch (ReflectiveOperationException e) {
			return Collections.emptyList();
		}
	}
	eq Literal.tokens() {
		return Collections.singletonList(getLITERAL());
	}
	eq CompilationUnit.tokens() {
		return Collections.singletonList(getPackageDecl());
	}
	eq PackageAccess.tokens() {
		return Collections.singletonList(getPackage());
	}
	eq IdUse.tokens() {
		return Collections.singletonList(getID());
	}
	eq Modifier.tokens() {
		return Collections.singletonList(getID());
	}
	eq LabeledStmt.tokens() {
		return Collections.singletonList(getLabel());
	}
	eq BreakStmt.tokens() {
		return Collections.singletonList(getLabel());
	}
	eq ContinueStmt.tokens() {
		return Collections.singletonList(getLabel());
	}
	eq ParseName.tokens() {
		java.util.List<String>  tokenList = new ArrayList<>();
		for (NamePart np : nameParts)
			tokenList.add(np.toString());
		return tokenList;
	}

	public static lang.ast.Rule PatLang.makeTypeRule(AnalyzeContext ctx) {
		return rule(
					atom(ctx.prefix("TYPE"), "$n", "$t"), // TYPE(n, t) :-
					atom(ctx.prefix("REWRITE_MAP"), "$n", "$n_rw"),
					atom(ctx.progRelName, "ATTR_type", "$n_rw", "_", "$t_rw", "_"), // P("ATTR_type", n, _, t, _)
					atom(ctx.prefix("REWRITE_MAP"), "$t_rw", "$t")
					);
	}

	public static lang.ast.Rule PatLang.makeDeclRule(AnalyzeContext ctx) {
		return rule(
					atom(ctx.prefix("DECL"), "$n", "$t"), // DECL(n, t) :-
					atom(ctx.prefix("REWRITE_MAP"), "$n", "$n_rw"),
					atom(ctx.progRelName, "ATTR_decl", "$n_rw", "_", "$t_rw", "_"), // P("ATTR_decl", n, _, t, _)
					atom(ctx.prefix("REWRITE_MAP"), "$t_rw", "$t")
					);
	}


	public static java.util.List<lang.ast.Clause> PatLang.makeRewriteMap(AnalyzeContext ctx) {
		java.util.List<lang.ast.Clause> ret = new java.util.ArrayList<>();
		// REWRITE_MAP(n, n) :- P(_, n, _ , _, _), NOT(P("REWRITE", n, _, _, _)).
		ret.add(rule(
					 atom(ctx.prefix("REWRITE_MAP"), "$n", "$n"),
					 atom(ctx.progRelName, "_", "$n", "_", "_", "_"),
					 NOT(atom(ctx.progRelName, "REWRITE", "$n", "_", "_", "_"))));
		// REWRITE_MAP(n, m) :- P("REWRITE", n, _, m, _).
		ret.add(rule(
					 atom(ctx.prefix("REWRITE_MAP"), "$n", "$m"),
					 atom(ctx.progRelName, "REWRITE", "$n", "_", "$m", "_")));
		return ret;
	}

	public static java.util.List<lang.ast.Clause> PatLang.generateHelperRelations(AnalyzeContext ctx) {
		java.util.List<lang.ast.Clause> ret = new java.util.ArrayList<>();
		// Identifiers
		ret.add(makeIdentifierRule(ctx, "IdUse", "ID", 0, null));
		ret.add(makeIdentifierRule(ctx, "IdWrapper", "ID", 0, null));
		ret.add(makeIdentifierRule(ctx, "ParseName", "ID", 0, null));
		ret.add(makeIdentifierRule(ctx, "EnumConstant", "ID", 3, null));
		ret.add(makeIdentifierRule(ctx, "FieldDeclarator", "ID", 2, null));
		ret.add(makeIdentifierRule(ctx, "VariableDeclarator", "ID", 2, null));
		ret.add(makeTerminalToIdentifierRule(ctx, "ID"));
		// Modifiers
		ret.add(makeIdentifierRule(ctx, "Modifier", "MOD", 0, null));
		// Literals
		ret.add(makeIdentifierRule(ctx, "CharacterLiteral", "CHAR", 0, null));
		ret.add(makeIdentifierRule(ctx, "BooleanLiteral", "BOOLEAN", 0, null));
		ret.add(makeIdentifierRule(ctx, "StringLiteral", "STRING", 0, null));
		ret.add(makeIdentifierRule(ctx, "NullLiteral", "NULL", 0, null));
		ret.add(makeIdentifierRule(ctx, "IntegerLiteral", "INT", 0, null));
		ret.add(makeIdentifierRule(ctx, "LongLiteral", "LONG", 0, null));
		ret.add(makeIdentifierRule(ctx, "FloatingPointLiteral", "FLOAT", 0, null));
		ret.add(makeIdentifierRule(ctx, "DoubleLiteral", "DOUBLE", 0, null));
		// Insert an implicit type declaration for the program relation
		ret.add(implicitTypeDecl(ctx));
		// Insert a relation to represent the source location of the node
		// represented by a metavariable
		ret.add(makeSrcInfoRule(ctx));
		// Insert a relation to map nodes to their position inside a list
		ret.add(makeIndexRule(ctx));
		// Insert a relation to map nodes to their children
		ret.add(makeParentRule(ctx));
		// Insert a relation to check existence of nodes
		ret.add(makeExistsRule(ctx));
		// Insert predicates that compute the domain of metavariables
		ret.addAll(makeMetaVariableRelations(ctx));
		// Insert predicates that expose ExtendJ attributes
		ret.addAll(makeRewriteMap(ctx));
		// Insert the TYPE relation
		ret.add(makeTypeRule(ctx));
		// Insert the DECL relation
		ret.add(makeDeclRule(ctx));
		return ret;
	}

	public static String PatLang.translatePredicateName(AnalyzeContext ctx, String predName) {
		String s = null;
		switch (predName) {
		case "ID":
		case "MOD":
		case "CHAR":
		case "BOOLEAN":
		case "STRING":
		case "NULL":
		case "INT":
		case "LONG":
		case "FLOAT":
		case "DOUBLE":
		case "SRC":
		case "INDEX":
		case "PARENT":
		case "EXISTS":
		case "TYPE":
		case "DECL":
			s = predName; break;
		default: return null;
		}
		return ctx. scopePrefix + s;
	}

	// eq MemberClassDecl.isWrapperNode() = true;
	// eq MemberInterfaceDecl.isWrapperNode() = true;
	// eq InstanceInitializer.isWrapperNode() = true;
	// eq LocalClassDeclStmt.isWrapperNode() = true;
	// eq ExprStmt.isWrapperNode() = true;
}

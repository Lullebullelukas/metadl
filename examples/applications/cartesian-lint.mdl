#IMPORT("examples/minidoop.in", 'Program).
IMPORT("p/t3.mdl", 'Program).

analyze ('Program) {

  VarOnRHS($p, $q, $i, v) :-
          [ ..., $p(...), ... :- ..., $q(..., $i:$x, ...), ... . ],
	  ID($x, v).

  VarOnRHS($p, $q, $i, v) :-
          [ ..., $p(...), ... :- ..., NOT($q(..., $i:$x, ...)), ... . ],
	  ID($x, v).

  VarInBIND($p, v) :-
          [ ..., $p(...), ... :- ...,BIND($x, $ignore), ... . ],
  	  ID($x, v).

  VarInBIND($p, v) :-
          [ ..., $p(...), ... :- ..., BIND($ignore, $e), ... . ],
  	  VarInExpr($e, v).

  VarInExpr($e, v) :-
          ID($e, v).

  VarInExpr($e, v) :-
          EXPR($e, i, $se), VarInExpr($se, v).

  VarOnLHS($p, $i, v) :-
          [ ..., $p(..., $i:$x, ...), ... :- ... . ],
  	  ID($x, v).

  VarElsewhereOnRHS($p, $q, $k, v) :-
          VarOnRHS($p, $q, $k, v),
          VarOnRHS($p, $q2, $k2, v),
  	  NOT(EQ($q2, $q)).

  VarElsewhereOnRHS($p, $q, $k, v) :-
          VarOnRHS($p, $q, $k, v),
          VarOnRHS($p, $q2, $k2, v),
  	  NOT(EQ($k2, $k)).

  VarUnfiltered($p, $q, $k, v) :-
          VarOnRHS($p, $q, $k, v),
  	  NOT(VarInBIND($p, v)),
  	  NOT(VarElsewhereOnRHS($p, $q, $k, v)).

  PredicateFiltered($q) :-
          VarOnRHS($p, $q, $k, v),
  	  NOT(VarUnfiltered($p, $q, $k, v)).

  VarProjected($p, $i, $q, $k) :-
          VarUnfiltered($p, $q, $k, v),
  	  NOT(PredicateFiltered($q)),
          VarOnLHS($p, $i, v).

  VarIsProjected($p, $i) :- VarProjected($p, $i, $q, $k).

  ProjectionIndicesShared($p, $i, $j) :-
          VarProjected($p, $i, $q, $k1),
          VarProjected($p, $j, $q, $k2).

  ProjectionIndicesSharedN(p_name, $i, $j) :-
          ProjectionIndicesShared($p, $i, $j),
  	  ID($p, p_name).

  InconsistentProjectionN(p_name, $i) :-
          VarProjected($p, $i, $q, $k),
  	  VarOnLHS($p2, $i, v),
  	  ID($p, p_name),
  	  ID($p2, p_name),
  	  NOT(VarIsProjected($p2, $i)).

  InconsistentProjectionN(p_name, $i) :-
          VarProjected($p, $i, $q, $k),
          VarProjected($p2, $i, $q2, $k2),
  	  ID($p, p_name),
  	  ID($p2, p_name),
  	  NOT(EQ($k, $k2)).

  InconsistentProjectionN(p_name, $i) :-
          VarProjected($p, $i, $q, $k),
          VarProjected($p2, $i, $q2, $k2),
  	  ID($p, p_name),
  	  ID($p2, p_name),
  	  ID($q, q_name),
  	  ID($q2, q2_name),
  	  NOT(EQ(q_name, q2_name)).

  InconsistentProjectionN(p_name, $i) :-
          VarProjected($p, $i, $q, $k2),
          VarProjected($p, $j, $q, $k3),
          VarProjected($p2, $i, $q2, $k2),
  	  VarProjected($p2, $j, $q3, $k3),
  	  ID($p, p_name),
  	  ID($p2, p_name),
  	  ID($q, q_name),
  	  ID($q2, q_name),
  	  ID($q3, q_name),
  	  NOT(EQ($q2, $q3)). # in one case we project from one occurrence of Q, in another we project from two distinct ones.

  VarProjectedN(p_name, $i, q_name) :-
          VarProjected($p, $i, $q, $k),
  	  ID($p, p_name),
  	  ID($p, q_name),
  	  NOT(InconsistentProjectionN(p_name, $i)).

  ProjectionWarning(p_name, $i) :- VarProjectedN(p_name, $i, q_name).

  CartesianProjectionWarning(p_name, $i, $j) :-
          VarProjectedN(p_name, $i, q_name),
          VarProjectedN(p_name, $j, q2_name),
  	  NOT(ProjectionIndicesSharedN(p_name, $i, $j)).

}

OUTPUT('CartesianProjectionWarning).
OUTPUT('ProjectionWarning).

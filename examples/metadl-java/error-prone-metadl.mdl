# 5 ErrorProne checks

# Read the sources
EDB('Srcs, "srcs.csv").
Srcs("") :- NEQ(0, 0).

####################################################################################################

# TypeParamNotUsedInFormals
GenericMethod(0, 0, 0, 0), GenericMethodVoid(0, 0, 0) :- NEQ(0, 0).

java('Srcs) {
	    GenericMethod(m, `t1, `t2, `pt) :- m <: <.., `t1, ..> `t2 `_(.. , `pt `p, ..) ; :>.
	    GenericMethodVoid(m, `t1, `t2) :-  m <: <.., `t1, ..> `t2 `_() ; :>, NOT(GenericMethod(m, _, _, _)).

	    IsTypeBound(this, `t) :- this <: `_ extends .. & `t & ..  :>.
	    IsTypeParam(`t, `t1) :- `t <: `_ < .. , `t1 , .. > :>.

	    TypeBound(t, b) :- GenericMethod(m, t, _, _), IsTypeBound(t, b).

	    T_IsTypeParam(t, t1) :- IsTypeParam(t, t1).
	    T_IsTypeParam(t, t1) :- T_IsTypeParam(t, t2), IsTypeParam(t2, t1).

	    # Type qualifies parameter
	    TypeForParam(`t1) :- GenericMethod(m, `t1, `t2, `pt), DECL(`pt, `t1).
	    TypeForParam(`t1) :- GenericMethod(m, `t1, `t2, `pt), IsTypeParam(`pt, t), DECL(t, `t1).

	    GenericMethod3(m, t1, t2) :- GenericMethod(m, t1, t2, _).
	    GenericMethod3(m, t1, t2) :- GenericMethodVoid(m, t1, t2).
	    # < T, U extends T>
	    TypeForTypeBound(t1) :- GenericMethod3(m, t1, _), GenericMethod3(m, t2, _), IsTypeBound(t2, b), DECL(b, t1).
	    # <T, U extends<V<T>>
	    TypeForTypeBound(t1) :- GenericMethod3(m, t1, _), GenericMethod3(m, t2, _), IsTypeBound(t2, b), T_IsTypeParam(b, tp), DECL(tp, t1).

	    # Type used to build the return type
	    TypeForReturn(t1) :- GenericMethod3(m, t1, r), T_IsTypeParam(r, p), DECL(p, t1).


	    TypeUnusedInFormals(t1) :- GenericMethod(m, t1, r, _), NOT(TypeForParam(t1)), NOT(TypeForTypeBound(t1)), NOT(TypeForReturn(t1)).
	    TypeUnusedInFormals(t1) :- GenericMethodVoid(m, t1, r), NOT(TypeForTypeBound(t1)), NOT(TypeForReturn(t1)).

	    TypeUnusedInFormalsDetail(l, c, file) :- TypeUnusedInFormals(t), SRC(t, l, c, _, _, file), GT(l, 0).


OUTPUT('TypeUnusedInFormalsDetail).

####################################################################################################


# ReferenceEquality

	    SuperClass1(c, d) :- c <: class `_ extends `d { .. } :>, DECL(`d, d).
	    SuperClass1(c, d) :- c <: class `_ <..> extends `d { .. } :>, DECL(`d, d).

	    # Lookup the declaration for Object
	    ObjectDecl(o) :- u <: Object :>, DECL(u, o).

	    # If the class does not extend any other class, then it extends Object
	    SuperClass(c, o) :- c <: class `_ { .. } :>, NOT(SuperClass1(c, _)), ObjectDecl(o).
	    SuperClass(c, o) :- c <: class `_ <..> { .. } :>, NOT(SuperClass1(c, _)), ObjectDecl(o).

	    SuperClass(c, d) :- SuperClass1(c, d).

	    SuperInterface(c, d) :- c <: class `_ implements .., `i, .. { .. } :>, DECL(`i, d).
	    SuperInterface(c, d) :- c <: class `_ <..> implements .., `i, .. { .. } :>, DECL(`i, d).

	    SuperInterface(c, d) :- c <: enum `_ implements .., `i, .. { .. } :>, DECL(`i, d).
	    SuperInterface(c, d) :- c <: interface `_ extends .. ,`i, .. { .. } :>, DECL(`i, d).
	    SuperInterface(c, d) :- c <: interface `_ <..> extends .. ,`i, .. { .. } :>, DECL(`i, d).


	    SuperType(t, s) :- SuperClass(t, s).
	    SuperType(t, s) :- SuperInterface(t, s).


	    TSuperType(t, s) :- SuperType(t, s).
	    TSuperType(t, s) :- TSuperType(t, s1), SuperType(s1, s).


# Code for finding if a method overrides another method

	    MethodSig2(m, i, pt) :- m <: `rett `name(.., `pt `_, ..) ; :>,
	    		  DECL(`pt, pt), PARENT(param, `pt), INDEX(param, i).
	    # TODO: The MethodSig1 relation will not contain Object.equals(Object o), since the DECL attribute
	    # is not exported for Object because it is an NTA.
	    MethodSig1(m, name, ret) :- m <: `rett `name(..) ; :>,
	    		  DECL(`rett, ret), ID(`name, name).

	    MethodHasNoParams(m) :- MethodSig1(m, _, _), NOT(MethodSig2(m, _, _)).

	    DiffParamTypes(m1, m2), DiffParamTypes(m2, m1) :- MethodSig2(m1, i, t1), MethodSig2(m2, i, t2), NEQ(t1, t2).

	    GrandParent(g, c) :- PARENT(g, p), PARENT(p, c).

	    # Covariant return type
	    OverrideCandidate(m, super) :- MethodSig1(m, n, ret), MethodSig1(super, n, ret_super), TSuperType(ret, ret_super),
                                  GrandParent(c1, m), GrandParent(c2, super), TSuperType(c1, c2).
	    # Equal return type
	    OverrideCandidate(m, super) :- MethodSig1(m, n, ret), MethodSig1(super, n, ret),
                                  GrandParent(c1, m), GrandParent(c2, super), TSuperType(c1, c2).

	    DiffNumParams(m1, m2), DiffNumParams(m2, m1) :- OverrideCandidate(m1, m2), MethodSig2(m1, i, _),
	                                                    MethodSig2(m2, _, _), NOT(MethodSig2(m2, i, _)), NEQ(m1, m2).
	    DiffNumParams(m1, m2), DiffNumParams(m2, m1) :- OverrideCandidate(m1, m2), MethodSig2(m1, _, _), MethodHasNoParams(m2).


	    # Covariant return type
	    Override(m, super) :- OverrideCandidate(m, super), NOT(DiffNumParams(m, super)).

	    ClassEq(0, 0) :- NEQ(0, 0).
	    ClassEq(c, `d) :- c <: class `_ { .. `d .. } :>, `d <: .. public .. boolean equals(`t `o) ;:>.
	    ClassEq(c, `d) :- c <: class `_ <..> { .. `d .. } :>, `d <: .. public .. boolean equals(`t `o) ;:>.

	    ClassEqDetail(l, c, file) :- ClassEq(cl, d), SRC(cl, l, c, _, _, file).
	    # OUTPUT('ClassEqDetail).

	    # RealType - the most precise type known for the term
	    # - in case of generic type instances, this is the generic type declaration they instantiate
	    RealType(t, r) :- TYPE(t, r), NOT(GENERIC(r, _)), NOT(TypeVariableUpperBound(r, _)).
	    RealType(t, r) :- TYPE(t, r1), GENERIC(r1, r).
	    # - in case of bounded types, the upper bound of the type
	    RealType(t, u) :- TYPE(t, tv), TypeVariableUpperBound(tv, u).

	    EqualityTest(`t1, `t2) :- <: `t1 == `t2 :>.
	    EqualityTest(`t1, `t2) :- <: `t1 != `t2 :>.

	    BadEq(`t1, `t2) :- EqualityTest(`t1, `t2), RealType(`t1, t1), RealType(`t2, t2), MustUseEquals(t1), MustUseEquals(t2),
	    	       NOT(IsExcludedThis(`t1)), NOT(IsExcludedThis(`t2)).

	    DebugEq(t1, t2) :- EqualityTest(`t1, `t2), RealType(`t1, t1), RealType(`t2, t2).
	    # OUTPUT('DebugEq).

	    BadEqDetail(l, c, file) :- BadEq(t1, _), SRC(t1, l, c, _, _, file), GT(l, 0).
	    # OUTPUT('BadEq).
	    OUTPUT('BadEqDetail).

	    MethodIsAbstract(0) :- NEQ(0, 0).
	    MethodIsAbstract(m) :- m <: .. abstract .. `t `m(..) ; :>.


	    # A object of type T must use equals if any supertype of T, including T, excluding Object,
	    # defines the equals method.
	    MustUseEquals(c) :- ClassEq(c, e), NOT(MethodIsAbstract(e)), NOT(ObjectDecl(c)).
	    MustUseEquals(c) :- TSuperType(c, s), ClassEq(s, e), NOT(ObjectDecl(s)).

	    # TODO: Idiosyncrasies in the parser make patterns with generics look very weird.
	    # These are mostly related to the ">>" vs ">"">" lexing problem introduced by generics.
	    # We're using PARENT, because in concrete grammar `t is a token, but we actually we need
	    # the type parameter node in DECL
	    TypeVariableUpperBound(t, u) :- <: class `_ <.. ,`t extends .. & `u & .. , .. >   { .. } :>, PARENT(t, `t), DECL(`u, u).

	    MustUseEqualsDetail(l, c, file) :- MustUseEquals(cl), SRC(cl, l, c, _, _, file).

	    # OUTPUT('MustUseEqualsDetail).

	    # OUTPUT('ClassEq).
	    # OUTPUT('MustUseEquals).

	    TSuperTypeDetail(f1, f2) :- TSuperType(s1, s2), SRC(s1, _, _, _, _, f1), SRC(s2, _, _, _, _, f2).
	    # OUTPUT('TSuperTypeDetail).
	    # OUTPUT('ObjectDecl).

	    # Exclude all the comparisons with this is compareTo and equals methods
	    ExcludedMethods(`m) :- <: class `_ implements Comparable<`t> { .. `m .. } :>, `m <: public int compareTo(..) ; :>.
	    ExcludedMethods(`m) :- `m <: public boolean equals(Object `o); :>.
	    ExcludedTerms(t) :- ExcludedMethods(m), PARENT(m, t).
	    ExcludedTerms(c) :- ExcludedTerms(p), NOT(p <: `_ `_ ( .. ) ; :>), PARENT(p, c).
	    IsThis(`t) :- `t <: this :>.
	    IsExcludedThis(t) :- IsThis(t), ExcludedTerms(t).
	    # OUTPUT('IsThis).
	    # OUTPUT('ExcludedMethods).
	    # OUTPUT('IsExcludedThis).


####################################################################################################


# Missing override

	    OverrideInBetween(m1, m2, p) :- Override(m1, p), Override(p, m2), NEQ(p, m1), NEQ(p, m2).
	    ClosestOverride(m1, m2) :- Override(m1, m2), NOT(OverrideInBetween(m1, m2, _)).
	    ClosestOverrideIsAbstract(m1) :- ClosestOverride(m1, m2), m2 <: .. abstract .. `t `n (..) ; :>.
	    ClosestOverrideIsAbstract(m1) :- ClosestOverride(m1, `m2), <: interface `_ { .. `m2 .. } :>.

	    HasOverride(m) :- m <: .. @Override .. `t `n(..) ; :>.
	    MissingOverride(m) :- Override(m, _), NOT(HasOverride(m)), NOT(ClosestOverrideIsAbstract(m)).
	    MissingOverrideDetail(l, c, file) :- MissingOverride(m), SRC(m, l, c, _, _, file), GT(l, 0).


OUTPUT('MissingOverrideDetail).


####################################################################################################


# Boxed primitive constructor
            TypeName("Character"), TypeName("Integer"), TypeName("Long"), TypeName("Short"),
            TypeName("Byte"), TypeName("Float"), TypeName("Double"), TypeName("Boolean").

	    PrimitiveCtor(e) :- e <: new `c(`_) :>, DECL(`c, c), c <: class `name { .. } :>, ID(`name, t), TypeName(t).
	    PrimitiveCtorDetailEP(l, c, file) :- PrimitiveCtor(e), SRC(e, l, c, _, _, file), GT(l, 0).
	    OUTPUT('PrimitiveCtorDetailEP).



####################################################################################################


# Operator precedence
Conditional(0, 0, 0), Shift(0, 0, 0), Arithmetic(0, 0, 0), SafeAssoc(0, 0, 0) :- NEQ(0, 0).


	    Conditional(e, `l, `r), Prec(e, "cand") :- e <: `l && `r :>.
	    Conditional(e, `l, `r), Prec(e, "cor") :- e <: `l || `r :>.
	    Conditional(e, `l, `r), Prec(e, "xor") :- e <: `l ^ `r :>.
	    Conditional(e, `l, `r), Prec(e, "and") :- e <: `l & `r :>.
	    Conditional(e, `l, `r), Prec(e, "or") :- e <: `l | `r :>.

	    Shift(e, `l, `r), Prec(e, "shift") :- e <: `l >> `r :>.
	    Shift(e, `l, `r), Prec(e, "shift") :- e <: `l >>> `r :>.
	    Shift(e, `l, `r), Prec(e, "shift") :- e <: `l << `r :>.

	    Arithmetic(e, `l, `r), Prec(e, "additive") :- e <: `l + `r :>.
	    Arithmetic(e, `l, `r), Prec(e, "multiplicative") :- e <: `l / `r :>.
	    Arithmetic(e, `l, `r), Prec(e, "multiplicative") :- e <: `l * `r :>.
	    Arithmetic(e, `l, `r), Prec(e, "additive") :- e <: `l - `r :>.

	    SafeAssoc(e, `l, `r) :- e <: `l + `r :>.
	    SafeAssoc(e, `l, `r) :- e <: `l && `r :>.
	    SafeAssoc(e, `l, `r) :- e <: `l || `r :>.

	    Confusing(parent, child) :- Conditional(parent, child, _), Conditional(child, _, _), Prec(parent, pp), Prec(child, pc), NEQ(pp, pc).
	    Confusing(parent, child) :- Conditional(parent, _, child), Conditional(child, _, _), Prec(parent, pp), Prec(child, pc), NEQ(pp, pc).

	    Confusing(parent, child) :- Shift(parent, child, _), Arithmetic(child, _, _).
	    Confusing(parent, child) :- Shift(parent, _, child), Arithmetic(child, _, _).

	    Confusing(parent, child) :- Arithmetic(parent, child, _), Shift(child, _, _).
	    Confusing(parent, child) :- Arithmetic(parent, _, child), Shift(child, _, _).

	    ConfusingDetail(l, c, file) :- Confusing(p, _), SRC(p, l, c, _, _, file), GT(l, 0).


	    Paren(e, `c) :- e <: (`c ) :>.
	    Paren(e, `c) :- Paren(e, e1), e1 <: (`c) :>.

	    SafePrec("cand"), SafePrec("cor"), SafePrec("xor"), SafePrec("and"), SafePrec("or").
	    ExtraParen(parent, child) :- Paren(parent, child), PARENT(gparent, parent), Prec(gparent, p), Prec(child, p), SafePrec(p).
	    ExtraParenDetail(l, c, file) :- ExtraParen(p, _), SRC(p, l, c, _, _, file), GT(l, 0).


OUTPUT('ConfusingDetail).
OUTPUT('ExtraParenDetail).

}